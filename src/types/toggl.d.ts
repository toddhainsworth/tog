/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/audit_logs/{organization_id}/{from}/{to}": {
    /** Returns a list of audit log events for the specified organization and time range. */
    get: operations["get-audit-logs"];
  };
  "/auth/saml2/login": {
    /** Returns the SSO URL given an email address for authenticating in an Identity Provider. */
    get: operations["get-saml2-login-url"];
  };
  "/auth/saml2/login/{workspace_id}": {
    /** Receives the IdP Callback containing the SAML2 assertion with response of user authentication in the IdP. */
    post: operations["post-saml2-callback"];
  };
  "/avatars": {
    /** Handles POST avatar requests. */
    post: operations["post-avatars"];
    /** Handles DELETE avatar requests. */
    delete: operations["delete-avatars"];
  };
  "/avatars/use_gravatar": {
    /** Change user avatar to gravatar. */
    post: operations["post-use-gravatar"];
  };
  "/countries": {
    /** Returns a list of existing countries */
    get: operations["get-countries"];
  };
  "/countries/{country_id}/subdivisions": {
    /** Returns a list of subdivisions for a specific country. */
    get: operations["get-countries-country_id-subdivisions"];
  };
  "/currencies": {
    /** Returns a list of available currencies. */
    get: operations["get-currencies"];
  };
  "/desktop_login": {
    /** Store new desktop login token */
    get: {
      responses: {
        /** Found */
        302: {
          schema: string;
        };
        /** Internal Server Error */
        500: {
          schema: string;
        };
      };
    };
  };
  "/desktop_login_tokens": {
    /** Store new desktop login token */
    post: {
      responses: {
        /** OK */
        200: {
          schema: definitions["desktop.LoginToken"];
        };
        /** Internal Server Error */
        500: {
          schema: string;
        };
      };
    };
  };
  "/feedback": {
    /** Send Feedback */
    post: operations["post-unified-feedback"];
  };
  "/ical/workspace_user/{token}": {
    /** Returns ical file with TEs from last 14 days */
    get: operations["get-ical"];
  };
  "/integrations/calendar": {
    /** Get all integrations a user has. Each user may have at most one integration per provider. */
    get: {
      responses: {
        /** Integrations successfully retrieved */
        200: {
          schema: definitions["github_com_toggl_toggl_api_internal_models.Integration"][];
        };
        /** Internal Server Error */
        500: {
          schema: string;
        };
      };
    };
  };
  "/integrations/calendar/calendars": {
    /** Get all calendars for a given user that was previously saved in the database. */
    get: {
      parameters: {
        query: {
          /** Max results per page */
          limit?: string;
          /** Token for next page. Used in pagination when the number of results exceed 'limit' */
          page_token?: string;
          /** Filter calendars by the integration ID */
          integration_id?: number;
          /** filter calendars by selected value */
          selected?: boolean;
        };
      };
      responses: {
        /** Calendars successfully retrieved */
        200: {
          schema: definitions["handlercalendar.CalendarsResponse"];
        };
        /** <p>Possible error messages:</p><ul><li>while paginating the limit should be always the same</li><li>invalid limit format</li><li>invalid limit error. Please use a value between 0 and 250</li><li>invalid integration_id value</li><li>invalid selected value</li></ul> */
        400: {
          schema: string;
        };
        /** Internal Server Error */
        500: {
          schema: string;
        };
      };
    };
  };
  "/integrations/calendar/calendars/selected": {
    /** Get all selected calendars for a given user that was previously saved in the database. */
    get: {
      parameters: {
        query: {
          /** Max results per page */
          limit?: string;
          /** Token for next page. Used in pagination when the number of results exceed 'limit' */
          page_token?: string;
        };
      };
      responses: {
        /** Calendars successfully retrieved */
        200: {
          schema: definitions["handlercalendar.CalendarsResponse"];
        };
        /** <p>Possible error messages:</p><ul><li>while paginating the limit should be always the same</li><li>invalid limit error. Please use a value between 0 and 250</li></ul> */
        400: {
          schema: string;
        };
        /** Internal Server Error */
        500: {
          schema: string;
        };
      };
    };
  };
  "/integrations/calendar/events": {
    /** Get all events from selected calendars for the caller user. This endpoint will only return events if events were fetched from provider before the request is made. Check which is the endpoint for the events. */
    get: {
      parameters: {
        query: {
          /** Smallest boundary date to search for calendar events */
          start_date: string;
          /** Biggest boundary date to search for calendar events */
          end_date: string;
          /** Max results per page */
          limit?: string;
          /** Token for next page. Used in pagination when the number of results exceed 'limit' */
          page_token?: string;
        };
      };
      responses: {
        /** Events successfully retrieved */
        200: {
          schema: definitions["handlercalendar.EventsResponse"];
        };
        /** <p>Possible error messages:</p><ul><li>start_date has invalid format</li><li>end_date has invalid format</li><li>start_date should not be empty</li><li>end_date should not be empty</li><li>start_date should come before end_date</li><li>User {user_id} has an invalid timezone</li><li>{date} has invalid format</li></ul> */
        400: {
          schema: string;
        };
        /** Internal Server Error */
        500: {
          schema: string;
        };
      };
    };
  };
  "/integrations/calendar/events/details-suggestion": {
    /**
     * Given one or more event IDs, this endpoint responds with the most probable event details
     * (and its accuracy) to assign to the to-be-created time entry for each event ID.
     * This endpoint will only suggests time entries with description and project not empty, because it uses
     * the description to tell if the TE is similar and the project as the main detail to be suggested.
     *
     * If the description is equal, as well as all the other details, the accuracy will be 100%, in the case
     * the description is equal but the other details differs, the most frequent will be suggested and the
     * accuracy will be given based on the frequency. In the case there is no TE with the same description
     * the most similar will be suggested based on the Jaro-Winkler algorithm, and the accuracy will be the
     * similarity rating.
     *
     * This endpoint returns status 200 OK with only the successful suggestions. Any event ID that is invalid
     * or the user does not have access to will be ignored, as well as any event that has no available suggestion.
     */
    post: {
      parameters: {
        body: {
          /** Request body containing the event IDs we want to get the suggestion for */
          request: definitions["handlercalendar.PostDetailsSuggestionRequest"];
        };
      };
      responses: {
        /** Suggestions for specified events */
        200: {
          schema: definitions["handlercalendar.PostDetailsSuggestionResponse"];
        };
        /** Invalid, missing or too many event IDs */
        400: {
          schema: string;
        };
        /** Internal Server Error */
        500: {
          schema: string;
        };
      };
    };
  };
  "/integrations/calendar/events/update": {
    /** Fetch all events from a user's selected calendars and save in database. */
    post: {
      responses: {
        /** Amount of fetched events */
        200: {
          schema: definitions["handlercalendar.Response"];
        };
        /** It's not possible to fetch data from the provider due to some constraint in the user account or an expired token */
        401: {
          schema: string;
        };
        /** User doesn't have access to this event */
        403: {
          schema: string;
        };
        /** <p>Possible error messages:</p><ul><li>an error happened while loading user integrations</li><li>an error happened while loading user calendars</li></ul> */
        404: {
          schema: string;
        };
        /** Internal Server Error */
        500: {
          schema: string;
        };
      };
    };
  };
  "/integrations/calendar/events/{event_id}/details-suggestion": {
    /**
     * Given an event ID, this endpoint responds with the most probable event details (and the accuracy) to
     * assign to the to-be-created time entry.
     * This endpoint will only suggests time entries with description and project not empty, because it uses the
     * description to tell if the TE is similar and the project as the main detail to be suggested.
     *
     * If the description is equal, as well as all the other details, the accuracy will be 100%, in the case
     * the description is equal but the other details differs, the most frequent will be suggested and the
     * accuracy will be given based on the frequency. In the case there is no TE with the same description
     * the most similar will be suggested based on the Jaro-Winkler algorithm, and the accuracy will be the
     * similarity rating.
     *
     * This endpoint returns status 200 OK and a "null" string in case no suggestion was found.
     */
    get: {
      parameters: {
        path: {
          /** Calendar event ID which we want to get a possible project to match */
          event_id: number;
        };
      };
      responses: {
        /** Suggestion of project to fill */
        200: {
          schema: definitions["models.Suggestion"];
        };
        /** Invalid event ID */
        400: {
          schema: string;
        };
        /** Possible error messages:<ul><li>the user has no access to this calendar feature</li><li>the user has no access to this event</li><li>event with ID {event_id} was not found</li></ul> */
        403: {
          schema: string;
        };
        /** Internal Server Error */
        500: {
          schema: string;
        };
      };
    };
  };
  "/integrations/calendar/setup": {
    /** Set up an integration with a given provider, returning a URL to the said provider in order to */
    get: {
      parameters: {
        query: {
          /** Calendar service provider which the calendars will be retrieved */
          provider: string;
          /** Page to which the user will be redirected after authenticating */
          return_to?: string;
        };
      };
      responses: {
        /** URL to authenticate with the provider */
        302: {
          schema: string;
        };
        /** invalid provider name */
        400: {
          schema: string;
        };
        /** user plan does not allow multiple integrations with the same provider */
        402: {
          schema: string;
        };
        /** Internal Server Error */
        500: {
          schema: string;
        };
      };
    };
  };
  "/integrations/calendar/{integration_id}": {
    /** Updates an integration properties. */
    put: {
      parameters: {
        path: {
          /** Integration ID as saved in the database */
          integration_id: number;
        };
      };
      responses: {
        /** Integration updated */
        204: {
          schema: string;
        };
        /** Bad request */
        400: {
          schema: string;
        };
        /** The integration was not found */
        404: {
          schema: string;
        };
        /** Internal Server Error */
        500: {
          schema: string;
        };
      };
    };
    /** Executes logic deletion of an integration. */
    delete: {
      parameters: {
        path: {
          /** Integration ID as saved in the database */
          integration_id: number;
        };
      };
      responses: {
        /** Integration removed */
        204: {
          schema: string;
        };
        /** Internal Server Error */
        500: {
          schema: string;
        };
      };
    };
  };
  "/integrations/calendar/{integration_id}/calendars": {
    /** Get all calendars for a given integration that was previously saved in the database. */
    get: {
      parameters: {
        path: {
          /** Integration ID as saved in the database */
          integration_id: number;
        };
        query: {
          /** Max results per page */
          limit?: number;
          /** if we should get the selected or not calendars, or all calendars, in case of omission */
          selected?: boolean;
          /** Token for next page. Used in pagination when the number of results exceed 'limit' */
          page_token?: string;
        };
      };
      responses: {
        /** Calendars successfully retrieved */
        200: {
          schema: definitions["handlercalendar.CalendarsResponse"];
        };
        /** you do not have access to the integration */
        403: {
          schema: string;
        };
        /** Internal Server Error */
        500: {
          schema: string;
        };
      };
    };
  };
  "/integrations/calendar/{integration_id}/calendars/update": {
    /** This endpoint uses the passed integration to get a provider and update all the calendars from that */
    post: {
      parameters: {
        path: {
          /** Integration ID as saved in the database */
          integration_id: number;
        };
      };
      responses: {
        /** Calendars successfully retrieved */
        200: {
          schema: definitions["handlercalendar.FetchedCalendarsResponse"];
        };
        /** <p>Possible error messages:</p><ul><li>invalid integration_id value</li><li>error fetching data from the provider</li></ul> */
        400: {
          schema: string;
        };
        /** <p>Possible error messages:</p><ul><li>invalid calendar provider</li><li>calendar integration does not exist</li></ul> */
        404: {
          schema: string;
        };
        /** Internal Server Error */
        500: {
          schema: string;
        };
      };
    };
  };
  "/integrations/calendar/{integration_id}/calendars/{calendar_id}": {
    /** This endpoint is used to set updatable fields of a calendar like selected field. */
    patch: {
      parameters: {
        path: {
          /** Integration ID as saved in the database */
          integration_id: number;
          /** Calendar ID as saved in the database */
          calendar_id: number;
        };
        body: {
          /** Calendar fields to be updated */
          payload?: definitions["handlercalendar.PatchCalendar"];
        };
      };
      responses: {
        /** Calendars successfully updated */
        200: {
          schema: definitions["github_com_toggl_toggl_api_internal_models.Calendar"][];
        };
        /** <p>Possible error messages:</p><ul><li>JSON is not valid</li><li>json: unknown field</li><li>ID is an invalid value for calendar_id</li><li>ID is an invalid value for integration_id</li><li>invalid json: Default Task needs workspace_id, project_id and task_id</li><li>invalid json: Default Project needs workspace_id and project_id</li><li>invalid json: cannot set a Default Workspace</li><li>the payload should not be empty</li></ul> */
        400: {
          schema: string;
        };
        /** you do not have a calendar with the given ID */
        404: {
          schema: string;
        };
        /** Internal Server Error */
        500: {
          schema: string;
        };
      };
    };
  };
  "/integrations/calendar/{integration_id}/calendars/{id_calendar}/events": {
    /** Get all events for a given calendar in a given integration. */
    get: {
      parameters: {
        path: {
          /** Integration ID as saved in the database */
          integration_id: number;
          /** Calendar ID as returned by the provider, it may be an e-mail address, for instance */
          id_calendar: string;
        };
        query: {
          /** Smallest boundary date to search for calendar events */
          start_date: string;
          /** Biggest boundary date to search for calendar events */
          end_date: string;
          /** Max results per page */
          limit?: string;
          /** Token for next page. Used in pagination when the number of results exceed 'limit' */
          page_token?: string;
        };
      };
      responses: {
        /** Events successfully retrieved */
        200: {
          schema: definitions["handlercalendar.EventsResponse"];
        };
        /** <p>Possible error messages:</p><ul><li>integration_id should be a positive value</li><li>calendar_id should be a positive value</li><li>start_date has invalid format</li><li>end_date has invalid format</li><li>start_date is not before end_data</li><li>error fetching data from the provider</li></ul> */
        400: {
          schema: string;
        };
        /** <p>Possible error messages:</p><ul><li>calendar access has been expired or revoked</li><li>user account may have been deleted at the provider</li></ul> */
        401: {
          schema: string;
        };
        /** you do not have access to the integration */
        403: {
          schema: string;
        };
        /** <p>Possible error messages:</p><ul><li>invalid calendar provider</li><li>calendar integration does not exist</li><li>calendar with ID: {calendar_id} for user {user_id} not found</li><li>calendar may have been deleted at the provider or user don't have access to it</li></ul> */
        404: {
          schema: string;
        };
        /** Internal Server Error */
        500: {
          schema: string;
        };
      };
    };
  };
  "/invitations/{invitation_code}": {
    /** Returns an invitation data by code. */
    get: operations["get-invitations"];
  };
  "/keys": {
    /** Returns the current JWKS keyset used to sign JWT tokens. */
    get: operations["get-keys"];
  };
  "/me": {
    /** Returns details for the current user. */
    get: operations["get-me"];
    /** Updates details for the current user. */
    put: operations["put-me"];
  };
  "/me/accept_tos": {
    /** Accepts the last version of the Terms of Service for the current user. */
    post: operations["post-me-accept-tos"];
  };
  "/me/clients": {
    /** Get Clients. */
    get: operations["get-clients"];
  };
  "/me/close_account": {
    /** Close Account */
    post: operations["post-close-account"];
  };
  "/me/disable_product_emails/{disable_code}": {
    /** Disable product emails. */
    post: operations["post-me-disable-product-emails"];
  };
  "/me/disable_weekly_report/{weekly_report_code}": {
    /** Disable weekly report. */
    post: operations["post-me-disable-weekly-report"];
  };
  "/me/enable_sso": {
    /** Confirm SSO enabling in existing Toggl account after successful SSO */
    post: operations["post-enable-sso"];
  };
  "/me/export": {
    /** List of objects to be downloaded for an user */
    get: operations["get-me-export"];
    /** An object which data to be downloaded for an user */
    post: operations["post-me-export"];
  };
  "/me/export/data/{uuid}.zip": {
    /** Get a zip file List of download requests from an user. */
    get: operations["get-me-export-data-uuid-zip"];
  };
  "/me/favorites": {
    /** Gets all favorites for the requesting user */
    get: operations["get-favorites"];
    /**
     * This endpoint allows updating an array of favorites. It follow all the requirements
     * and behavior from the [post] (Create Favorite) counterpart.
     */
    put: operations["update-favorite"];
    /**
     * This endpoint allows the creation of a favorite given some parameters. The workspace is required, as well
     * as either description or project (no favorite without both will be accepted). The user is also required,
     * but it already goes in the authentication.
     * Also, the user must have access to all resources being referenced in the favorite attributes, and these
     * resources should have valid relationships. For instance, if you want a favorite in a given workspace and
     * with some tags, the tags must belong to that workspace. In case of user having no access to an attribute,
     * a 403 status is returned, if the attributes don't relate correctly between themselves the status
     * returned will be 400.
     */
    post: operations["create-favorite"];
  };
  "/me/favorites/suggestions": {
    /** It will create 3 favorites based on past user's TE activity and return them. Suggested favorites will be created only once for a given user, and only if the user has never created a favorite before (either manually or by a previous suggestion request). If there is no past TE data there won't be suggested favorites either. */
    post: operations["post-favorites-suggestions"];
  };
  "/me/favorites/{favorite_id}": {
    /** Deletes a given favorite logically from database, as well as its tags. */
    delete: operations["delete-favorite"];
  };
  "/me/features": {
    /** Get features. */
    get: operations["get-me-features"];
  };
  "/me/flags": {
    /** Returns flags for the current user. They will be represented by an object with dynamic string keys, where the value can be of any type. */
    get: operations["get-me-flags"];
    /** Add flags for the current user. The current limits are 4 flags per request, 128 flags in total. Keys and values can be up to 32 and 64 characters, respectively. */
    post: operations["post-me-flags"];
  };
  "/me/id": {
    /** Returns the local Track user ID for the authenticated user. */
    get: operations["get-me-id"];
  };
  "/me/location": {
    /** Returns the client's IP-based location. If no data is present, empty response will be yielded. */
    get: operations["get-me-location"];
  };
  "/me/logged": {
    /** Used to check if authentication works. */
    get: {
      responses: {
        /** OK */
        200: unknown;
        /** Internal Server Error */
        500: {
          schema: string;
        };
      };
    };
  };
  "/me/organizations": {
    /** Get all organizations a given user is part of. */
    get: operations["get-organizations"];
  };
  "/me/preferences": {
    /** Returns user preferences and alpha features. The list of alpha features contains a full list of feature codes (every feature that exists in database) and the `enabled` flag specifying if that feature should be enabled or disabled for the user. */
    get: operations["get-preferences"];
    /** With this endpoint, preferences can be modified and alpha features can be enabled or disabled. */
    post: operations["post-preferences"];
  };
  "/me/preferences/{client}": {
    /** Returns user preferences and alpha features. The list of alpha features contains a full list of feature codes (every feature that exists in database) and the `enabled` flag specifying if that feature should be enabled or disabled for the user. */
    get: operations["get-preferences-client"];
    /** With this endpoint, preferences can be modified and alpha features can be enabled or disabled. */
    post: operations["post-preferences-client"];
  };
  "/me/projects": {
    /** Get projects */
    get: operations["get-me-projects"];
  };
  "/me/projects/paginated": {
    /** Get paginated projects. */
    get: operations["get-me-projects-paginated"];
  };
  "/me/push_services": {
    /** Get list of firebase tokens registered for current user. */
    get: operations["get-push-services"];
    /** Register Firebase token for current user */
    post: operations["post-push-services"];
    /** Unregister Firebase token for current user */
    delete: operations["delete-push-services"];
  };
  "/me/quota": {
    /** Returns the API quota for the current user for all the organizations they are part of. */
    get: operations["get-quota"];
  };
  "/me/reset_token": {
    /** Resets API token for the current user. */
    post: operations["post-reset-token"];
  };
  "/me/tags": {
    /** Returns tags for the current user. */
    get: operations["get-tags"];
  };
  "/me/tasks": {
    /** Returns tasks from projects in which the user is participating. */
    get: operations["get-tasks"];
  };
  "/me/time_entries": {
    /** Lists latest time entries. */
    get: operations["get-time-entries"];
  };
  "/me/time_entries/checklist": {
    /** Check the needed time entries requirement to offer coupon to user */
    get: operations["get-time-entries-checklist"];
  };
  "/me/time_entries/current": {
    /** Load running time entry for user ID. */
    get: operations["get-current-time-entry"];
  };
  "/me/time_entries/{time_entry_id}": {
    /** Load time entry by ID that is accessible by the current user. */
    get: operations["get-time-entry-by-id"];
  };
  "/me/time_entries_shared_with": {
    /** Get the sharing details of the specified time entries in bulk */
    post: operations["post-me-time-entries-shared-with"];
  };
  "/me/timesheets": {
    /** Returns the timehseets for the current user. */
    get: operations["get-me-timesheets"];
  };
  "/me/track_reminders": {
    /** Returns a list of track reminders. */
    get: operations["get-me-track-reminders"];
  };
  "/me/web-timer": {
    /** Get web timer. */
    get: operations["get-web-timer"];
  };
  "/me/workspaces": {
    /** Lists workspaces for given user. */
    get: operations["get-workspaces"];
  };
  "/organizations": {
    /** Creates a new organization with a single workspace and assigns current user as the organization owner */
    post: operations["post-organization"];
  };
  "/organizations/invitations/{invitation_code}/accept": {
    /** User connected with invitation is marked as joined, email is sent to the inviter. */
    post: operations["post-organization-accept-invitation"];
  };
  "/organizations/invitations/{invitation_code}/reject": {
    /** User connected with invitation is marked as deleted. */
    post: operations["post-reject-invitation"];
  };
  "/organizations/{organization_id}": {
    /** Returns organization name and current pricing plan */
    get: operations["get-organization"];
    /** Updates an existing organization */
    put: operations["put-organization"];
  };
  "/organizations/{organization_id}/groups": {
    /**
     * Returns list of groups in organization based on set of url parameters.
     * List is sorted by name.
     */
    get: operations["get-organization-groups"];
    /** Creates a group in the specified organization */
    post: operations["post-organization-group"];
  };
  "/organizations/{organization_id}/groups/{group_id}": {
    /** Edits a group in the specified organization */
    put: operations["put-organization-group"];
    /** Deletes a group from the specified organization */
    delete: operations["delete-organization-group"];
    /** Patches a group in the specified organization. Patches are applied individually. */
    patch: operations["patch-organization-group"];
  };
  "/organizations/{organization_id}/invitations": {
    /** Creates a new invitation for the user. */
    post: operations["post-organization-invitation"];
  };
  "/organizations/{organization_id}/invitations/{invitation_id}/resend": {
    /** Resend invitation email to user. */
    put: operations["put-invitation"];
  };
  "/organizations/{organization_id}/invoices/{invoice_uid}.pdf": {
    /** Returns a Invoice document in PDF form. */
    get: operations["get-organization-invoice"];
  };
  "/organizations/{organization_id}/owner": {
    /** Returns organization owner data. */
    get: operations["get-organization-owner"];
  };
  "/organizations/{organization_id}/owner/transfer": {
    get: operations["get-ownership-transfers"];
    /** Return the ownership transfer for a given organization. */
    post: operations["post-ownership-transfer"];
  };
  "/organizations/{organization_id}/owner/transfer/{transfer_id}": {
    get: operations["get-ownership-transfer"];
  };
  "/organizations/{organization_id}/owner/transfer/{transfer_id}/{action}": {
    /** Return the ownership transfer for a given organization and emails stakeholders. */
    post: operations["post-ownership-transfer-actions"];
  };
  "/organizations/{organization_id}/payment_records": {
    /** Returns paid invoices */
    get: operations["get-organizations-payments-records"];
  };
  "/organizations/{organization_id}/plans": {
    /** Returns pricing plans for an organization */
    get: operations["get-organizations-plans"];
  };
  "/organizations/{organization_id}/plans/{plan_id}": {
    /** Returns pricing plan for an organization identified by plan_id */
    get: operations["get-organizations-plan"];
  };
  "/organizations/{organization_id}/roles": {
    /** Returns a list of organization specific and global roles. */
    get: operations["get-organization-roles"];
  };
  "/organizations/{organization_id}/segmentation": {
    /** Returns organization segmentation information */
    get: operations["get-organization-segmentation"];
    /** Save organization segmentation information */
    put: operations["put-organization-segmentation"];
  };
  "/organizations/{organization_id}/subscription": {
    /** Returns subscription data. */
    get: operations["get-organization-subscription"];
    /** Allows to update existing unified subscription for an organization. */
    put: operations["put-organization-subscription"];
    /** Allows to create a new unified subscription for an organization. */
    post: operations["post-organization-subscription"];
    /** Cancels an existing subscription. */
    delete: operations["delete-organization-subscription"];
  };
  "/organizations/{organization_id}/subscription/cancellation_feedback": {
    /** Allows to create a cancellation feedback for an organization subscription. */
    post: operations["post-organization-subscription-cancellation-feedback"];
  };
  "/organizations/{organization_id}/subscription/customer": {
    /** Retrieve unified customer belonging to the organization. */
    get: operations["get-unified-customer"];
    /**
     * Allows to update unified customer data.
     * Customer name, email, country & postal code are mandatory fields.
     * Optional fields will be cleared if they don't have a value.
     */
    put: operations["put-unified-customer"];
    /** Creates unified customer for organization. */
    post: operations["post-unified-customer"];
  };
  "/organizations/{organization_id}/subscription/discount_request": {
    /** Endpoint for client's feedback when canceling plan. It triggers an e-mail to support with feedbacks and discount request. */
    post: operations["post-organization-subscription-discount-request"];
  };
  "/organizations/{organization_id}/subscription/feature_upsell_multi": {
    /** Gets feature upsell information for all organizations the user has access to */
    post: operations["get-feature-upsell-multi"];
  };
  "/organizations/{organization_id}/subscription/invoice_summary": {
    /** Returns a summary of the next invoice for an Organization */
    get: operations["get-organization-invoice-summary"];
  };
  "/organizations/{organization_id}/subscription/payment_failed": {
    /** Returns subscription payment failed details. */
    get: operations["get-organization-subscription-payment-failed"];
  };
  "/organizations/{organization_id}/subscription/promocode": {
    /**
     * Applies the given promotion code to organization's customer
     * If the customer already has the promotion code, then it will be overridden
     */
    post: operations["post-promotion-code"];
    /** Removes any discount (promotion code) applied to the organization's customer */
    delete: operations["delete-promotion-code"];
  };
  "/organizations/{organization_id}/subscription/purchase_orders/{purchase_order_uid}.pdf": {
    /** Returns a Purchase Order document in PDF form. */
    get: operations["get-organization-purchase-order-pdf"];
  };
  "/organizations/{organization_id}/subscription/referral_bonus": {
    post: operations["post-referral-bonus"];
  };
  "/organizations/{organization_id}/subscription/setup_intent": {
    /** Create a setup intent for collecting customer's payment method for future payments */
    post: operations["create-setup-intent"];
  };
  "/organizations/{organization_id}/subscription/trial": {
    /** Allows to create a new unified subscription on initial 30-day trial for an organization. */
    post: operations["post-organization-subscription-create-trial"];
    /** Cancels an active trial. */
    delete: operations["delete-organization-trial"];
  };
  "/organizations/{organization_id}/subscription/upgrade_request/{feature_id}": {
    /** Endpoint for triggering a call to action on admins for upgrading their subscription. */
    post: operations["post-organization-subscription-upgrade-request"];
  };
  "/organizations/{organization_id}/users": {
    /**
     * Returns list of users in organization based on set of url parameters:
     * Result is paginated. Pagination params are returned in headers
     */
    get: operations["get-organization-users"];
    /** Apply changes in bulk to users in an organization (currently deletion only). */
    patch: operations["patch-organization-users"];
  };
  "/organizations/{organization_id}/users/detailed": {
    /**
     * Returns list of users in organization based on set of url parameters:
     * Result is paginated. Pagination params are returned in headers
     */
    get: operations["get-organization-users-detailed"];
  };
  "/organizations/{organization_id}/users/leave": {
    /** Leaves organization, effectively delete user account in org and delete organization if it is last user */
    delete: operations["delete-organization-users-leave"];
  };
  "/organizations/{organization_id}/users/{organization_user_id}": {
    /** Changes a single organization-user. Can affect the following values: */
    put: operations["put-organization-users"];
  };
  "/organizations/{organization_id}/workspaces": {
    /** Create a workspace within an existing organization. */
    post: operations["post-organization-workspaces"];
  };
  "/organizations/{organization_id}/workspaces/statistics": {
    /**
     * Returns map indexed by workspace ID where each map element contains workspace admins list,
     * members count and groups count.
     */
    get: operations["get-organization-workspaces-statistics"];
  };
  "/organizations/{organization_id}/workspaces/{workspace_id}/assignments": {
    /** Assign or remove users to/from a workspace or to/from groups belonging to said workspace. */
    put: operations["put-organization-workspaces-assignments"];
  };
  "/organizations/{organization_id}/workspaces/{workspace_id}/groups": {
    /**
     * Returns list of groups in a workspace based on set of url parameters.
     * List is sorted by name.
     */
    get: operations["get-organization-workspaces-groups"];
  };
  "/organizations/{organization_id}/workspaces/{workspace_id}/workspace_users": {
    /** Returns any users who belong to the workspace directly or through at least one group. */
    get: operations["get-organization-workspaces-workspaceusers"];
    /** Changes the users in a workspace (currently deletion only). */
    patch: operations["patch-organization-workspace-users"];
  };
  "/smail/contact": {
    /** Send an email to a contact */
    post: operations["post-smail-contact"];
  };
  "/smail/demo": {
    /** Send an email for a demo */
    post: operations["post-smail-demo"];
  };
  "/smail/meet": {
    /** Send an email for meet with message and location */
    post: operations["post-smail-meet"];
  };
  "/status": {
    /** Returns API status. */
    get: operations["get-status"];
  };
  "/subscriptions/plans": {
    /** Get all available plans along with all features available per plan. */
    get: operations["get-all-plans"];
  };
  "/sync-server/me/goals": {
    /** Gets all goals for the requesting user. */
    get: {
      parameters: {
        query: {
          /** archived goals */
          active?: boolean;
        };
      };
      responses: {
        /** List of goals for a given user */
        200: {
          schema: definitions["handlergoals.APIResponse"][];
        };
        /** Internal Server Error */
        500: {
          schema: string;
        };
      };
    };
  };
  "/timeline": {
    /** Get timeline events */
    get: {
      parameters: {
        query: {
          /** Unix timestamp of the start date */
          start_date?: number;
          /** Unix timestamp of the end date */
          end_date?: number;
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["models.TimelineEvent"][];
        };
        /** <p>Possible error messages:</p><ul><li>Timeline is not enabled</li><li>Invalid 'start_date' value</li><li>Invalid 'end_date' value</li></ul> */
        400: {
          schema: string;
        };
        /** Internal error */
        500: {
          schema: string;
        };
        /** Timeline upload is temporarily unavailable */
        503: {
          schema: string;
        };
      };
    };
    /** Save timeline events and returns timeline settings */
    post: {
      parameters: {
        body: {
          /** timeline events */
          timeline_post?: definitions["models.TimelineEvent"][];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["models.TimelineSettings"];
        };
        /** Invalid JSON input */
        400: {
          schema: string;
        };
        /** Timeline upload is temporarily unavailable */
        503: {
          schema: string;
        };
      };
    };
    /** Delete all timeline data for the current user */
    delete: {
      responses: {
        /** Timeline data deleted */
        204: never;
        /** Timeline is not enabled */
        400: {
          schema: string;
        };
        /** Internal Server Error */
        500: {
          schema: string;
        };
      };
    };
  };
  "/timezones": {
    /** Returns known timezones. */
    get: operations["get-timezones"];
  };
  "/timezones/offsets": {
    /** Returns known timezones with their offsets. */
    get: operations["get-offsets"];
  };
  "/workspaces/plans": {
    /** Lists Public subscription plans. */
    get: operations["get-public-subscription-plans"];
  };
  "/workspaces/{workspace_id}": {
    /** Get information of single workspace. */
    get: operations["get-workspace"];
    /** Update a specific workspace. */
    put: operations["put-workspaces"];
  };
  "/workspaces/{workspace_id}/alerts": {
    /** Returns a list of existing alerts */
    get: operations["get-alerts"];
    /** Handles POST alert requests. */
    post: operations["post-alerts"];
  };
  "/workspaces/{workspace_id}/alerts/{alert_id}": {
    /** Handles PUT alert requests. */
    put: operations["put-alerts"];
    /** Handles DELETE alert requests. */
    delete: operations["delete-alerts"];
  };
  "/workspaces/{workspace_id}/clients": {
    /** List clients from workspace. */
    get: operations["get-workspace-clients"];
    /** Create workspace client. */
    post: operations["post-workspace-clients"];
  };
  "/workspaces/{workspace_id}/clients/archive": {
    /** Archives workspace clients and related projects. Only for premium workspaces. */
    post: operations["archive-clients"];
  };
  "/workspaces/{workspace_id}/clients/data": {
    /** List clients from workspace by client_ids */
    post: operations["get-workspace-clients-data"];
  };
  "/workspaces/{workspace_id}/clients/delete": {
    /** Delete one or more workspace clients. */
    post: operations["delete-workspace-clients"];
  };
  "/workspaces/{workspace_id}/clients/{client_id}": {
    /** Load client from workspace. */
    get: operations["get-workspace-client"];
    /**
     * Update workspace client.
     *
     * Note: use /workspaces/{workspace_id}/clients/{client_id}/archive to archive the client and /workspaces/{workspace_id}/clients/{client_id}/restore to restore it.
     */
    put: operations["put-workspace-clients"];
    /** Delete workspace client. */
    delete: operations["delete-workspace-client"];
  };
  "/workspaces/{workspace_id}/clients/{client_id}/archive": {
    /** Archives a workspace client and related projects. Only for premium workspaces. */
    post: operations["archive-client"];
  };
  "/workspaces/{workspace_id}/clients/{client_id}/restore": {
    /** Restores client and all related or specified projects from the given workspace. */
    post: operations["restore-client"];
  };
  "/workspaces/{workspace_id}/currencies": {
    /** Get the currencies for a given workspace. */
    get: operations["get-workspace-currencies"];
  };
  "/workspaces/{workspace_id}/dashboard/all_activity": {
    /**
     * Dashboard's main purpose is to give an overview of what users in the workspace are doing and have been doing.
     * The activity object holds the data of 20 latest actions in the workspace or latest activity for every workspace user.
     * Activity object has the following properties
     * * user_id: user ID
     * * project_id: project ID (ID is 0 if time entry doesn't have project connected to it)
     * * duration: time entry duration in seconds. If the time entry is currently running, the duration attribute contains a negative value, denoting the start of the time entry in seconds since epoch (Jan 1 1970). The correct duration can be calculated as current_time + duration, where current_time is the current time in seconds since epoch.
     * * description: (Description property is not present if time entry description is empty)
     * * stop: time entry stop time (ISO 8601 date and time. Stop property is not present when time entry is still running)
     * * tid: task id, if applicable
     */
    get: operations["get-workspace-all-activities"];
  };
  "/workspaces/{workspace_id}/dashboard/most_active": {
    /**
     * Dashboard's main purpose is to give an overview of what users in the workspace are doing and have been doing.
     * The most active user object holds the data of the top 5 users who have tracked the most time during last 7 days.
     * Most active user object has the following properties
     * * user_id: user ID
     * * duration: Sum of time entry durations that have been created during last 7 days.
     */
    get: operations["get-workspace-most-active"];
  };
  "/workspaces/{workspace_id}/dashboard/top_activity": {
    /**
     * Dashboard's main purpose is to give an overview of what users in the workspace are doing and have been doing.
     * Return objects are same as with the `/workspaces/{workspace_id}/dashboard/all_activity` request.
     */
    get: operations["get-workspace-top-activity"];
  };
  "/workspaces/{workspace_id}/expenses": {
    /** Get work expenses. */
    get: operations["get-expense"];
  };
  "/workspaces/{workspace_id}/expenses/upload": {
    /** Upload a work expense. */
    post: operations["post-expense"];
  };
  "/workspaces/{workspace_id}/exports": {
    /** List of workspace download requests from a given workspace. */
    get: operations["get-workspace-exports"];
    /** List of workspaces downloaded from a given workspace. */
    post: operations["post-workspace-exports"];
  };
  "/workspaces/{workspace_id}/exports/data/{uuid}.zip": {
    /** Send a zip file List of workspace download requests from a given workspace. */
    get: operations["get-workspace-exports-data-uuid-zip"];
  };
  "/workspaces/{workspace_id}/favorites": {
    /** Gets all favorites for the requesting user */
    get: operations["get-workspace-favorites"];
    /**
     * This endpoint allows updating an array of favorites. It follow all the requirements
     * and behavior from the [post] (Create Favorite) counterpart.
     */
    put: operations["update-workspace-favorite"];
    /**
     * This endpoint allows the creation of a favorite.
     * Also, the user must have access to all resources being referenced in the favorite attributes, and these
     * resources should have valid relationships. For instance, if you want a favorite in a given workspace and
     * with some tags, the tags must belong to that workspace. In case of user having no access to an attribute,
     * a 403 status is returned, if the attributes don't relate correctly between themselves the status
     * returned will be 400.
     */
    post: operations["create-workspace-favorite"];
  };
  "/workspaces/{workspace_id}/favorites/suggestions": {
    /** It will create 3 favorites based on past user's TE activity and return them. Suggested favorites will be created only once for a given user, and only if the user has never created a favorite before (either manually or by a previous suggestion request). If there is no past TE data there won't be suggested favorites either. */
    post: operations["post-workspace-favorites-suggestions"];
  };
  "/workspaces/{workspace_id}/favorites/{favorite_id}": {
    /** Deletes a given favorite logically from database, as well as its tags. */
    delete: operations["workspace-delete-favorite"];
  };
  "/workspaces/{workspace_id}/goals": {
    /** Gets all goals for the requesting user in the workspace. */
    get: {
      parameters: {
        path: {
          /** Numeric ID of the workspace */
          workspace_id: number;
        };
        query: {
          /** team goals */
          team_goals?: boolean;
          /** archived goals */
          active?: boolean;
          /** Page number, default 1. */
          page?: number;
          /** Number of items per page, default 20. Also defaults to 100 if provided a value greater than 100. */
          per_page?: number;
        };
      };
      responses: {
        /** List of goals for a given user */
        200: {
          schema: definitions["handlergoals.APIResponse"][];
        };
        /** User has no access to team goals feature */
        403: {
          schema: string;
        };
        /** Internal Server Error */
        500: {
          schema: string;
        };
      };
    };
    /** Create a Goal object with its parameters. */
    post: {
      parameters: {
        path: {
          /** Numeric ID of the workspace */
          workspace_id: number;
        };
        body: {
          /** Goal details */
          goal: definitions["handlergoals.CreatePayload"];
        };
      };
      responses: {
        /** Created Goal */
        200: {
          schema: definitions["models.Goal"];
        };
        /** Some required parameter was not filled, have invalid format or goals limit was reached */
        400: {
          schema: string;
        };
        /** User doesn't belong to given workspace, project or task. It also fails if project or task don't belong to workspace */
        403: {
          schema: string;
        };
        /** Internal Server Error */
        500: {
          schema: string;
        };
      };
    };
  };
  "/workspaces/{workspace_id}/goals/{goal_id}": {
    /** Gets a goal that relates to the calling user in the specified workspace. */
    get: {
      parameters: {
        path: {
          /** Workspace ID */
          workspace_id: number;
          /** Goal ID */
          goal_id: number;
        };
      };
      responses: {
        /** the asked goal */
        200: {
          schema: definitions["handlergoals.APIResponse"];
        };
        /** goal not found for this user */
        404: {
          schema: string;
        };
        /** Internal Server Error */
        500: {
          schema: string;
        };
      };
    };
    /** Update a goal with the updatable parameters given by UpdatePayload */
    put: {
      parameters: {
        path: {
          /** Workspace ID */
          workspace_id: number;
          /** Goal ID */
          goal_id: number;
        };
        body: {
          /** Goal details */
          goal: definitions["handlergoals.UpdatePayload"];
        };
      };
      responses: {
        /** Updated Goal with the changed field */
        200: {
          schema: definitions["models.Goal"];
        };
        /** Goal not found or not accessible by the user */
        400: {
          schema: string;
        };
        /** Internal Server Error */
        500: {
          schema: string;
        };
      };
    };
    /** Delete a goal that was created by the calling user */
    delete: {
      parameters: {
        path: {
          /** Workspace ID */
          workspace_id: number;
          /** Goal ID */
          goal_id: number;
        };
      };
      responses: {
        /** Goal deleted */
        204: never;
        /** Goal already deleted or was not created by this user */
        400: {
          schema: string;
        };
        /** User doesn't belong to given workspace, project or task. It also fails if project or task don't belong to workspace */
        403: {
          schema: string;
        };
        /** Internal Server Error */
        500: {
          schema: string;
        };
      };
    };
  };
  "/workspaces/{workspace_id}/groups": {
    /** Returns a list of groups for the specified workspace. */
    get: operations["get-workspace-groups"];
    /** Creates a group in the specified workspace */
    post: operations["post-workspace-group"];
  };
  "/workspaces/{workspace_id}/groups/{group_id}": {
    /** Updates the group. */
    put: operations["put-workspace-group"];
    /** Deletes the group. */
    delete: operations["delete-workspace-group"];
  };
  "/workspaces/{workspace_id}/ical/reset": {
    /** Reset the iCal token for a given workspace. */
    post: operations["post-workspace-ical-reset"];
  };
  "/workspaces/{workspace_id}/ical/toggle": {
    /** Toggle the iCal token on/off for a given workspace. */
    post: operations["post-workspace-ical-toggle"];
  };
  "/workspaces/{workspace_id}/invoices": {
    /** Get invoices for given workspace with pagination. */
    get: operations["get-workspace-invoices"];
    /** Creates new user invoice. */
    post: operations["post-workspace-user-invoice"];
  };
  "/workspaces/{workspace_id}/invoices/{invoice_id}.pdf": {
    /** Returns an Invoice document in PDF form. */
    get: operations["get-workspace-invoice"];
  };
  "/workspaces/{workspace_id}/invoices/{user_invoice_id}": {
    /** Deletes user invoice by ID if exists. */
    delete: operations["delete-workspace-invoice"];
  };
  "/workspaces/{workspace_id}/linked_sso_profiles": {
    /** Returns a list of SSO profiles that are linked to the given workspace. */
    get: operations["get-workspace-sso"];
  };
  "/workspaces/{workspace_id}/linked_sso_profiles/{sso_profile_id}": {
    /** Link the workspace with the given ID to an SSO profile with the given ID. */
    put: operations["put-workspace-sso"];
    /** Unlink the workspace from an SSO profile. */
    delete: operations["delete-workspace-linked-sso-profiles"];
  };
  "/workspaces/{workspace_id}/logo": {
    /** Get the logo for a given workspace. */
    get: operations["get-workspace-logo"];
    /** Post the logo for a given workspace. */
    post: operations["post-workspace-logo"];
    /** Delete the logo for a given workspace. */
    delete: operations["delete-workspace-logo"];
  };
  "/workspaces/{workspace_id}/payment_receipts/{payment_id}.pdf": {
    /** Returns payment receipt pdf file. */
    get: operations["get-workspace-payment-receipts"];
  };
  "/workspaces/{workspace_id}/preferences": {
    /** Get the preferences for a given workspace. */
    get: operations["get-workspace-preferences"];
    /** Update the preferences for a given workspace. */
    post: operations["post-workspace-preferences"];
  };
  "/workspaces/{workspace_id}/project_groups": {
    /** Get project groups for given workspace. */
    get: operations["get-project-groups"];
    /** Adds group to project for given workspace. */
    post: operations["post-project-group"];
  };
  "/workspaces/{workspace_id}/project_groups/{project_group_id}": {
    /** Remove project group for a given workspace. */
    delete: operations["delete-project-group"];
  };
  "/workspaces/{workspace_id}/project_users": {
    /** List all projects users for a given workspace. */
    get: operations["get-workspace-project-users"];
    /** Include a project user for a given workspace. */
    post: operations["post-workspace-project-users"];
  };
  "/workspaces/{workspace_id}/project_users/paginated": {
    /** List projects users for a given workspace and set of project IDs paginated. */
    post: operations["post-workspace-project-users-paginated"];
  };
  "/workspaces/{workspace_id}/project_users/{project_user_ids}": {
    /** Patch a list of project users for a given workspace. */
    patch: operations["patch-workspace-project-users-ids"];
  };
  "/workspaces/{workspace_id}/project_users/{project_user_id}": {
    /** Update the data for a project user for a given workspace. */
    put: operations["put-workspace-project-users"];
    /** Delete a project user for a given workspace. */
    delete: operations["delete-workspace-project-users"];
  };
  "/workspaces/{workspace_id}/projects": {
    /** Get projects for given workspace. */
    get: operations["get-projects"];
    /** Create project for given workspace. */
    post: operations["post-workspace-project-create"];
  };
  "/workspaces/{workspace_id}/projects/billable-amounts": {
    /** Get projects billable amounts */
    post: {
      parameters: {
        path: {
          /** Numeric ID of the workspace */
          workspace_id: number;
        };
        body: {
          /** Project IDs */
          post_input: definitions["projects.Payload"];
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions["github_com_toggl_toggl_api_internal_models.Project"][];
        };
        /** invalid body */
        400: {
          schema: string;
        };
        /** Operation Forbidden */
        403: {
          schema: string;
        };
        /** Internal Server Error */
        500: {
          schema: string;
        };
      };
    };
  };
  "/workspaces/{workspace_id}/projects/task_count": {
    /** Retrieves the task count for the specified projects */
    post: operations["project-task-count"];
  };
  "/workspaces/{workspace_id}/projects/templates": {
    /** Get projects templates for given workspace. */
    get: operations["get-projects-templates"];
  };
  "/workspaces/{workspace_id}/projects/user_count": {
    /** Retrieves the user count for the specified projects */
    post: operations["project-user-count"];
  };
  "/workspaces/{workspace_id}/projects/{project_ids}": {
    /** Bulk editing workspace projects. */
    patch: operations["patch-workspace-projects"];
  };
  "/workspaces/{workspace_id}/projects/{project_id}": {
    /** Get project for given workspace. */
    get: {
      parameters: {
        path: {
          /** Numeric ID of the workspace */
          workspace_id: number;
          /** Numeric ID of the project */
          project_id: number;
        };
      };
      responses: {
        /** Successful operation. */
        200: {
          schema: definitions["github_com_toggl_toggl_api_internal_models.Project"];
        };
        /** Possible errors:<ul><li>Invalid project_id</li></ul> */
        400: {
          schema: string;
        };
        /** User does not have access to this resource. */
        403: {
          schema: string;
        };
        /** Internal Server Error */
        500: {
          schema: string;
        };
      };
    };
    /** Update project for given workspace. */
    put: operations["put-workspace-project"];
    /** Delete project for given workspace. */
    delete: operations["delete-workspace-project"];
  };
  "/workspaces/{workspace_id}/projects/{project_id}/periods": {
    /** Get recurring project periods for given workspace. */
    get: operations["get-workspace-project-periods"];
  };
  "/workspaces/{workspace_id}/projects/{project_id}/pin": {
    /** Pin or unpin a project to top of user's project list */
    post: operations["post-pinned-project"];
  };
  "/workspaces/{workspace_id}/projects/{project_id}/statistics": {
    /** Get statistics for given workspace and project. For time entry related information, this endpoint does not consider running ones. */
    get: {
      parameters: {
        path: {
          /** Numeric ID of the workspace */
          workspace_id: number;
          /** Numeric ID of the project */
          project_id: number;
        };
      };
      responses: {
        /** Successful operation. */
        200: {
          schema: definitions["models.ProjectStatistics"];
        };
        /** Possible errors:<ul><li>Invalid project_id</li></ul> */
        400: {
          schema: string;
        };
        /** User does not have access to this resource. */
        403: {
          schema: string;
        };
        /** Internal Server Error */
        500: {
          schema: string;
        };
      };
    };
  };
  "/workspaces/{workspace_id}/projects/{project_id}/tasks": {
    /** Get project tasks for given workspace. */
    get: operations["get-workspace-project-tasks"];
    /** Post project tasks for given workspace. */
    post: operations["post-workspace-project-tasks"];
  };
  "/workspaces/{workspace_id}/projects/{project_id}/tasks/{task_ids}": {
    /** Patch project tasks for given workspace. */
    patch: operations["patch-workspace-project-tasks"];
  };
  "/workspaces/{workspace_id}/projects/{project_id}/tasks/{task_id}": {
    /** Get project task for given task id. */
    get: operations["get-workspace-project-task"];
    /** Put project task for given workspace. */
    put: operations["put-workspace-project-task"];
    /** Delete projects task for given workspace. */
    delete: operations["delete-workspace-project-task"];
  };
  "/workspaces/{workspace_id}/rates": {
    /** Creates a new rate. */
    post: operations["create-rate"];
  };
  "/workspaces/{workspace_id}/rates/{level}/{level_id}": {
    /** Get rates by level(workspace|project|task|user). */
    get: operations["get-rates-by-level"];
  };
  "/workspaces/{workspace_id}/reports/shared": {
    /** Get shared report. */
    get: operations["get-shared-report"];
    /** Change shared report. */
    put: operations["put-shared-report"];
    /** Add shared report. */
    post: operations["post-shared-report"];
  };
  "/workspaces/{workspace_id}/reports/shared/bulk_delete": {
    /** Bulk delete saved reports. */
    patch: operations["bulk-delete-saved-report-resource"];
  };
  "/workspaces/{workspace_id}/reports/shared/{report_id}": {
    /** Get a saved report. */
    get: operations["get-saved-report-resource"];
    /** Change saved report. */
    put: operations["put-saved-report-resource"];
    /** Delete saved report. */
    delete: operations["delete-saved-report-resource"];
  };
  "/workspaces/{workspace_id}/scheduled_reports": {
    /** Lists scheduled reports. */
    get: operations["get-workspace-scheduled-reports"];
    /** Endpoint for setting up a scheduled report. */
    post: operations["post-workspace-scheduled-reports"];
  };
  "/workspaces/{workspace_id}/scheduled_reports/{report_id}": {
    /** Endpoint for delete a scheduled report. */
    delete: operations["delete-workspace-scheduled-reports"];
  };
  "/workspaces/{workspace_id}/statistics": {
    /** Returns workspace admins list, members count and groups count */
    get: operations["get-workspace-statistics"];
  };
  "/workspaces/{workspace_id}/subscription": {
    /** Returns subscription data. */
    get: operations["get-workspace-subscription"];
  };
  "/workspaces/{workspace_id}/subscription/purchase_orders/{purchase_order_id}.pdf": {
    /** Returns a Purchase Order document in PDF form. */
    get: operations["get-workspace-purchase-order-pdf"];
  };
  "/workspaces/{workspace_id}/tags": {
    /** List Workspace tags. */
    get: operations["get-workspace-tag"];
    /** Create workspace tags. */
    post: operations["post-workspace-tag"];
    /** Patch will not be executed if there are errors with some records. */
    patch: operations["patch-workspace-tags"];
  };
  "/workspaces/{workspace_id}/tags/{tag_id}": {
    /** Update workspace tags. */
    put: operations["put-workspace-tag"];
    /** Delete workspace tags. */
    delete: operations["delete-workspace-tag"];
  };
  "/workspaces/{workspace_id}/tasks": {
    /** List Workspace tasks. */
    get: operations["get-workspace-tasks"];
  };
  "/workspaces/{workspace_id}/tasks/basic": {
    /** List Workspace tasks. */
    get: operations["get-workspace-tasks-basic"];
  };
  "/workspaces/{workspace_id}/tasks/data": {
    /** List tasks from workspace by project_ids */
    post: operations["getWorkspaceTasksData"];
  };
  "/workspaces/{workspace_id}/time_entries": {
    /** Creates a new workspace TimeEntry. */
    post: operations["post-workspace-time-entries"];
  };
  "/workspaces/{workspace_id}/time_entries/{time_entry_ids}": {
    /** In short: http://tools.ietf.org/html/rfc6902 and http://tools.ietf.org/html/rfc6901 with some additions. Patch will be executed partially when there are errors with some records. No transaction, no rollback. */
    patch: operations["patch-time-entries"];
  };
  "/workspaces/{workspace_id}/time_entries/{time_entry_id}": {
    /** Updates a workspace time entry. */
    put: operations["put-workspace-time-entry-handler"];
    /** Deletes a workspace time entry. */
    delete: operations["delete-workspace-time-entries"];
  };
  "/workspaces/{workspace_id}/time_entries/{time_entry_id}/stop": {
    /** Stops a workspace time entry. */
    patch: operations["patch-workspace-stop-time-entry-handler"];
  };
  "/workspaces/{workspace_id}/time_entry_constraints": {
    /** Get the time entry constraints for a given workspace. */
    get: operations["get-workspace-time-entry-constraints"];
    /** Post the time entry constraints for a given workspace. */
    post: operations["post-workspace-time-entry-constraints"];
  };
  "/workspaces/{workspace_id}/time_entry_invitations": {
    /** Get invitations for time entries */
    get: operations["get-workspace-time-entry-invitations"];
  };
  "/workspaces/{workspace_id}/time_entry_invitations/{time_entry_invitation_id}/{action}": {
    /** Accept or reject an invitation for a time entry */
    post: operations["post-workspace-time-entry-invitation-action"];
  };
  "/workspaces/{workspace_id}/timesheet_setups": {
    /** Get timesheet setups for a given workspace. */
    get: operations["get-timesheet-setups"];
    /** Create timesheet setups. */
    post: operations["post-timesheet-setups"];
  };
  "/workspaces/{workspace_id}/timesheet_setups/{setup_id}": {
    /** Updates a timesheet setups. */
    post: operations["put-timesheet-setups"];
    /** Delete a timesheet setup for a given workspace. */
    delete: operations["delete-timesheet-setups"];
  };
  "/workspaces/{workspace_id}/timesheets": {
    /** Get timesheets applying various filters. */
    get: operations["get-workspace-timesheets-handler"];
    /** Updates a batch of timesheets. */
    put: operations["put-workspace-timesheets-batch-handler"];
  };
  "/workspaces/{workspace_id}/timesheets/hours": {
    /** Get timesheet working hours and total tracked seconds. */
    post: operations["get-workspace-timesheet-hours-handler"];
  };
  "/workspaces/{workspace_id}/timesheets/{setup_id}/{start_date}": {
    /** Updates a timesheet. */
    put: operations["put-workspace-timesheets-handler"];
  };
  "/workspaces/{workspace_id}/timesheets/{setup_id}/{start_date}/time_entries": {
    /** Get the time entries from within a timesheet timeframe. */
    get: operations["get-workspace-timesheet-time-entries-handler"];
  };
  "/workspaces/{workspace_id}/track_reminders": {
    /** Returns a list of track reminders. */
    get: operations["get-workspace-track-reminders"];
    /** Creates a workspace tracking reminder. */
    post: operations["post-workspace-track-reminders"];
  };
  "/workspaces/{workspace_id}/track_reminders/{reminder_id}": {
    /** Updates a workspace tracking reminder. */
    put: operations["put-workspace-track-reminder"];
    /** Deletes a workspace tracking reminder. */
    delete: operations["delete-workspace-track-reminder"];
  };
  "/workspaces/{workspace_id}/users": {
    /** List all users for a given workspace. */
    get: operations["get-workspace-users"];
  };
  "/workspaces/{workspace_id}/users/data": {
    /** List of the specified workspace users basic data for a given workspace. */
    post: operations["post-workspace-users-data"];
  };
  "/workspaces/{workspace_id}/users/{user_id}": {
    /** Update the data for a user in a given workspace. */
    put: operations["put-workspace-users"];
  };
  "/workspaces/{workspace_id}/workspace_users": {
    /** List all workspace_users for a given workspace. */
    get: operations["get-workspace-workspace_users"];
  };
  "/workspaces/{workspace_id}/workspace_users/{workspace_user_id}": {
    /** Update the data for a workspace_user in a given workspace. */
    put: operations["put-workspace-workspace_users"];
    /** Removes user from workspace */
    delete: operations["delete-workspace-user"];
  };
}

export interface definitions {
  "billing.FancyPlan": {
    name?: string;
    plan_id?: number;
    pricing_plans?: definitions["billing.fancyPricingPlan"][];
  };
  "billing.PricingStruct": {
    currency_id?: number;
    discount_percentage?: number;
    discount_to?: string;
    plans?: definitions["billing.FancyPlan"][];
    tax_included?: boolean;
    tax_percentage?: number;
    tax_type?: string;
    user_count?: number;
  };
  "billing.fancyPricingPlan": {
    actual_price_in_usd_cents?: number;
    campaign?: definitions["models.Campaign"];
    list_price_in_usd_cents?: number;
    name?: string;
    period?: number;
    price_point_handle?: string;
    prices_month?: definitions["billing.pricesStruct"];
    prices_period?: definitions["billing.pricesStruct"];
    pricing_plan_id?: number;
  };
  "billing.pricesStruct": {
    actual?: number;
    base?: number;
    with_tax?: number;
  };
  "client.LinkedSsoProfile": {
    /** @example acme.com */
    domain?: string;
    /** @example Default SSO profile for Acme Corp */
    name?: string;
    /** @example 442244 */
    sso_profile_id?: number;
  };
  "client.Payload": {
    external_reference?: string;
    /** @description Client name */
    name?: string;
    notes?: string;
  };
  "clients.ArchiveClientsResponse": {
    client_ids?: number[];
    project_ids?: number[];
  };
  "customer.Coupon": {
    amount_off?: number;
    deleted?: boolean;
    duration?: string;
    duration_in_months?: number;
    id?: string;
    name?: string;
    percent_off?: number;
    valid?: boolean;
  };
  "customer.DiscountResponse": {
    coupon?: definitions["customer.Coupon"];
    promotion_code?: definitions["customer.PromotionCode"];
  };
  "customer.PaymentMethod": {
    card?: definitions["customer.PaymentMethodCard"];
    sepa_debit?: definitions["customer.PaymentMethodSEPADebit"];
    type?: string;
    us_bank_account?: definitions["customer.PaymentMethodUSBankAccount"];
  };
  "customer.PaymentMethodCard": {
    brand?: string;
    country?: string;
    exp_month?: number;
    exp_year?: number;
    last4?: string;
  };
  "customer.PaymentMethodSEPADebit": {
    bank_code?: string;
    country?: string;
    last4?: string;
  };
  "customer.PaymentMethodUSBankAccount": {
    bank_name?: string;
    blocked?: boolean;
    blocked_reason?: string;
    last4?: string;
  };
  "customer.PromotionCode": {
    active?: boolean;
    code?: string;
    expires_at?: string;
    id?: string;
  };
  "customer.UnifiedCustomerResponse": {
    address_line?: string;
    country_id?: string;
    currency?: string;
    customer_name?: string;
    default_payment_method?: definitions["customer.PaymentMethod"];
    discount?: definitions["customer.DiscountResponse"];
    id?: string;
    postal_code?: string;
    site?: string;
    state?: string;
    tax_number?: string;
    toggl_user_email?: string;
    toggl_user_id?: number;
  };
  "dashboard.allActivities": {
    description?: string;
    duration?: number;
    project_id?: number;
    /** Format: date-time */
    stop?: string;
    tid?: number;
    user_id?: number;
  };
  "desktop.LoginToken": {
    login_token?: string;
  };
  "expenses.Expense": {
    approved_at?: string;
    approved_by?: number;
    category?: string;
    chat_gpt_output?: string;
    comment?: string;
    created_at?: string;
    currency?: string;
    /** @description local date with no timezone info */
    date_of_expense?: string;
    deleted_at?: string;
    description?: string;
    download_url?: string;
    exchange_rate?: number;
    exchange_rate_timestamp?: string;
    id?: number;
    ocr_output?: string;
    original_description?: string;
    original_receipt_location?: string;
    receipt_location?: string;
    receipt_mime_type?: string;
    receipt_no?: string;
    rejection_reason?: string;
    service_provider?: string;
    service_provider_address?: string;
    service_provider_country?: string;
    state?: string;
    tax_amount?: number;
    tax_amount_converted?: number;
    timezone?: string;
    total_amount?: number;
    total_amount_converted?: number;
    trip_id?: number;
    update_reason?: string;
    updated_at?: string;
    updated_by?: number;
    user_id?: number;
    workspace_id?: number;
  };
  "export.payload": {
    profile?: boolean;
    timeline?: boolean;
  };
  "favorites.CreateFavorite": {
    billable?: boolean;
    description?: string;
    project_id?: number;
    public?: boolean;
    rank?: number;
    tag_ids?: number[];
    task_id?: number;
  };
  "favorites.UpdateFavorite": {
    billable?: boolean;
    description?: string;
    favorite_id?: number;
    postedFields?: string[];
    project_id?: number;
    public?: boolean;
    rank?: number;
    tag_ids?: number[];
    task_id?: number;
  };
  "feature.UpsellResponse": {
    feature_id?: number;
    is_default_feature?: boolean;
    name?: string;
    upsell_plan_handle?: string;
    upsell_plan_id?: number;
  };
  "github_com_toggl_calendar_api_foundation_models.Color": {
    background?: string;
    foreground?: string;
  };
  "github_com_toggl_toggl_api_internal_models.Calendar": {
    background_color?: string;
    calendar_id?: number;
    calendar_integration_id?: number;
    created_at?: string;
    default_planned_task_id?: number;
    default_project_id?: number;
    default_workspace_id?: number;
    deleted_at?: string;
    external_id?: string;
    foreground_color?: string;
    name?: string;
    /**
     * @description The following fields are deprecated but we need to keep them for backward compatibility with previous versions
     * of mobile apps
     */
    remind_tracking?: boolean;
    selected?: boolean;
    updated_at?: string;
  };
  "github_com_toggl_toggl_api_internal_models.Event": {
    all_day?: boolean;
    calendar_event_id?: number;
    calendar_id?: number;
    color?: definitions["github_com_toggl_calendar_api_foundation_models.Color"];
    created_at?: string;
    end_time?: string;
    external_id?: string;
    html_link?: string;
    /**
     * @description This is a unique ID used to avoid duplicate events when getting information
     * from multiple sources. E. G. the mobile may get calendar events without BE integration,
     * so they should be able to tell if an event is repeated.
     */
    ical_uid?: string;
    /** @description Potentially nil fields, attempt retrieval with Reference() method. */
    internal_ref_id?: number;
    internal_ref_product_id?: number;
    internal_ref_type?: string;
    meeting_link?: string;
    provider?: string;
    start_time?: string;
    title?: string;
    /** @description Deprecated */
    updated?: string;
    updated_at?: string;
  };
  "github_com_toggl_toggl_api_internal_models.Group": {
    at?: string;
    has_users?: boolean;
    id?: number;
    name?: string;
    permissions?: string[];
    workspace_id?: number;
  };
  "github_com_toggl_toggl_api_internal_models.Integration": {
    auto_track?: boolean;
    calendar_integration_id?: number;
    created_at?: string;
    email?: string;
    error_status?: string;
    has_write_scope?: boolean;
    /** @description The product that initially integrated the calendar. */
    origin_product_id?: number;
    provider?: string;
    scopes?: string[];
  };
  "github_com_toggl_toggl_api_internal_models.Invitation": {
    code?: string;
    email?: string;
    organization_id?: number;
    organization_name?: string;
    sender_email?: string;
    sender_name?: string;
  };
  "github_com_toggl_toggl_api_internal_models.OrganizationOwner": {
    avatar_url?: string;
    email?: string;
    id?: number;
    name?: string;
    organization_id?: number;
    organization_user_created_at?: string;
    organization_user_id?: number;
    organization_user_updated_at?: string;
    toggl_accounts_id?: string;
    user_id?: number;
  };
  "github_com_toggl_toggl_api_internal_models.OrganizationUserSimple": {
    avatar_url?: string;
    inactive?: boolean;
    joined?: boolean;
    name?: string;
    user_id?: number;
  };
  "github_com_toggl_toggl_api_internal_models.Plan": {
    id?: number;
    max_user_count?: number;
    name?: string;
    pricing_plans?: definitions["models.PricingPlan"][];
    product_handle?: string;
  };
  "github_com_toggl_toggl_api_internal_models.PlanFeature": {
    description?: string;
    feature_id?: number;
    is_default_feature?: boolean;
    name?: string;
    trial_only?: boolean;
  };
  "github_com_toggl_toggl_api_internal_models.Project": {
    /** @description Whether the project is active or archived */
    active?: boolean;
    /** @description Actual hours */
    actual_hours?: number;
    /** @description Actual seconds */
    actual_seconds?: number;
    /** @description Last updated date */
    at?: string;
    /** @description Whether estimates are based on task hours, premium feature */
    auto_estimates?: boolean;
    /** @description Whether the project is billable, premium feature */
    billable?: boolean;
    can_track_time?: boolean;
    /** @description Client ID legacy field */
    cid?: number;
    /** @description Client ID */
    client_id?: number;
    client_name?: string;
    /** @description Color */
    color?: string;
    /** @description Creation date */
    created_at?: string;
    /** @description Currency, premium feature */
    currency?: string;
    /** @description Current project period, premium feature */
    current_period?: definitions["models.RecurringPeriod"];
    /** @description End date */
    end_date?: string;
    /** @description Estimated hours */
    estimated_hours?: number;
    /** @description Estimated seconds */
    estimated_seconds?: number;
    /** @description ExternalReference can be used to store an external reference to the Track Project Entity. */
    external_reference?: string;
    /** @description Fixed fee, premium feature */
    fixed_fee?: number;
    /** @description Project ID */
    id?: number;
    /** @description The external ID of the linked entity in the external system (e.g. JIRA/SalesForce) */
    integration_ext_id?: string;
    /** @description The external type of the linked entity in the external system (e.g. JIRA/SalesForce) */
    integration_ext_type?: string;
    /** @description The provider (e.g. JIRA/SalesForce) that has an entity linked to this Toggl Track entity */
    integration_provider?: definitions["models.IntegrationProvider"];
    /** @description Whether the project is private */
    is_private?: boolean;
    /** @description Name */
    name?: string;
    permissions?: string[];
    pinned?: boolean;
    /** @description Hourly rate */
    rate?: number;
    /** @description Last date for rate change */
    rate_last_updated?: string;
    /** @description Whether the project is recurring, premium feature */
    recurring?: boolean;
    /** @description Project recurring parameters, premium feature */
    recurring_parameters?: definitions["models.RecurringProjectParameters"][];
    /** @description Start date */
    start_date?: string;
    /** @description Status of the project (upcoming, active, ended, archived, deleted) */
    status?: definitions["models.ProjectStatus"];
    /** @description Whether the project is used as template, premium feature */
    template?: boolean;
    /** @description Template ID */
    template_id?: number;
    /** @description Total number of projects found */
    total_count?: number;
    /** @description Workspace ID legacy field */
    wid?: number;
    /** @description Workspace ID */
    workspace_id?: number;
  };
  "github_com_toggl_toggl_api_internal_models.TimeEntry": {
    /** @description When was last updated, the field follows the ISO 8601 format (HH:mm:ss.ssssssZ) */
    at?: string;
    /** @description Whether the time entry is marked as billable */
    billable?: boolean;
    /** @description Related entities meta fields - if requested */
    client_name?: string;
    /** @description Time Entry description, null if not provided at creation/update */
    description?: string;
    /** @description Time entry duration. For running entries should be negative, preferable -1 */
    duration?: number;
    /** @description Used to create a TE with a duration but without a stop time, this field is deprecated for GET endpoints where the value will always be true. */
    duronly?: boolean;
    /** @description Work expenses */
    expense_ids?: number[];
    /** @description Time Entry ID */
    id?: number;
    /** @description Permission list */
    permissions?: string[];
    /** @description Project ID, legacy field */
    pid?: number;
    project_active?: boolean;
    project_billable?: boolean;
    project_color?: string;
    /** @description Project ID. Can be null if project was not provided or project was later deleted */
    project_id?: number;
    project_name?: string;
    /** @description Indicates who the time entry has been shared with */
    shared_with?: definitions["models.TimeEntrySharedWith"][];
    /** @description Start time in UTC */
    start?: string;
    /** @description Stop time in UTC, can be null if it's still running or created with "duration" and "duronly" fields */
    stop?: string;
    /** @description Tag IDs, null if tags were not provided or were later deleted */
    tag_ids?: number[];
    /** @description Tag names, null if tags were not provided or were later deleted */
    tags?: string[];
    /** @description Task ID. Can be null if task was not provided or project was later deleted */
    task_id?: number;
    task_name?: string;
    /** @description Task ID, legacy field */
    tid?: number;
    /** @description Time Entry creator ID, legacy field */
    uid?: number;
    user_avatar_url?: string;
    /** @description Time Entry creator ID */
    user_id?: number;
    user_name?: string;
    /** @description Workspace ID, legacy field */
    wid?: number;
    /** @description Workspace ID */
    workspace_id?: number;
  };
  "github_com_toggl_toggl_api_internal_models.TogglUser": {
    "2fa_enabled"?: boolean;
    /** @description will be omitted if empty */
    api_token?: string;
    /** Format: date-time */
    at?: string;
    beginning_of_week?: number;
    country_id?: number;
    /** Format: date-time */
    created_at?: string;
    default_workspace_id?: number;
    /** Format: email */
    email?: string;
    fullname?: string;
    has_password?: boolean;
    id?: number;
    /** @example http://example.com */
    image_url?: string;
    /** Format: email */
    openid_email?: string;
    openid_enabled?: boolean;
    /** @description will be omitted if empty */
    options?: definitions["models.Options"];
    timezone?: string;
    /** Format: date-time */
    updated_at?: string;
  };
  "github_com_toggl_toggl_api_internal_models.Workspace": {
    /**
     * @description Current user is workspace admin
     * Deprecated
     */
    admin?: boolean;
    /** @description deprecated */
    api_token?: string;
    /** @description Timestamp of last workspace change */
    at?: string;
    /** @description Workspace on Premium subscription */
    business_ws?: boolean;
    /** @description CSV upload data */
    csv_upload?: definitions["models.CsvUpload"];
    /** @description Default currency, premium feature, optional, only for existing WS, will be 'USD' initially */
    default_currency?: string;
    /** @description The default hourly rate, premium feature, optional, only for existing WS, will be 0.0 initially */
    default_hourly_rate?: number;
    /** @description Disable approvals in the workspace */
    disable_approvals?: boolean;
    /** @description Disable expenses in the workspace */
    disable_expenses?: boolean;
    /** @description Disable timesheet view in the workspace */
    disable_timesheet_view?: boolean;
    hide_start_end_times?: boolean;
    /** @description Calendar integration enabled */
    ical_enabled?: boolean;
    /** @description URL of calendar */
    ical_url?: string;
    /** @description Identifier of the workspace */
    id?: number;
    /** @description Last modification of data in the workspace */
    last_modified?: string;
    /** @description Limit public projects data in reports to admins. */
    limit_public_project_data?: boolean;
    /** @description URL of workspace logo */
    logo_url?: string;
    /** @description How far back free workspaces can access data. */
    max_data_retention_days?: definitions["models.DataRetentionDays"];
    /** @description Name of the workspace */
    name?: string;
    /** @description Only admins will be able to create projects, optional, only for existing WS, will be false initially */
    only_admins_may_create_projects?: boolean;
    /** @description Only admins will be able to create tags, optional, only for existing WS, will be false initially */
    only_admins_may_create_tags?: boolean;
    /** @description Only admins will be able to see the team dashboard, optional, only for existing WS, will be false initially */
    only_admins_see_team_dashboard?: boolean;
    /** @description Identifier of the organization */
    organization_id?: number;
    /** @description Permissions list */
    permissions?: string[];
    /** @description Workspace on Starter subscription */
    premium?: boolean;
    /** @description New projects billable by default */
    projects_billable_by_default?: boolean;
    /** @description Whether tracking time to projects will enforce billable setting to be respected. */
    projects_enforce_billable?: boolean;
    /** @description Workspace setting for default project visbility. */
    projects_private_by_default?: boolean;
    /** @description Timestamp of last workspace rate update */
    rate_last_updated?: string;
    /** @description Whether reports should be collapsed by default, optional, only for existing WS, will be true initially */
    reports_collapse?: boolean;
    /** @description Role of the current user in the workspace */
    role?: string;
    /** @description Default rounding, premium feature, optional, only for existing WS. 0 - nearest, 1 - round up, -1 - round down */
    rounding?: number;
    /** @description Default rounding in minutes, premium feature, optional, only for existing WS */
    rounding_minutes?: number;
    /** @description deprecated */
    subscription?: definitions["models.Subscription"];
    /**
     * Format: date-time
     * @description Timestamp of suspension
     */
    suspended_at?: string;
    /** @description Time entry constraints setting */
    te_constraints?: definitions["models.TimeEntryConstraints"];
    /** @description Working hours in minutes */
    working_hours_in_minutes?: number;
  };
  "github_com_toggl_toggl_api_internal_models.WorkspaceUser": {
    /** @description Flag indicating whether use has 2FA enabled or not. */
    "2fa_enabled"?: boolean;
    /** @description Flag indicating if user accepted the invitation */
    active?: boolean;
    /** @description Flag indicating if user is admin */
    admin?: boolean;
    /** @description Timestamp of the last update */
    at?: string;
    /** @description URL of avatar */
    avatar_file_name?: string;
    /** @description Email of the user */
    email?: string;
    /** @description List of groups the user belongs to */
    group_ids?: number[];
    /** @description Identifier of the user  workspace */
    id?: number;
    /** @description Flag indicating if user was deactivated by admin of the workspace */
    inactive?: boolean;
    /** @description internal */
    invitation_code?: string;
    /** @description internal */
    invite_url?: string;
    /** @description Flag indicating if user is a direct member of the workspace (is not assigned to the workspace using the group) */
    is_direct?: boolean;
    /** @description Labor cost assigned to the user */
    labor_cost?: number;
    /** @description Timestamp of the last labor cost update */
    labor_cost_last_updated?: string;
    /** @description Name of the user */
    name?: string;
    /** @description Flag indicating if user is admin inside organization */
    organization_admin?: boolean;
    /** @description Rate assigned to the user */
    rate?: number;
    /** @description Timestamp of the last rate update */
    rate_last_updated?: string;
    /** @description Role of the user */
    role?: string;
    role_id?: number;
    /** @description Timezone of the user */
    timezone?: string;
    /** @description Global user identifier */
    uid?: number;
    /** @description UserID alternative JSON field, only used by get-organization-workspaces-workspaceusers */
    user_id?: number;
    /**
     * @description Granular rate permission flags
     * Only takes effect on roles with conditional rate permissions
     */
    view_edit_billable_rates?: boolean;
    view_edit_labor_costs?: boolean;
    /** @description Workspace identifier */
    wid?: number;
    /** @description Working hours value in minutes */
    working_hours_in_minutes?: number;
    /** @description Flag indicating if user is admin inside workspace */
    workspace_admin?: boolean;
    /** @description UserID alternative JSON field, only used by get-organization-workspaces-workspaceusers */
    workspace_id?: number;
  };
  "github_com_toggl_toggl_api_internal_services_organization_user.Payload": {
    email?: string;
    groups?: number[];
    inactive?: boolean;
    name?: string;
    organization_admin?: boolean;
    role_id?: number;
    workspaces?: definitions["models.OrgUserWorkspace"][];
  };
  "github_com_toggl_toggl_api_internal_services_workspace_user.Payload": {
    /** @description deprecated */
    admin?: boolean;
    inactive?: boolean;
    /** @description Custom labor cost for project user */
    labor_cost?: number;
    labor_cost_change_mode?: string;
    /** @description for explicit NULL-s, add field name here */
    postedFields?: string[];
    /** @description Paid feature */
    rate?: number;
    /** @description Paid feature */
    rate_change_mode?: string;
    /** @description Allowed inputs: "admin", "user", "projectlead" and "teamlead" */
    role?: string;
    role_id?: number;
    view_edit_billable_rates?: boolean;
    view_edit_labor_costs?: boolean;
    /** @description Paid feature */
    working_hours_in_minutes?: number;
  };
  "group.NamePayload": {
    name?: string;
  };
  "group.OrganizationGroupResponse": {
    at?: string;
    group_id?: number;
    name?: string;
    permissions?: string[];
    users?: definitions["github_com_toggl_toggl_api_internal_models.OrganizationUserSimple"][];
    workspaces?: number[];
  };
  "group.Payload": {
    /** @description Group name */
    name?: string;
    /** @description Group users, optional */
    users?: number[];
    /** @description Group workspaces */
    workspaces?: number[];
  };
  "group.ProjectGroupPayload": {
    /** @description Group ID */
    group_id?: number;
    /** @description Project ID */
    project_id?: number;
  };
  "groups.PatchFailure": {
    message?: string;
    patch?: definitions["groups.PatchInput"];
  };
  "groups.PatchInput": {
    op?: string;
    path?: string;
    value?: number[];
  };
  "groups.PatchOutput": {
    failure?: definitions["groups.PatchFailure"][];
    success?: definitions["groups.PatchInput"][];
  };
  "handlercalendar.CalendarsResponse": {
    calendars?: definitions["github_com_toggl_toggl_api_internal_models.Calendar"][];
    next_page_token?: string;
  };
  "handlercalendar.EventsResponse": {
    events?: definitions["github_com_toggl_toggl_api_internal_models.Event"][];
    next_page_token?: string;
  };
  "handlercalendar.FetchedCalendarsResponse": {
    fetched_calendars?: number;
  };
  "handlercalendar.PatchCalendar": {
    default_planned_task_id?: number;
    default_project_id?: number;
    default_workspace_id?: number;
    /**
     * @description The following fields are deprecated but we need to keep them for backward compatibility with previous versions
     * of mobile apps
     */
    remind_tracking?: boolean;
    selected?: boolean;
  };
  "handlercalendar.PostDetailsSuggestionRequest": {
    event_ids?: number[];
    workspace_id?: number;
  };
  "handlercalendar.PostDetailsSuggestionResponse": {
    suggestions?: definitions["handlercalendar.PostDetailsSuggestionResponseItem"][];
  };
  "handlercalendar.PostDetailsSuggestionResponseItem": {
    event_id?: number;
    suggestion?: definitions["models.Suggestion"];
  };
  "handlercalendar.Response": {
    fetched_events?: number;
  };
  "handlerfavorites.payload": {
    /** @example true */
    billable?: boolean;
    /** @example Very often used TE */
    description?: string;
    /** @example 222222 */
    project_id?: number;
    /**
     * @example [
     *   100
     * ]
     */
    tag_ids?: number[];
    /** @example 333333 */
    task_id?: number;
    /** @example 111111 */
    workspace_id?: number;
  };
  "handlergoals.APIResponse": {
    active?: boolean;
    billable?: boolean;
    comparison?: string;
    creator_user_id?: number;
    creator_user_name?: string;
    current_recurrence_end_date?: string;
    current_recurrence_start_date?: string;
    current_recurrence_tracked_seconds?: number;
    end_date?: string;
    goal_id?: number;
    icon?: string;
    last_completed_recurrence_end_date?: string;
    last_notified_at?: string;
    name?: string;
    permissions?: string[];
    project_ids?: number[];
    recurrence?: string;
    start_date?: string;
    status?: string;
    streak?: number;
    tag_ids?: number[];
    tags?: string[];
    target_seconds?: number;
    task_ids?: number[];
    team_goal?: boolean;
    user_id?: number;
    user_name?: string;
    workspace_id?: number;
  };
  "handlergoals.CreatePayload": {
    billable?: boolean;
    comparison?: string;
    end_date?: string;
    icon?: string;
    name?: string;
    project_ids?: number[];
    recurrence?: string;
    start_date?: string;
    tag_ids?: number[];
    target_seconds?: number;
    task_ids?: number[];
    user_id?: number;
  };
  "handlergoals.UpdatePayload": {
    active?: boolean;
    comparison?: string;
    end_date?: string;
    icon?: string;
    last_notified_at?: string;
    name?: string;
    target_seconds?: number;
  };
  "invitation.Info": {
    email?: string;
    invitation_id?: number;
    invite_url?: string;
    organization_id?: number;
    recipient_id?: number;
    sender_id?: number;
    workspaces?: definitions["invitation.WorkspaceInfo"][];
  };
  "invitation.IntegrationData": {
    external_id?: string;
    external_type?: string;
    provider?: string;
  };
  "invitation.Post": {
    emails?: string[];
    groups?: number[];
    project_invite?: definitions["invitation.ProjectInvite"];
    skip_email?: boolean;
    workspaces?: definitions["invitation.PostWorkspaces"][];
  };
  "invitation.PostWorkspaces": {
    admin?: boolean;
    integration_data?: definitions["invitation.IntegrationData"];
    role?: string;
    role_id?: number;
    workspace_id?: number;
  };
  "invitation.ProjectInvite": {
    manager?: boolean;
    project_id?: number;
    workspace_id?: number;
  };
  "invitation.Result": {
    data?: definitions["invitation.Info"][];
    invitations?: definitions["github_com_toggl_toggl_api_internal_models.Invitation"][];
    messages?: string[];
  };
  "invitation.WorkspaceInfo": {
    user_id?: number;
    workspace_id?: number;
    workspace_user_id?: number;
  };
  "me.Feature": {
    enabled?: boolean;
    feature_id?: number;
    name?: string;
  };
  "me.GetQuotaResult": {
    /**
     * @description ID of the organization for which the quota is reported. If null, represents the quota for requests
     * that do not belong to any organization, such as the /me endpoints.
     */
    organization_id?: number;
    /**
     * @description Number of API calls remaining for the current window. Once this value reaches zero, no further
     * requests will be accepted until the window resets. While the quota is not enforced, this value may
     * go negative, indicating how much the user has exceeded the limit.
     */
    remaining?: number;
    /**
     * @description Time until the window resets, in seconds. Once this value reaches zero, the window is reset and
     * more requests will be accepted again.
     */
    resets_in_secs?: number;
    /** @description Total number of API calls allowed for the current window. This value depends on the organization's plan. */
    total?: number;
  };
  "me.UserLocationResponse": {
    city?: string;
    city_lat_long?: string;
    country_code?: string;
    country_name?: string;
    state?: string;
  };
  "me.Workspace": {
    features?: definitions["me.Feature"][];
    workspace_id?: number;
  };
  "me.payload": {
    /** @description User's first day of the week. Sunday: 0, Monday:1, etc. */
    beginning_of_week?: number;
    /** @description User's country ID */
    country_id?: number;
    /** @description User's current password (used to change the current password) */
    current_password?: string;
    /** @description User's default workspace ID */
    default_workspace_id?: number;
    /**
     * Format: email
     * @description User's email address
     */
    email?: string;
    /** @description User's full name */
    fullname?: string;
    /** @description User's new password (current one must also be provided) */
    password?: string;
    /** @description User's timezone */
    timezone?: string;
  };
  "models.AlertError": {
    code?: string;
    message?: string;
  };
  "models.AlertWithMeta": {
    billable?: boolean;
    client_id?: number;
    client_name?: string;
    errors?: definitions["models.AlertError"][];
    estimatedHours?: number;
    id?: number;
    isFixedFee?: boolean;
    isPrivate?: boolean;
    object_type?: number;
    project_color?: string;
    project_id?: number;
    project_name?: string;
    receiver_groups?: number[];
    receiver_roles?: string[];
    receiver_users?: number[];
    receiver_users_name?: string[];
    receivers?: number;
    source_kind?: string;
    threshold?: number;
    threshold_type?: string;
    /**
     * @description using pq types is a workaround to enable reading postgres arrays into go types
     * we should wrap these pq types to avoid polluting our domain
     */
    thresholds?: number[];
    wid?: number;
  };
  "models.AllPreferences": {
    activity_timeline_display_activity?: boolean;
    activity_timeline_grouping_interval?: string;
    activity_timeline_grouping_method?: string;
    activity_timeline_recording_level?: string;
    activity_timeline_sync_events?: boolean;
    /** @description will be omitted if empty */
    alpha_features?: definitions["models.AlphaFeature"][];
    /** @description will be omitted if empty */
    analyticsAdvancedFilters?: boolean;
    auto_tracker_delay_enabled?: boolean;
    auto_tracker_delay_in_seconds?: number;
    automatic_tagging?: boolean;
    autotracking_enabled?: boolean;
    /** @description will be omitted if empty */
    beginningOfWeek?: number;
    calendar_snap_duration?: string;
    calendar_snap_initial_location?: string;
    calendar_visible_hours_end?: number;
    calendar_visible_hours_start?: number;
    calendar_zoom_level?: string;
    cell_swipe_actions_enabled?: boolean;
    charts_view_type?: string;
    /** @description will be omitted if empty */
    collapseDetailedReportEntries?: boolean;
    /** @description will be omitted if empty */
    collapseTimeEntries?: boolean;
    dashboards_view_type?: string;
    date_format?: string;
    /** @description will be omitted if empty */
    decimal_separator?: definitions["models.DecimalSeparator"];
    default_project_id?: number;
    default_project_task?: definitions["utils.DefaultProjectTask"];
    default_task_id?: number;
    /** @description will be omitted if empty */
    displayDensity?: string;
    /** @description will be omitted if empty */
    distinctRates?: string;
    duration_format?: string;
    duration_format_on_timer_duration_field?: boolean;
    edit_popup_integration_timer?: boolean;
    extension_send_error_reports?: boolean;
    extension_send_usage_statistics?: boolean;
    /** @description will be omitted if empty */
    firstSeenBusinessPromo?: number;
    focus_app_on_time_entry_started?: boolean;
    focus_app_on_time_entry_stopped?: boolean;
    haptic_feedback_enabled?: boolean;
    /** @description will be omitted if empty */
    hide_keyboard_shortcut?: boolean;
    hide_sidebar_right?: boolean;
    idle_detection_enabled?: boolean;
    idle_detection_interval_in_minutes?: number;
    inactivity_behavior?: string;
    ios_is_goals_view_shown?: boolean;
    is_goals_view_expanded?: boolean;
    is_goals_view_shown?: boolean;
    is_summary_total_view_visible?: boolean;
    keep_mini_timer_on_top?: boolean;
    keep_window_on_top?: boolean;
    keyboard_increment_timer_page?: number;
    /** @description will be omitted if empty */
    keyboard_shortcuts_enabled?: boolean;
    keyboard_shortcuts_share_time_entries?: boolean;
    mac_is_goals_view_shown?: boolean;
    macos_auto_tracking_rules?: definitions["utils.MacOSAutoTracking"][];
    macos_show_hide_toggl_keyboard_shortcut?: definitions["utils.KeyboardShortcut"];
    macos_stop_continue_keyboard_shortcut?: definitions["utils.KeyboardShortcut"];
    /** @description will be omitted if empty */
    manualEntryMode?: string;
    /** @description will be omitted if empty */
    manualMode?: boolean;
    /** @description will be omitted if empty */
    manualModeOverlaySeen?: boolean;
    modify_on_start_time_change?: string;
    /** @description will be omitted if empty */
    offlineMode?: string;
    pg_time_zone_name?: string;
    pomodoro_auto_start_break?: boolean;
    pomodoro_auto_start_focus?: boolean;
    pomodoro_break_interval_in_minutes?: number;
    pomodoro_break_project?: definitions["utils.EntityWorkspace"];
    pomodoro_break_project_id?: number;
    pomodoro_break_start_sound_enabled?: boolean;
    pomodoro_break_tag?: definitions["utils.EntityWorkspace"];
    pomodoro_break_tag_id?: number;
    pomodoro_countdown_timer?: boolean;
    pomodoro_enabled?: boolean;
    pomodoro_focus_interval_in_minutes?: number;
    pomodoro_focus_sound?: string;
    pomodoro_global_sound_enabled?: boolean;
    pomodoro_interval_end_sound?: boolean;
    pomodoro_interval_end_volume?: number;
    pomodoro_longer_break_duration_in_minutes?: number;
    pomodoro_prevent_screen_lock?: boolean;
    pomodoro_rounds_before_longer_break?: number;
    pomodoro_session_start_sound_enabled?: boolean;
    pomodoro_show_notifications?: boolean;
    pomodoro_stop_timer_at_interval_end?: boolean;
    pomodoro_track_breaks_as_time_entries?: boolean;
    /** @description will be omitted if empty */
    projectDashboardActivityMode?: string;
    project_shortcut_enabled?: boolean;
    record_timeline?: boolean;
    remember_last_project?: string;
    reminder_days?: string;
    reminder_enabled?: boolean;
    reminder_interval_in_minutes?: number;
    reminder_period?: string;
    reminder_snoozing_in_minutes?: number;
    /** @description will be omitted if empty */
    reportRounding?: boolean;
    /** @description will be omitted if empty */
    reportRoundingDirection?: string;
    /** @description will be omitted if empty */
    reportRoundingStepInMinutes?: number;
    /** @description will be omitted if empty */
    reportsHideWeekends?: boolean;
    run_app_on_startup?: boolean;
    running_entry_warning?: string;
    running_timer_notification_enabled?: boolean;
    /** @description will be omitted if empty */
    seenFollowModal?: boolean;
    /** @description will be omitted if empty */
    seenFooterPopup?: boolean;
    /** @description will be omitted if empty */
    seenProjectDashboardOverlay?: boolean;
    /** @description will be omitted if empty */
    seenTogglButtonModal?: boolean;
    send_added_to_project_notification?: boolean;
    send_daily_project_invites?: boolean;
    send_product_emails?: boolean;
    send_product_release_notification?: boolean;
    send_system_message_notification?: boolean;
    send_timer_notifications?: boolean;
    send_weekly_report?: boolean;
    sharing_shortcut_enabled?: boolean;
    /** @description will be omitted if empty */
    showTimeInTitle?: boolean;
    show_all_entries?: boolean;
    show_changelog?: boolean;
    show_description_in_menu_bar?: boolean;
    show_dock_icon?: boolean;
    show_events_in_calendar?: boolean;
    show_project_in_menu_bar?: boolean;
    show_qr_scanner?: boolean;
    show_seconds_in_menu_bar?: boolean;
    /** @description will be omitted if empty */
    show_timeline_in_day_view?: boolean;
    show_timer_in_menu_bar?: boolean;
    show_today_total_in_menu_bar?: boolean;
    /** @description will be omitted if empty */
    show_total_billable_hours?: boolean;
    /** @description will be omitted if empty */
    show_weekend_on_timer_page?: boolean;
    show_workouts_in_calendar?: boolean;
    sleep_behaviour?: string;
    smart_alerts_option?: string;
    /** @description will be omitted if empty */
    snowballReportRounding?: string;
    stack_times_on_manual_mode_after?: string;
    start_automatically?: boolean;
    start_shortcut_mode?: string;
    stop_at_specific_time?: boolean;
    stop_automatically?: boolean;
    stop_entry_on_shutdown?: boolean;
    stop_specified_time?: string;
    stopped_timer_notification_enabled?: boolean;
    suggestions_enabled?: boolean;
    /** @description will be omitted if empty */
    summaryReportAmounts?: string;
    /** @description will be omitted if empty */
    summaryReportDistinctRates?: boolean;
    /** @description will be omitted if empty */
    summaryReportGrouping?: string;
    /** @description will be omitted if empty */
    summaryReportSortAsc?: boolean;
    /** @description will be omitted if empty */
    summaryReportSortField?: string;
    /** @description will be omitted if empty */
    summaryReportSubGrouping?: string;
    summary_total_mode?: string;
    tags_shortcut_enabled?: boolean;
    /** @description will be omitted if empty */
    theme?: string;
    time_entry_display_mode?: string;
    time_entry_ghost_suggestions_enabled?: boolean;
    time_entry_invitations_notification_enabled?: boolean;
    time_entry_start_stop_input_mode?: string;
    timeofday_format?: string;
    /** @description will be omitted if empty */
    timerView?: string;
    /** @description will be omitted if empty */
    timerViewMobile?: string;
    /** @description ToSAcceptNeeded represents the trigger for new ToS accept dialog */
    toSAcceptNeeded?: boolean;
    use_mini_timer?: boolean;
    /** @description will be omitted if empty */
    visibleFooter?: string;
    /** @description will be omitted if empty */
    webTimeEntryStarted?: boolean;
    /** @description will be omitted if empty */
    webTimeEntryStopped?: boolean;
    /** @description will be omitted if empty */
    weeklyReportGrouping?: string;
    /** @description will be omitted if empty */
    weeklyReportValueToShow?: string;
    windows_auto_tracking_rules?: definitions["utils.WindowsAutoTracking"][];
    windows_show_hide_toggl_keyboard_shortcut?: definitions["utils.KeyboardShortcut"];
    windows_stop_continue_keyboard_shortcut?: definitions["utils.KeyboardShortcut"];
    windows_stop_start_keyboard_shortcut?: definitions["utils.KeyboardShortcut"];
    windows_theme?: string;
    workout_default_project?: definitions["utils.EntityWorkspace"];
    workout_default_project_id?: number;
    workout_default_tag?: definitions["utils.EntityWorkspace"];
    workout_default_tag_id?: number;
  };
  "models.AlphaFeature": {
    /** @description Feature ID */
    alpha_feature_id?: number;
    /** @description Feature code */
    code?: string;
    /** @description Time of deletion, omitted if empty */
    deleted_at?: string;
    /** @description Feature description, omitted if empty */
    description?: string;
    /** @description Whether the feature is enabled */
    enabled?: boolean;
    /** @description Product ID for which this Feature belong */
    product_id?: number;
  };
  "models.Avatar": {
    avatar_urls?: definitions["models.ImageURLs"];
    fileType?: string;
    name?: string;
  };
  "models.Campaign": {
    discount?: number;
    end?: string;
    key?: string;
    name?: string;
    start?: string;
  };
  "models.CardDetails": {
    added_at?: string;
    card_number?: string;
    card_type?: string;
    creator_id?: number;
    creator_name?: string;
    expiry_date?: string;
    holder_name?: string;
  };
  "models.Client": {
    /** @description IsArchived is true if the client is archived */
    archived?: boolean;
    /** @description When was the last update */
    at?: string;
    /** @description CreatorID is the ID of the user who created the client */
    creator_id?: number;
    /** @description ExternalReference can be used to store an external reference to the Track Client entity. */
    external_reference?: string;
    /** @description Client ID */
    id?: number;
    /** @description The external ID of the linked entity in the external system (e.g. JIRA/SalesForce) */
    integration_ext_id?: string;
    /** @description The external type of the linked entity in the external system (e.g. JIRA/SalesForce) */
    integration_ext_type?: string;
    /** @description The provider (e.g. JIRA/SalesForce) that has an entity linked to this Toggl Track entity */
    integration_provider?: definitions["models.IntegrationProvider"];
    /** @description Name of the client */
    name?: string;
    notes?: string;
    /** @description List of authorization permissions for this client. */
    permissions?: string[];
    /** @description Total field to store the total count */
    total_count?: number;
    /** @description Workspace ID */
    wid?: number;
  };
  "models.ContactDetail": {
    company_address?: string;
    company_city?: string;
    company_name?: string;
    contact_detail_id?: number;
    contact_email?: string;
    contact_person?: string;
    country_id?: number;
    country_subdivision_id?: number;
    created_at?: string;
    customer_id?: number;
    is_eu_resident?: boolean;
    updated_at?: string;
    user_id?: number;
    vat_number?: string;
    /** @description DEPRECATED */
    vat_number_valid?: boolean;
    /** @description DEPRECATED */
    vat_number_validated_at?: string;
    zip_code?: string;
  };
  "models.Country": {
    country_code?: string;
    default_currency_id?: number;
    id?: number;
    name?: string;
    requires_postal_code?: boolean;
    vat_applicable?: boolean;
    vat_percentage?: number;
    vat_regex?: string;
  };
  "models.CsvUpload": {
    at?: string;
    log_id?: number;
  };
  "models.Currency": {
    /** @example 0 */
    currency_id?: number;
    /** @example EUR */
    iso_code?: string;
    /** @example € */
    symbol?: string;
  };
  /** @enum {integer} */
  "models.DataRetentionDays": 0 | 0;
  /** @enum {string} */
  "models.DecimalSeparator": "," | ".";
  "models.DiscountRequestResponses": {
    negative_answers: string[];
    negative_feedback?: string;
    positive_answers: string[];
    positive_feedback?: string;
  };
  "models.DownloadRequestRecord": {
    error_message?: string;
    state?: string;
    token?: string;
  };
  "models.Favorite": {
    billable?: boolean;
    /** @description Related entities meta fields - if requested */
    client_name?: string;
    created_at?: string;
    deleted_at?: string;
    description?: string;
    favorite_id?: number;
    permissions?: string[];
    project_active?: boolean;
    project_billable?: boolean;
    project_color?: string;
    project_id?: number;
    project_name?: string;
    public?: boolean;
    rank?: number;
    tag_ids?: number[];
    tags?: string[];
    task_id?: number;
    task_name?: string;
    user_id?: number;
    was_public_at?: string;
    workspace_id?: number;
  };
  "models.Goal": {
    active?: boolean;
    billable?: boolean;
    comparison?: string;
    creatorUserID?: number;
    creatorUserName?: string;
    currentRecurrenceEndDate?: string;
    currentRecurrenceStartDate?: string;
    currentRecurrenceTrackedSeconds?: number;
    deletedAt?: string;
    endDate?: string;
    icon?: string;
    id?: number;
    lastCompletedRecurrenceEndDate?: string;
    lastNotifiedAt?: string;
    name?: string;
    permissions?: string[];
    previousStreak?: number;
    projectIDs?: number[];
    recurrence?: string;
    startDate?: string;
    status?: string;
    streak?: number;
    streakConsolidatedAt?: string;
    tagIDs?: number[];
    tags?: string[];
    targetSeconds?: number;
    taskIDs?: number[];
    teamGoal?: boolean;
    userID?: number;
    userName?: string;
    workspaceID?: number;
  };
  "models.GroupDict": {
    group_id?: number;
    name?: string;
  };
  "models.ImageURLs": { [key: string]: string };
  /** @enum {string} */
  "models.IntegrationProvider": "asana" | "jira" | "salesforce";
  "models.Logo": {
    logo?: string;
  };
  "models.MeOrganization": {
    /** @description Whether the requester is an admin of the organization */
    admin?: boolean;
    /**
     * Format: date-time
     * @description Organization's last modification date
     */
    at?: string;
    /**
     * Format: date-time
     * @description Organization's creation date
     */
    created_at?: string;
    /** @description Organization ID */
    id?: number;
    /** @description Is true when the organization option is_multi_workspace_enabled is set */
    is_multi_workspace_enabled?: boolean;
    is_unified?: boolean;
    /** @description How far back free workspaces in this org can access data. */
    max_data_retention_days?: definitions["models.DataRetentionDays"];
    /** @description Maximum number of workspaces allowed for the organization */
    max_workspaces?: number;
    /** @description Organization Name */
    name?: string;
    /** @description Whether the requester is a the owner of the organization */
    owner?: boolean;
    permissions?: string[];
    /** @description The subscription plan is an enterprise plan */
    pricing_plan_enterprise?: boolean;
    /** @description Organization plan ID */
    pricing_plan_id?: number;
    /** @description The subscription plan name the org is currently on. Free or any plan name coming from payment provider */
    pricing_plan_name?: string;
    /** @description Whether the organization is currently suspended */
    suspended_at?: string;
    trial_info?: definitions["models.TrialInfo"];
    /** @description Number of organization users */
    user_count?: number;
  };
  "models.MostActiveUser": {
    avatar_file_name?: string;
    duration?: number;
    email?: string;
    fullname?: string;
    user_id?: number;
  };
  "models.Options": { [key: string]: string };
  "models.OrgUser": {
    "2fa_enabled"?: boolean;
    /** @description Deprecated, to be removed. Use RoleID, or IsAdmin method if you must access this field. */
    admin?: boolean;
    avatar_url?: string;
    can_edit_email?: boolean;
    created_at?: string;
    email?: string;
    groups?: definitions["models.GroupDict"][];
    id?: number;
    inactive?: boolean;
    invitation_id?: number;
    joined?: boolean;
    name?: string;
    organization_id?: number;
    /** @description Deprecated, to be removed. Use RoleID, or IsOwner method if you must access this field. */
    owner?: boolean;
    role_id?: number;
    updated_at?: string;
    user_id?: number;
    workspace_count?: number;
    workspaces?: definitions["models.OrgUserWorkspace"][];
  };
  "models.OrgUserWorkspace": {
    active?: boolean;
    /** @description Deprecated, to be removed.  Use RoleID, or IsAdmin method if you must access this field. */
    admin?: boolean;
    cost?: number;
    default_currency?: string;
    groups?: definitions["models.GroupDict"][];
    inactive?: boolean;
    rate?: number;
    /** @description Deprecated, to be removed */
    role?: string;
    role_id?: number;
    view_edit_billable_rates?: boolean;
    view_edit_labor_costs?: boolean;
    working_hours?: number;
    workspace_id?: number;
    workspace_name?: string;
    workspace_user_id?: number;
  };
  "models.OrganizationSegmentation": {
    demo_requested?: boolean;
    full_name?: string;
    heard?: string[];
    industries?: string[];
    members_range?: string;
    organization_id?: number;
    reasons?: string[];
    skipped_step?: string;
    user_id?: number;
    user_segments?: string[];
  };
  "models.PaymentDetail": {
    created_at?: string;
    currency?: string;
    customer_id?: number;
    payment_type?: string;
    reference?: string;
    user_id?: number;
  };
  "models.PaymentFailedResponse": {
    code?: string;
    decline_code?: string;
    doc_url?: string;
    invoice_total_amount?: number;
    message?: string;
    next_payment_attempt?: string;
    organization_id?: number;
  };
  "models.PaymentInfo": {
    created_at?: string;
    description?: string;
    id?: number;
    status?: string;
  };
  "models.Period": {
    created_at?: string;
    finished_on?: string;
    started_on?: string;
    subscription_id?: number;
    subscription_period_id?: number;
    trial?: boolean;
    user_count?: number;
  };
  "models.PlanWithFeatures": {
    active_at?: string;
    features?: definitions["github_com_toggl_toggl_api_internal_models.PlanFeature"][];
    inactive_at?: string;
    max_user_count?: number;
    name?: string;
    plan_at?: string;
    plan_id?: number;
    prices?: definitions["models.PricingPlan"][];
    product_handle?: string;
    toggl_product_name?: string;
  };
  "models.PostPayload": {
    /** @description Name of the organization */
    name?: string;
    /** @description Name of the workspace */
    workspace_name?: string;
  };
  "models.PricingPlan": {
    amount_in_cents?: number;
    currency?: string;
    period?: number;
    plan?: definitions["github_com_toggl_toggl_api_internal_models.Plan"];
    plan_id?: number;
    price_point_handle?: string;
    pricing_plan_id?: number;
  };
  "models.ProjectGroup": {
    group_id?: number;
    id?: number;
    pid?: number;
    wid?: number;
  };
  "models.ProjectStatistics": {
    earliest_time_entry?: string;
    latest_time_entry?: string;
  };
  /** @enum {string} */
  "models.ProjectStatus":
    | "upcoming"
    | "active"
    | "ended"
    | "archived"
    | "deleted";
  "models.ProjectUser": {
    /** @description When was last modified */
    at?: string;
    /** @description Group ID, legacy field */
    gid?: number;
    /** @description Group ID */
    group_id?: number;
    /** @description Project User ID */
    id?: number;
    /** @description Custom labor cost for project user */
    labor_cost?: number;
    /** @description Date for labor cost last updated */
    labor_cost_last_updated?: string;
    /** @description Whether the user is manager of the project */
    manager?: boolean;
    /** @description Project ID */
    project_id?: number;
    /** @description Custom rate for project user */
    rate?: number;
    /** @description Date for rate last updated */
    rate_last_updated?: string;
    /** @description User ID */
    user_id?: number;
    /** @description Workspace ID */
    workspace_id?: number;
  };
  "models.ProjectUserWithMeta": {
    /** @description When was last modified */
    at?: string;
    avatar_url?: string;
    /** @description Group ID, legacy field */
    gid?: number;
    /** @description Group ID */
    group_id?: number;
    /** @description Project User ID */
    id?: number;
    is_active?: boolean;
    /** @description Custom labor cost for project user */
    labor_cost?: number;
    /** @description Date for labor cost last updated */
    labor_cost_last_updated?: string;
    /** @description Whether the user is manager of the project */
    manager?: boolean;
    /** @description Project ID */
    project_id?: number;
    /** @description Custom rate for project user */
    rate?: number;
    /** @description Date for rate last updated */
    rate_last_updated?: string;
    /** @description User ID */
    user_id?: number;
    user_name?: string;
    /** @description Workspace ID */
    workspace_id?: number;
    workspace_user_id?: number;
    workspace_user_labor_cost?: number;
    workspace_user_rate?: number;
  };
  "models.PutPayload": {
    /** @description Name of the organization */
    name?: string;
  };
  "models.Rate": {
    /** @description Amount of the rate */
    amount?: number;
    /** @description Creation date of the rate */
    created_at?: string;
    creator_id?: number;
    /** @description Deletion date of the rate, in case that is null it means the rates is active */
    deleted_at?: string;
    /** @description End date time of the rate */
    end?: string;
    /** @description Identifier of the rate */
    id?: number;
    /** @description Planned task ID which the rate is applied */
    planned_task_id?: number;
    /** @description Project ID which the rate is applied */
    project_id?: number;
    /** @description Project user ID which the rate is applied */
    project_user_id?: number;
    rate_change_mode?: definitions["models.RateChangeMode"];
    /** @description Start date time of the rate */
    start?: string;
    type?: definitions["models.RateType"];
    /** @description Last update date of the rate */
    updated_at?: string;
    /** @description Workspace ID which the rate is applied */
    workspace_id?: number;
    /** @description Workspace user ID which the rate is applied */
    workspace_user_id?: number;
  };
  /** @enum {string} */
  "models.RateChangeMode":
    | "override-all"
    | "override-current"
    | "start-today"
    | ""
    | "override-current";
  /** @enum {string} */
  "models.RateType": "billable_rates" | "labor_costs";
  "models.RecurringPeriod": {
    end_date?: string;
    start_date?: string;
  };
  "models.RecurringProjectParameters": {
    /** @description Custom period, used when "period" field is "custom" */
    custom_period?: number;
    /** @description Estimated seconds */
    estimated_seconds?: number;
    /** @description Recurring end date */
    parameter_end_date?: string;
    /** @description Recurring start date */
    parameter_start_date?: string;
    /** @description Period */
    period?: string;
    /** @description Project start date */
    project_start_date?: string;
  };
  "models.SSOInvitation": {
    /**
     * @description AccountsSignupURL is a legacy field, should be removed one more after
     * this issue gets done https://github.com/toggl/accounts-fe/issues/704
     */
    accounts_signup_url?: string;
    code?: string;
    email?: string;
    organization_id?: number;
    organization_name?: string;
    sender_email?: string;
    sender_name?: string;
    sso?: boolean;
    token?: string;
  };
  "models.SavedReport": {
    deleted_at?: string;
    fixed_daterange?: boolean;
    id?: number;
    isNAResource?: boolean;
    is_commenting_enabled?: boolean;
    name?: string;
    params?: string;
    public?: boolean;
    scheduled_email_gids?: number[];
    scheduled_email_uids?: number[];
    token?: string;
    uid?: number;
    updated_at?: string;
    updated_by?: number;
  };
  "models.ScheduledReport": {
    bookmark_id?: number;
    created_at?: string;
    creator_id?: number;
    deleted_at?: string;
    frequency?: number;
    group_ids?: number[];
    report_id?: number;
    user_ids?: number[];
    workspace_id?: number;
  };
  "models.SimpleWorkspaceUser": {
    /** @description Email of the user */
    email?: string;
    /** @description Name of the user */
    fullname?: string;
    /** @description Global user identifier */
    id?: number;
    /** @description Inactive indicates if user is deactivated or not in the workspace */
    inactive?: boolean;
    /** @description IsActive indicates if user has joined the workspace */
    is_active?: boolean;
    /**
     * @description Flag indicating if user is admin
     * Deprecated
     */
    is_admin?: boolean;
    /** @description Role of the user */
    role?: string;
  };
  "models.Statistics": {
    admins?: definitions["models.UserData"][];
    groups_count?: number;
    members_count?: number;
  };
  "models.Subdivision": {
    company_id?: number;
    country_id?: number;
    country_subdivision_id?: number;
    iso_code?: string;
    name?: string;
  };
  "models.Subscription": {
    auto_renew?: boolean;
    card_details?: definitions["models.CardDetails"];
    company_id?: number;
    contact_detail?: definitions["models.ContactDetail"];
    /** Format: date-time */
    created_at?: string;
    currency?: string;
    customer_id?: number;
    /** Format: date-time */
    deleted_at?: string;
    last_pricing_plan_id?: number;
    organization_id?: number;
    payment_details?: definitions["models.PaymentDetail"];
    pricing_plan_id?: number;
    /** Format: date-time */
    renewal_at?: string;
    subscription_id?: number;
    subscription_period?: definitions["models.Period"];
    workspace_id?: number;
  };
  "models.Suggestion": {
    accuracy?: number;
    billable?: boolean;
    description_match?: boolean;
    last_seen?: string;
    project_active?: boolean;
    project_color?: string;
    project_id?: number;
    project_name?: string;
    tag_ids?: number[];
    tags?: string[];
    task_id?: number;
    task_name?: string;
    workspace_id?: number;
  };
  "models.Tag": {
    /** @description When was created/last modified */
    at?: string;
    /** @description CreatorID the user who created the tag */
    creator_id?: number;
    /**
     * Format: date-time
     * @description When was deleted
     */
    deleted_at?: string;
    /** @description Tag ID */
    id?: number;
    /** @description The external ID of the linked entity in the external system (e.g. JIRA/SalesForce) */
    integration_ext_id?: string;
    /** @description The external type of the linked entity in the external system (e.g. JIRA/SalesForce) */
    integration_ext_type?: string;
    /** @description The provider (e.g. JIRA/SalesForce) that has an entity linked to this Toggl Track entity */
    integration_provider?: definitions["models.IntegrationProvider"];
    /** @description Tag name */
    name?: string;
    permissions?: string[];
    /** @description Workspace ID */
    workspace_id?: number;
  };
  "models.Task": {
    /** @description False when the task has been done */
    active?: boolean;
    /** @description When the task was created/last modified */
    at?: string;
    avatar_url?: string;
    client_id?: number;
    client_name?: string;
    /** @description Estimation time for this task in seconds */
    estimated_seconds?: number;
    /** @description ExternalReference can be used to store an external reference to the Track Task Entity. */
    external_reference?: string;
    /** @description Task ID */
    id?: number;
    /** @description The external ID of the linked entity in the external system (e.g. JIRA/SalesForce) */
    integration_ext_id?: string;
    /** @description The external type of the linked entity in the external system (e.g. JIRA/SalesForce) */
    integration_ext_type?: string;
    /** @description The provider (e.g. JIRA/SalesForce) that has an entity linked to this Toggl Track entity */
    integration_provider?: definitions["models.IntegrationProvider"];
    /** @description Task Name */
    name?: string;
    permissions?: string[];
    project_billable?: boolean;
    /** @description Metadata */
    project_color?: string;
    /** @description Project ID */
    project_id?: number;
    project_is_private?: boolean;
    project_name?: string;
    /** @description Rate for this task */
    rate?: number;
    /** @description Last date for rate change */
    rate_last_updated?: string;
    /** @description Whether this is a recurring task */
    recurring?: boolean;
    /** @description Task assignee, if set above this will be the toggl_account_id for that user */
    toggl_accounts_id?: string;
    /** @description The value tracked_seconds is in milliseconds, not in seconds. */
    tracked_seconds?: number;
    /** @description Task assignee, if available */
    user_id?: number;
    user_name?: string;
    /** @description Workspace ID */
    workspace_id?: number;
  };
  "models.TimeEntryChecklist": {
    time_entries_count_check?: boolean;
    time_entries_created_check?: boolean;
  };
  "models.TimeEntryConstraints": {
    description_present?: boolean;
    project_present?: boolean;
    tag_present?: boolean;
    task_present?: boolean;
    time_entry_constraints_enabled?: boolean;
  };
  "models.TimeEntrySharedWith": {
    accepted?: boolean;
    user_id?: number;
    user_name?: string;
  };
  "models.TimelineEvent": {
    desktop_id?: string;
    end_time?: number;
    filename?: string;
    id?: number;
    idle?: boolean;
    start_time?: number;
    title?: string;
  };
  "models.TimelineSettings": {
    record_timeline?: boolean;
  };
  "models.Timesheet": {
    approved_or_rejected_at?: string;
    approved_or_rejected_id?: number;
    created_at?: string;
    deleted_at?: string;
    force_approved?: boolean;
    rejection_comment?: string;
    reminder_sent_at?: string;
    review_layer?: number;
    start_date?: string;
    status?: string;
    submission_email_sent_at?: string;
    submitted_at?: string;
    timesheet_id?: number;
    timesheet_setup_id?: number;
    timezone?: string;
    updated_at?: string;
    working_hours_in_minutes?: number;
    workspace_id?: number;
  };
  "models.TimesheetSetupError": {
    code?: string;
    message?: string;
  };
  "models.Timezone": {
    name?: string;
    utc?: string;
  };
  "models.TrackReminder": {
    /** @description Reminder creation time */
    created_at?: string;
    /** @description Frequency of the reminder in days, should be either 1 or 7 */
    frequency?: number;
    /** @description Groups IDs to send the reminder to */
    group_ids?: number[];
    /** @description Reminder ID */
    reminder_id?: number;
    /** @description Threshold is the number of hours after which the reminder will be sent */
    threshold?: number;
    /** @description User IDs to send the reminder to */
    user_ids?: number[];
    /** @description Workspace ID */
    workspace_id?: number;
  };
  "models.Transfer": {
    created_at?: string;
    current_owner_accepted?: boolean;
    current_owner_answered_at?: string;
    current_owner_id?: number;
    finished_at?: string;
    new_owner_accepted?: boolean;
    new_owner_answered_at?: string;
    new_owner_id?: number;
    organization_id?: number;
    outcome_name?: string;
    owner_transfer_id?: number;
    requester_id?: number;
  };
  "models.TrialInfo": {
    /** @description CanHaveInitialTrial is true if neither the organization nor the owner has never had a trial before */
    can_have_trial?: boolean;
    /** @description What was the previous plan before the trial */
    last_pricing_plan_id?: number;
    /** @description When the trial payment is due */
    next_payment_date?: string;
    /** @description Whether the organization's subscription is currently on trial */
    trial?: boolean;
    /**
     * @description When a trial is available for this organization
     * Deprecated: TrialAvailable - use CanHaveInitialTrial instead.
     * Retained for front-end compatibility.
     */
    trial_available?: boolean;
    /** @description When the trial ends */
    trial_end_date?: string;
    trial_plan_id?: number;
  };
  "models.UnifiedSubscriptionInvoice": {
    /** Format: date-time */
    creation_date?: string;
    currency?: string;
    description?: string;
    hosted_url?: string;
    id?: string;
    invoice_number?: string;
    pdf_url?: string;
    status?: string;
    total_amount?: number;
  };
  "models.UnifiedSubscriptionInvoiceList": {
    items?: definitions["models.UnifiedSubscriptionInvoice"][];
    next?: string;
  };
  "models.UserData": {
    name?: string;
    user_id?: number;
  };
  "models.UserInvoice": {
    billing_address?: string;
    created_at?: string;
    currency?: string;
    date?: string;
    deleted_at?: string;
    document_id?: string;
    due_date?: string;
    /** @description The external ID of the linked entity in the external system (e.g. JIRA/SalesForce) */
    integration_ext_id?: string;
    /** @description The external type of the linked entity in the external system (e.g. JIRA/SalesForce) */
    integration_ext_type?: string;
    /** @description The provider (e.g. JIRA/SalesForce) that has an entity linked to this Toggl Track entity */
    integration_provider?: definitions["models.IntegrationProvider"];
    items?: definitions["models.UserInvoiceItem"][];
    message?: string;
    payment_terms?: string;
    purchase_number?: string;
    taxes?: definitions["models.UserInvoiceTax"][];
    updated_at?: string;
    user_id?: number;
    user_invoice_id?: number;
    workspace_address?: string;
    workspace_id?: number;
    workspace_logo?: string;
  };
  "models.UserInvoiceItem": {
    amount?: number;
    description?: string;
    item_id?: number;
    quantity?: number;
  };
  "models.UserInvoiceTax": {
    amount?: number;
    name?: string;
    tax_id?: number;
  };
  "models.WorkspacePreferences": {
    /** @description Completely hides the approvals feature in this workspace */
    disable_approvals?: boolean;
    /** @description Completely hides the expenses feature in this workspace */
    disable_expenses?: boolean;
    /** @description Whether timesheet view is disabled for this workspace */
    disable_timesheet_view?: boolean;
    /** @description This workspace works with duration only time entries */
    hide_start_end_times?: boolean;
    /** @description Time of acceptance of the terms of service */
    inc_tos_accepted_at?: string;
    /** @description User ID who accepted the terms of service */
    inc_tos_accepted_by?: number;
    /** @description Pricing plan ID */
    initial_pricing_plan?: number;
    /** @description Date on which "Lock Time Entries" feature was enabled */
    report_locked_at?: string;
    /** @description Whether SSO is enabled for this workspace */
    single_sign_on?: boolean;
    /** @description Date on which SSO was requested */
    sso_requested_at?: string;
  };
  "organization.PostOrganizationReply": {
    id?: number;
    name?: string;
    permissions?: string[];
    workspace_id?: number;
    workspace_name?: string;
  };
  "project.PatchInput": {
    /** @description Patch operation to perform, one of "add", "remove", "replace" */
    op?: string;
    /** @description Path to the field to patch, example: "/color" */
    path?: string;
    /** @description Value to set when operation is "add" or "replace", example: "#000000". The value type actually depends on the field being patched. */
    value?: unknown;
  };
  "project.Payload": {
    /** @description Whether the project is active or archived */
    active?: boolean;
    /** @description Whether estimates are based on task hours, optional, premium feature */
    auto_estimates?: boolean;
    /** @description Whether the project is set as billable, optional, premium feature */
    billable?: boolean;
    /** @description Client ID, legacy */
    cid?: number;
    /** @description Client ID, optional */
    client_id?: number;
    /** @description Client name, optional */
    client_name?: string;
    /** @description Project color */
    color?: string;
    /** @description Project currency, optional, premium feature */
    currency?: string;
    /** @description End date of a project timeframe */
    end_date?: string;
    /** @description Estimated hours, optional, premium feature */
    estimated_hours?: number;
    external_reference?: string;
    /** @description Project fixed fee, optional, premium feature */
    fixed_fee?: number;
    /** @description Whether the project is private or not */
    is_private?: boolean;
    /** @description Shared */
    is_shared?: boolean;
    /** @description Project name */
    name?: string;
    /** @description Hourly rate, optional, premium feature */
    rate?: number;
    /** @description Rate change mode, optional, premium feature. Can be "start-today", "override-current", "override-all" */
    rate_change_mode?: string;
    /** @description Project is recurring, optional, premium feature */
    recurring?: boolean;
    /** @description Project recurring parameters, optional, premium feature */
    recurring_parameters?: definitions["project.RecurringParameters"];
    /** @description Start date of a project timeframe */
    start_date?: string;
    /** @description Project is template, optional, premium feature */
    template?: boolean;
    /** @description Template ID, optional */
    template_id?: number;
  };
  "project.RecurringParameters": {
    /** @description Recurring custom period, the "period" field must be "custom" */
    custom_period?: number;
    /** @description Recurring period, example "monthly" */
    period?: string;
    /** @description Recurring start date */
    project_start_date?: string;
  };
  "project.RestoreParams": {
    projects?: number[];
    restore_all_projects?: boolean;
  };
  "projects.PatchFailure": {
    id?: number;
    message?: string;
  };
  "projects.PatchOutput": {
    failure?: definitions["projects.PatchFailure"][];
    success?: number[];
  };
  "projects.Payload": {
    project_ids?: number[];
  };
  "projects.pinnedProjectPayload": {
    pin?: boolean;
  };
  "projects.taskCountPayload": {
    project_ids?: number[];
  };
  "projects.userCountPayload": {
    project_ids?: number[];
  };
  "push.deletePushServicesUnsubscribe": {
    fcm_registration_token?: string;
  };
  "push.postPushServicesSubscribe": {
    fcm_registration_token?: string;
  };
  "rates.creationRequest": {
    /** @description Amount of the rate, required, must be greater than 0 */
    amount?: number;
    /**
     * @description Level of the rate, required, must be one of: 'workspace', 'workspace_user', 'project', 'project_user', 'task'
     * @enum {string}
     */
    level: "workspace" | "workspace_user" | "project" | "project_user" | "task";
    /** @description Identifier of the level, required */
    level_id: number;
    /**
     * @description Mode of the rate, required if Start is not informed, must be one of: 'override-all', 'override-current', 'start-today'
     * @enum {string}
     */
    mode?: "override-all" | "override-current" | "start-today";
    /** @description Start date time of the rate, required if Mode is not informed, must be a valid date time */
    start?: string;
    /** @description Type of the rate, required, must be one of 'billable_rates', 'labor_rates' */
    type?: string;
  };
  "related.UserWithRelated": {
    "2fa_enabled"?: boolean;
    /** @description will be omitted if empty */
    api_token?: string;
    /** Format: date-time */
    at?: string;
    /** @description AuthorizationUpdatedAt timestamp when the authorization user session object was last updated. */
    authorization_updated_at?: string;
    beginning_of_week?: number;
    /** @description Clients, null if with_related_data was not set to true or if the user does not have any clients */
    clients?: definitions["models.Client"][];
    country_id?: number;
    /** Format: date-time */
    created_at?: string;
    default_workspace_id?: number;
    /** Format: email */
    email?: string;
    fullname?: string;
    has_password?: boolean;
    id?: number;
    /** @example http://example.com */
    image_url?: string;
    /** @description will be omitted if empty */
    intercom_hash?: string;
    oauth_providers?: string[];
    /** Format: email */
    openid_email?: string;
    openid_enabled?: boolean;
    /** @description will be omitted if empty */
    options?: definitions["models.Options"];
    /** @description Projects, null if with_related_data was not set to true or if the user does not have any projects */
    projects?: definitions["github_com_toggl_toggl_api_internal_models.Project"][];
    /** @description Tags, null if with_related_data was not set to true, or if the user does not have any tags */
    tags?: definitions["models.Tag"][];
    /** @description Tasks, null if with_related_data was not set to true or if the user does not have any tasks */
    tasks?: definitions["models.Task"][];
    /** @description TimeEntries, null if with_related_data was not set to true or if the user does not have any time entries */
    time_entries?: definitions["github_com_toggl_toggl_api_internal_models.TimeEntry"][];
    timezone?: string;
    /** Format: date-time */
    updated_at?: string;
    /** @description Workspaces, null if with_related_data was not set to true or if the user does not have any workspaces */
    workspaces?: definitions["github_com_toggl_toggl_api_internal_models.Workspace"][];
  };
  "reminders.Payload": {
    /** @description Frequency of the reminder in days, should be either 1 or 7 */
    frequency?: number;
    /** @description Group IDs to send the reminder to, can be omitted if user_ids is provided */
    group_ids?: number[];
    /** @description Threshold is the number of hours after which the reminder will be sent */
    threshold?: number;
    /** @description User IDs to send the reminder to, can be omitted if group_ids is provided */
    user_ids?: number[];
  };
  "reminders.payload": {
    /** @description Frequency of the reminder in days, should be either 1 or 7 */
    frequency?: number;
    /** @description Group IDs to send the reminder to, can be omitted if user_ids is provided */
    group_ids?: number[];
    /** @description Threshold is the number of hours after which the reminder will be sent */
    threshold?: number;
    /** @description User IDs to send the reminder to, can be omitted if group_ids is provided */
    user_ids?: number[];
  };
  "saml2.LoginResponse": {
    sso_url?: string;
  };
  "saved.Payload": {
    fixed_daterange?: boolean;
    id?: number;
    name?: string;
    params?: { [key: string]: unknown };
    public?: boolean;
    regenerate_token?: boolean;
  };
  "scheduled.payload": {
    bookmark_id?: number;
    frequency?: number;
    group_ids?: number[];
    user_ids?: number[];
  };
  "shared.bulkDeleteInputData": {
    ids?: number[];
  };
  "smail.ContactPayload": {
    Email?: string;
    Message?: string;
    Name?: string;
  };
  "smail.DemoPayload": {
    Email?: string;
    FirstName?: string;
    LastName?: string;
    Phone?: string;
    Purpose?: string;
    Source?: string;
    TeamSize?: string;
  };
  "smail.MeetPayload": {
    email?: string;
    location?: string;
  };
  "sso.Confirmation": {
    confirmation_code?: string;
  };
  "subscription.OutData": {
    active_users?: number;
    auto_renew?: boolean;
    billing_period_in_months?: number;
    campaign_available?: boolean;
    cancel_date?: string;
    card_details?: definitions["models.CardDetails"];
    company_id?: number;
    contact_details?: definitions["models.ContactDetail"];
    currency?: string;
    current_period_ends_at?: string;
    current_period_starts_at?: string;
    customer_id?: number;
    /** @description Deprecated: this field will be replaced by CurrentPeriodEndsAt */
    end_date?: string;
    enterprise?: boolean;
    /**
     * @description temporary flag which is true iff there is at least one admin in the organization,
     * who has the `multi_workspace_payments` beta flag enabled
     */
    is_subscription_beta?: boolean;
    is_unified?: boolean;
    /**
     * @description KeepTrialOnSubscription instructs a consumer that when user chooses to subscribe,
     * the trial should be kept. Unless it's `true`, customer must cancel the trial.
     * If no trial active, is nil
     */
    keep_trial_on_subscription?: boolean;
    last_invoice?: definitions["subscription.invoiceInfo"];
    last_payment?: definitions["models.PaymentInfo"];
    last_pricing_plan_id?: number;
    new_signup_trial?: boolean;
    next_payment_date?: string;
    payment_failed?: boolean;
    payment_method?: string;
    plan_name?: string;
    /** @description Legacy fields (kept for compatibility with FE) */
    pricing_plan_id?: number;
    renewal_at?: string;
    renewal_date?: string;
    seat_cost_in_cents?: number;
    seats?: number;
    site?: string;
    /** @description Deprecated: this field will be replaced by CurrentPeriodStartsAt */
    start_date?: string;
    state?: string;
    subscription_created_at?: string;
    subscription_period?: definitions["models.Period"];
    trial_available?: boolean;
    trial_end_date?: string;
    trial_start_date?: string;
  };
  "subscription.createUnifiedSubsRequest": {
    pricing_plan_tag?: string;
  };
  "subscription.invoiceInfo": {
    amount?: number;
    created_at?: string;
    currency_id?: number;
    due?: string;
    id?: number;
    paid_at?: string;
    tax_percentage?: number;
    total_amount?: number;
  };
  "subscription.payload": {
    data: { [key: string]: unknown };
  };
  "subscription.responsesSubmittedPayload": {
    responses_submitted?: definitions["models.DiscountRequestResponses"];
  };
  "subscription.updateUnifiedSubsRequest": {
    pricing_plan_tag?: string;
  };
  "tags.payload": {
    /** @description Tag name */
    name?: string;
  };
  "task.PatchFailure": {
    id?: number;
    message?: string;
  };
  "task.PatchInput": {
    op?: string;
    path?: string;
    value?: unknown;
  };
  "task.PatchOutput": {
    failure?: definitions["task.PatchFailure"][];
    success?: number[];
  };
  "task.Payload": {
    /** @description Use false to mark the task as done */
    active?: boolean;
    /** @description Task estimation in seconds */
    estimated_seconds?: number;
    /** @description Task external reference */
    external_reference?: string;
    /** @description Name */
    name?: string;
    /** @description Creator ID, if omitted, will use requester user ID */
    user_id?: number;
  };
  "task.Response": {
    data?: definitions["models.Task"][];
    page?: number;
    per_page?: number;
    sort_field?: string;
    sort_order?: string;
    total_count?: number;
  };
  /** @enum {integer} */
  "time.Weekday": 0 | 1 | 2 | 3 | 4 | 5 | 6;
  "timeentries.BulkGetSharingRequest": {
    time_entry_id?: number;
    workspace_id?: number;
  };
  "timeentries.BulkGetSharingResponse": {
    is_accepted?: boolean;
    time_entry_id?: number;
    time_entry_invitation_id?: number;
    user_id?: number;
    user_name?: string;
    workspace_id?: number;
  };
  "timeentries.GetTimEntryInvitationsResponse": {
    shared_by_user_id?: number;
    shared_by_user_name?: string;
    time_entry?: definitions["github_com_toggl_toggl_api_internal_models.TimeEntry"];
    time_entry_invitation_id?: number;
    workspace_id?: number;
  };
  "timeentry.EventMetadata": {
    origin_feature?: string;
    visible_goals_count?: number;
  };
  "timeentry.PatchFailure": {
    /** @description The ID for which the patch operation failed. */
    id?: number;
    /** @description The operation failure reason. */
    message?: string;
  };
  "timeentry.PatchInput": {
    /** @description Operation (add/remove/replace) */
    op?: string;
    /** @description The path to the entity to patch (e.g. /description) */
    path?: string;
    /** @description The new value for the entity in path. */
    value?: unknown;
  };
  "timeentry.PatchOutput": {
    failure?: definitions["timeentry.PatchFailure"][];
    /** @description The IDs for which the patch was succesful. */
    success?: number[];
  };
  "timeentry.Payload": {
    /** @description Whether the time entry is marked as billable, optional, default false */
    billable?: boolean;
    /** @description Must be provided when creating a time entry and should identify the service/application used to create it */
    created_with?: string;
    /** @description Time entry description, optional */
    description?: string;
    /** @description Time entry duration. For running entries should be negative, preferable -1 */
    duration?: number;
    /** @description Deprecated: Used to create a time entry with a duration but without a stop time. This parameter can be ignored. */
    duronly?: boolean;
    event_metadata?: definitions["timeentry.EventMetadata"];
    /** @description Work Expenses associated with the Time Entry */
    expense_ids?: number[];
    /** @description Project ID, legacy field */
    pid?: number;
    /** @description Project ID, optional */
    project_id?: number;
    /** @description List of user IDs to share this time entry with */
    shared_with_user_ids?: number[];
    /** @description Start time in UTC, required for creation. Format: 2006-01-02T15:04:05Z */
    start?: string;
    /** @description If provided during creation, the date part will take precedence over the date part of "start". Format: 2006-11-07 */
    start_date?: string;
    /**
     * @description Stop time in UTC, can be omitted if it's still running or created with "duration".
     * If "stop" and "duration" are provided, values must be consistent (start + duration == stop)
     */
    stop?: string;
    /** @description Can be "add" or "delete". Used when updating an existing time entry */
    tag_action?: string;
    /** @description IDs of tags to add/remove */
    tag_ids?: number[];
    /** @description Names of tags to add/remove. If name does not exist as tag, one will be created automatically */
    tags?: string[];
    /** @description Task ID, optional */
    task_id?: number;
    /** @description Task ID, legacy field */
    tid?: number;
    /** @description Time Entry creator ID, legacy field */
    uid?: number;
    /** @description Time Entry creator ID, if omitted will use the requester user ID */
    user_id?: number;
    /** @description Workspace ID, legacy field */
    wid?: number;
    /** @description Workspace ID, required */
    workspace_id?: number;
  };
  "timesheets.APITimesheet": {
    approved_or_rejected_at?: string;
    approved_or_rejected_id?: number;
    approved_or_rejected_name?: string;
    approver_avatar_url?: string;
    approver_id?: number;
    approver_name?: string;
    approvers?: definitions["timesheets.Approver"][];
    approvers_layers?: { [key: string]: definitions["timesheets.Approver"][] };
    end_date?: string;
    errors?: definitions["timesheets.TimesheetError"][];
    member_avatar_url?: string;
    member_id?: number;
    member_name?: string;
    period_editable?: boolean;
    period_end?: string;
    period_locked?: boolean;
    period_start?: string;
    periodicity?: string;
    permissions?: string[];
    rejection_comment?: string;
    reminder_day?: definitions["time.Weekday"];
    reminder_sent_at?: string;
    reminder_time?: string;
    review_layer?: number;
    reviews?: definitions["timesheets.Review"][];
    start_date?: string;
    status?: string;
    submitted_at?: string;
    timesheet_setup_id?: number;
    timezone?: string;
    working_hours_in_minutes?: number;
    workspace_id?: number;
  };
  "timesheets.Approver": {
    active?: boolean;
    avatar_url?: string;
    deleted?: boolean;
    name?: string;
    user_id?: number;
  };
  "timesheets.GetPaginatedResponse": {
    data?: definitions["timesheets.APITimesheet"][];
    page?: number;
    per_page?: number;
    total_count?: number;
  };
  "timesheets.PutBatchTimesheetPayload": {
    force_approved?: boolean;
    rejection_comment?: string;
    start_date?: string;
    status?: string;
    timesheet_setup_id?: number;
  };
  "timesheets.Review": {
    approved?: boolean;
    avatar_url?: string;
    force_approved?: boolean;
    name?: string;
    rejection_comment?: string;
    updated_at?: string;
    user_id?: number;
  };
  "timesheets.TimesheetError": {
    code?: string;
    message?: string;
  };
  "timesheets.TimesheetHoursResponse": {
    start_date?: string;
    timesheet_setup_id?: number;
    total_seconds?: number;
    working_hours_in_minutes?: number;
  };
  "timesheets.postTimesheetHoursPayload": {
    start_date?: string;
    timesheet_setup_id?: number;
  };
  "timesheets.putTimesheetPayload": {
    force_approved?: boolean;
    rejection_comment?: string;
    status?: string;
  };
  "timesheetsetups.APITimesheetSetup": {
    approver_avatar_url?: string;
    approver_id?: number;
    approver_name?: string;
    approvers?: definitions["timesheetsetups.Approvers"][];
    approvers_layers?: {
      [key: string]: definitions["timesheetsetups.Approvers"][];
    };
    end_date?: string;
    errors?: definitions["models.TimesheetSetupError"][];
    id?: number;
    member_avatar_url?: string;
    member_id?: number;
    member_name?: string;
    periodicity?: string;
    permissions?: string[];
    reminder_day?: definitions["time.Weekday"];
    reminder_time?: string;
    start_date?: string;
    workspace_id?: number;
  };
  "timesheetsetups.Approvers": {
    active?: boolean;
    avatar_url?: string;
    deleted?: boolean;
    name?: string;
    user_id?: number;
  };
  "timesheetsetups.GetPaginatedResponse": {
    data?: definitions["timesheetsetups.APITimesheetSetup"][];
  };
  "timesheetsetups.createPayload": {
    approver_id?: number;
    approver_ids?: number[];
    approvers_layers?: { [key: string]: number[] };
    member_ids?: number[];
    periodicity?: string;
    reminder_day?: definitions["time.Weekday"];
    reminder_time?: string;
    start_date?: string;
  };
  "timesheetsetups.updatePayload": {
    approver_id?: number;
    approver_ids?: number[];
    approvers_layers?: { [key: string]: number[] };
    end_date?: string;
    reminder_day?: definitions["time.Weekday"];
    reminder_time?: string;
  };
  "types.Permission": {
    condition?: string;
    description?: string;
    entity?: string;
    name?: string;
    permission_id?: number;
  };
  "types.Role": {
    code?: string;
    description?: string;
    entity?: string;
    name?: string;
    organization_id?: number;
    permissions?: definitions["types.Permission"][];
    role_id?: number;
  };
  "user.AssignmentsPayload": {
    group_id?: number;
    joined?: boolean;
    operation?: string;
    user_id?: number;
  };
  "user.Failure": {
    /** @description Organization user ID */
    id?: number;
    /** @description Found error message */
    message?: string;
  };
  "user.Flags": { [key: string]: unknown };
  "user.Output": {
    /** @description List of found errors */
    failure?: definitions["user.Failure"][];
    /** @description List of org user IDs that were successfully patched */
    success?: number[];
  };
  "user.PatchParams": {
    /** @description Organization user IDs to be deleted */
    delete?: number[];
  };
  "user.PostPayload": {
    /** @description Labor cost for this project user */
    labor_cost?: number;
    /** @description Labor cost change mode for this project user. Can be "start-today", "override-current", "override-all" */
    labor_cost_change_mode?: string;
    /** @description Whether the user will be manager of the project */
    manager?: boolean;
    /** @description Project ID */
    project_id?: number;
    /** @description Rate for this project user */
    rate?: number;
    /** @description Rate change mode for this project user. Can be "start-today", "override-current", "override-all" */
    rate_change_mode?: string;
    /** @description User ID */
    user_id?: number;
  };
  "user.PutPayload": {
    /** @description Labor cost for this project user */
    labor_cost?: number;
    /** @description Labor cost change mode for this project user. Can be "start-today", "override-current", "override-all" */
    labor_cost_change_mode?: string;
    /** @description Whether the user will be manager of the project */
    manager?: boolean;
    /** @description Rate for this project user */
    rate?: number;
    /** @description Rate change mode for this project user. Can be "start-today", "override-current", "override-all" */
    rate_change_mode?: string;
  };
  "utils.DefaultProjectTask": {
    project_id?: number;
    task_id?: number;
    workspace_id?: number;
  };
  "utils.EntityWorkspace": {
    id?: number;
    workspace_id?: number;
  };
  "utils.KeyboardShortcut": {
    key?: number;
    modifiers?: number;
  };
  "utils.MacOSAutoTracking": {
    id?: string;
    keyword?: string;
    project_id?: number;
    task_id?: number;
    workspace_id?: number;
  };
  "utils.WindowsAutoTracking": {
    billable?: boolean;
    description?: string;
    enabled?: boolean;
    id?: string;
    parameters?: definitions["utils.WindowsAutoTrackingParameter"];
    project_id?: number;
    skip_when_timer_is_running?: boolean;
    start_without_confirmation?: boolean;
    tag_ids?: number[];
    task_id?: number;
    type?: number;
    workspace_id?: number;
  };
  "utils.WindowsAutoTrackingParameter": {
    duration?: string;
    keyword?: string;
    keyword_mode?: string;
    time_of_day?: string;
    week_days?: string;
  };
  "workspace.Payload": {
    /** @description List of admins, optional */
    admins?: number[];
    /** @description Default currency, premium feature, optional, only for existing WS, will be 'USD' initially */
    default_currency?: string;
    /** @description The default hourly rate, premium feature, optional, only for existing WS, will be 0.0 initially */
    default_hourly_rate?: number;
    /** @description The subscription plan for the workspace, deprecated */
    initial_pricing_plan?: number;
    /** @description Whether the workspace limits public projects data in reports to admins. */
    limit_public_project_data?: boolean;
    /** @description Workspace name */
    name?: string;
    /** @description Only admins will be able to create projects, optional, only for existing WS, will be false initially */
    only_admins_may_create_projects?: boolean;
    /** @description Only admins will be able to create tags, optional, only for existing WS, will be false initially */
    only_admins_may_create_tags?: boolean;
    /** @description Only admins will be able to see the team dashboard, optional, only for existing WS, will be false initially */
    only_admins_see_team_dashboard?: boolean;
    /** @description Whether projects will be set as billable by default, premium feature, optional, only for existing WS. Will be true initially */
    projects_billable_by_default?: boolean;
    /** @description Whether tracking time to projects will enforce billable setting to be respected. */
    projects_enforce_billable?: boolean;
    /** @description Whether projects will be set to private by default, optional. Will be true initially. */
    projects_private_by_default?: boolean;
    /** @description The rate change mode, premium feature, optional, only for existing WS. Can be "start-today", "override-current", "override-all" */
    rate_change_mode?: string;
    /** @description Whether reports should be collapsed by default, optional, only for existing WS, will be true initially */
    reports_collapse?: boolean;
    /** @description Default rounding, premium feature, optional, only for existing WS */
    rounding?: number;
    /** @description Default rounding in minutes, premium feature, optional, only for existing WS */
    rounding_minutes?: number;
  };
  "workspace.WithActiveProjectCount": {
    active_project_count?: number;
    /**
     * @description Current user is workspace admin
     * Deprecated
     */
    admin?: boolean;
    /** @description deprecated */
    api_token?: string;
    /** @description Timestamp of last workspace change */
    at?: string;
    /** @description Workspace on Premium subscription */
    business_ws?: boolean;
    /** @description CSV upload data */
    csv_upload?: definitions["models.CsvUpload"];
    /** @description Default currency, premium feature, optional, only for existing WS, will be 'USD' initially */
    default_currency?: string;
    /** @description The default hourly rate, premium feature, optional, only for existing WS, will be 0.0 initially */
    default_hourly_rate?: number;
    /** @description Disable approvals in the workspace */
    disable_approvals?: boolean;
    /** @description Disable expenses in the workspace */
    disable_expenses?: boolean;
    /** @description Disable timesheet view in the workspace */
    disable_timesheet_view?: boolean;
    hide_start_end_times?: boolean;
    /** @description Calendar integration enabled */
    ical_enabled?: boolean;
    /** @description URL of calendar */
    ical_url?: string;
    /** @description Identifier of the workspace */
    id?: number;
    /** @description Last modification of data in the workspace */
    last_modified?: string;
    /** @description Limit public projects data in reports to admins. */
    limit_public_project_data?: boolean;
    /** @description URL of workspace logo */
    logo_url?: string;
    /** @description How far back free workspaces can access data. */
    max_data_retention_days?: definitions["models.DataRetentionDays"];
    /** @description Name of the workspace */
    name?: string;
    /** @description Only admins will be able to create projects, optional, only for existing WS, will be false initially */
    only_admins_may_create_projects?: boolean;
    /** @description Only admins will be able to create tags, optional, only for existing WS, will be false initially */
    only_admins_may_create_tags?: boolean;
    /** @description Only admins will be able to see the team dashboard, optional, only for existing WS, will be false initially */
    only_admins_see_team_dashboard?: boolean;
    /** @description Identifier of the organization */
    organization_id?: number;
    /** @description Permissions list */
    permissions?: string[];
    /** @description Workspace on Starter subscription */
    premium?: boolean;
    /** @description New projects billable by default */
    projects_billable_by_default?: boolean;
    /** @description Whether tracking time to projects will enforce billable setting to be respected. */
    projects_enforce_billable?: boolean;
    /** @description Workspace setting for default project visbility. */
    projects_private_by_default?: boolean;
    /** @description Timestamp of last workspace rate update */
    rate_last_updated?: string;
    /** @description Whether reports should be collapsed by default, optional, only for existing WS, will be true initially */
    reports_collapse?: boolean;
    /** @description Role of the current user in the workspace */
    role?: string;
    /** @description Default rounding, premium feature, optional, only for existing WS. 0 - nearest, 1 - round up, -1 - round down */
    rounding?: number;
    /** @description Default rounding in minutes, premium feature, optional, only for existing WS */
    rounding_minutes?: number;
    /** @description deprecated */
    subscription?: definitions["models.Subscription"];
    /**
     * Format: date-time
     * @description Timestamp of suspension
     */
    suspended_at?: string;
    /** @description Time entry constraints setting */
    te_constraints?: definitions["models.TimeEntryConstraints"];
    /** @description Working hours in minutes */
    working_hours_in_minutes?: number;
  };
  "workspace_users.PatchParams": {
    /** @description Workspace user IDs to be deleted */
    delete?: number[];
  };
  "workspaces.JSONResult": {
    wid?: number;
  };
}

export interface operations {
  /** Returns a list of audit log events for the specified organization and time range. */
  "get-audit-logs": {
    parameters: {
      path: {
        /** Numeric ID of the organization */
        organization_id: number;
        /** Start datetime in RFC3339 format */
        from: string;
        /** End datetime in RFC3339 format */
        to: string;
      };
      query: {
        /** If set to true, returns all audit logs without pagination */
        export?: boolean;
        /** Workspace ID */
        workspace_id?: number;
        /** Entity Type */
        entity_type?: string;
        /** Entity ID */
        entity_id?: number;
        /** Action */
        action?: string;
        /** User ID */
        user_id?: number;
        /** Page Size */
        page_size?: number;
        /** Page Number */
        page_number?: number;
      };
    };
    responses: {
      /** Successful operation */
      200: {
        schema: unknown[];
      };
      /** User does not have access to the audit logs */
      403: {
        schema: string;
      };
      /** Server error */
      500: {
        schema: string;
      };
    };
  };
  /** Returns the SSO URL given an email address for authenticating in an Identity Provider. */
  "get-saml2-login-url": {
    parameters: {
      query: {
        /** User email */
        email: string;
        /** Client identification (webapp/toggl-button/client) TODO: add desktop identification */
        client?: string;
        /** State to be preserved when redirecting to Accounts API */
        state?: string;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["saml2.LoginResponse"];
      };
      /** <p>Possible error messages:</p><ul><li>invalid email address</li><li>SSO is not configured for this email address</li></ul> */
      400: {
        schema: string;
      };
      /** We're sorry, but something went terribly wrong. We have been notified about the error. Please try again later. */
      500: {
        schema: string;
      };
    };
  };
  /** Receives the IdP Callback containing the SAML2 assertion with response of user authentication in the IdP. */
  "post-saml2-callback": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      formData: {
        /** SAML2 assertion with authentication response */
        SAMLResponse: string;
        /** Encoded string containing client and host which originated the requests */
        RelayState?: string;
      };
    };
    responses: {
      /** Authentication result URI */
      302: {
        schema: string;
      };
      /** We're sorry, but something went terribly wrong. We have been notified about the error. Please try again later. */
      500: {
        schema: string;
      };
    };
  };
  /** Handles POST avatar requests. */
  "post-avatars": {
    parameters: {
      formData: {
        /** file form data */
        file: string;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.Avatar"];
      };
      /** <p>Possible error messages:</p><ul><li>Invalid content type for image</li><li>Invalid 'end_date' value</li><li>We were unable to resize your image, please check your image and possibly convert it to a png or jpeg and try again</li></ul> */
      400: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Handles DELETE avatar requests. */
  "delete-avatars": {
    responses: {
      /** Successful operation. */
      200: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Change user avatar to gravatar. */
  "post-use-gravatar": {
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.Avatar"];
      };
      /** Couldn't fetch your Gravatar. Are you using the same e-mail both in Toggl and Gravatar? */
      400: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Returns a list of existing countries */
  "get-countries": {
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.Country"][];
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Returns a list of subdivisions for a specific country. */
  "get-countries-country_id-subdivisions": {
    parameters: {
      path: {
        /** country id */
        country_id: number;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.Subdivision"][];
      };
      /** Invalid country code. */
      404: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Returns a list of available currencies. */
  "get-currencies": {
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.Currency"][];
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Send Feedback */
  "post-unified-feedback": {
    parameters: {
      formData: {
        /** Toggl version. */
        toggl_version: string;
        /** Feedback date. */
        date: string;
        /** Feedback details. */
        details: string;
        /** Update channel. */
        update_channel?: string;
        /** Email subject. */
        subject?: string;
        /** Device Model. */
        device_model?: string;
        /** Build Number. */
        build_number?: string;
        /** Operating system. */
        operating_system?: string;
        /** Latest feedback. */
        latest?: boolean;
        /** One or more files. */
        files?: unknown;
      };
    };
    responses: {
      /** Feedback sent. */
      200: unknown;
      /** <p>Possible error messages:</p><ul><li>Please specify the toggl_version and date when sending feedback.</li><li>Please specify the details of your feedback.</li></ul> */
      400: unknown;
      /** Something else went wrong. */
      500: unknown;
    };
  };
  /** Returns ical file with TEs from last 14 days */
  "get-ical": {
    parameters: {
      path: {
        /** iCal token */
        token: string;
      };
    };
    responses: {
      /** Successful operation. */
      200: unknown;
      /** Paid feature */
      403: unknown;
      /** Not found */
      404: unknown;
    };
  };
  /** Returns an invitation data by code. */
  "get-invitations": {
    parameters: {
      path: {
        /** Invitation code */
        invitation_code: string;
      };
    };
    responses: {
      /** Successful operation */
      200: {
        schema: definitions["models.SSOInvitation"];
      };
      /** Invitation not found */
      404: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Returns the current JWKS keyset used to sign JWT tokens. */
  "get-keys": {
    responses: {
      /** JWKS keyset */
      200: {
        schema: unknown;
      };
      /** We're sorry, but something went terribly wrong. We have been notified about the error. Please try again later. */
      500: {
        schema: string;
      };
    };
  };
  /** Returns details for the current user. */
  "get-me": {
    parameters: {
      query: {
        /** Retrieve user related data (clients, projects, tasks, tags, workspaces, time entries, etc.) */
        with_related_data?: boolean;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["related.UserWithRelated"];
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** could not load user data */
      404: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Updates details for the current user. */
  "put-me": {
    parameters: {
      body: {
        /** Update user parameters */
        payload: definitions["me.payload"];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["github_com_toggl_toggl_api_internal_models.TogglUser"];
      };
      /** <p>Possible error messages:</p><ul><li>Current password is not valid</li><li>Current password must be present to change password</li><li>Invalid beginning_of_week</li><li>Invalid country_id</li><li>Invalid default_workspace_id</li><li>Invalid email</li><li>Invalid fullname</li><li>Invalid timezone</li><li>Password should be at least 6 characters</li><li>user with this email already exists</li></ul> */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
    };
  };
  /** Accepts the last version of the Terms of Service for the current user. */
  "post-me-accept-tos": {
    responses: {
      /** Successful operation. */
      200: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Get Clients. */
  "get-clients": {
    parameters: {
      formData: {
        /** Retrieve clients created/modified/deleted since this date using UNIX timestamp. */
        since?: number;
      };
    };
    responses: {
      /** Successful operation */
      200: {
        schema: definitions["models.Client"][];
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Close Account */
  "post-close-account": {
    responses: {
      /** Successful operation. */
      200: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Disable product emails. */
  "post-me-disable-product-emails": {
    parameters: {
      path: {
        /** Disable Code */
        disable_code: string;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Disable weekly report. */
  "post-me-disable-weekly-report": {
    parameters: {
      path: {
        /** Weekly report code */
        weekly_report_code: string;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Confirm SSO enabling in existing Toggl account after successful SSO */
  "post-enable-sso": {
    parameters: {
      body: {
        /** SSO enabling confirmation data */
        enable_sso_post: definitions["sso.Confirmation"];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: string;
      };
      /** <p>Possible error messages:</p><ul><li>invalid or expired confirmation code</li><li>user email doesn't match SSO credentials</li></ul> */
      400: {
        schema: string;
      };
    };
  };
  /** List of objects to be downloaded for an user */
  "get-me-export": {
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.DownloadRequestRecord"][];
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** An object which data to be downloaded for an user */
  "post-me-export": {
    parameters: {
      body: {
        /** Objects to export */
        data_export_object: definitions["export.payload"];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: string;
      };
      /** <p>Possible error messages:</p><ul><li>Cannot start another export until current one is complete</li><li>You must select at least one object to export</li></ul> */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Get a zip file List of download requests from an user. */
  "get-me-export-data-uuid-zip": {
    parameters: {
      path: {
        /** Archive UUID */
        uuid: string;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: string;
      };
      /** <p>Possible error messages:</p><ul><li>User export data cannot be found or is expired</li></ul> */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Gets all favorites for the requesting user */
  "get-favorites": {
    parameters: {
      formData: {
        /** Retrieve favorites created/deleted since this date using UNIX timestamp. */
        since?: number;
      };
    };
    responses: {
      /** List of favorites for a given user */
      200: {
        schema: definitions["models.Favorite"][];
      };
      /** User has no access to Favorites feature */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /**
   * This endpoint allows updating an array of favorites. It follow all the requirements
   * and behavior from the [post] (Create Favorite) counterpart.
   */
  "update-favorite": {
    parameters: {
      query: {
        /** Should the response contain data for meta entities */
        meta?: boolean;
      };
      body: {
        /** Favorite details */
        favorite: definitions["handlerfavorites.payload"];
      };
    };
    responses: {
      /** Updated favorite */
      200: {
        schema: definitions["models.Favorite"];
      };
      /** Possible error messages:<ul><li>the parameter '{parameter}' is invalid</li><li>we could not parse the provided parameters</li><li>user %d has no access to Favorites feature</li><li>favorite attributes are not valid: {attributes}</li><li>favorite constraints were not met: {constraints}</li></ul> */
      400: {
        schema: string;
      };
      /** Possible error messages:<ul><li>user {user_id} has no access to Favorites feature</li><li>user {user_id} has no access to all resources: {resources}</li></ul> */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /**
   * This endpoint allows the creation of a favorite given some parameters. The workspace is required, as well
   * as either description or project (no favorite without both will be accepted). The user is also required,
   * but it already goes in the authentication.
   * Also, the user must have access to all resources being referenced in the favorite attributes, and these
   * resources should have valid relationships. For instance, if you want a favorite in a given workspace and
   * with some tags, the tags must belong to that workspace. In case of user having no access to an attribute,
   * a 403 status is returned, if the attributes don't relate correctly between themselves the status
   * returned will be 400.
   */
  "create-favorite": {
    parameters: {
      query: {
        /** Should the response contain data for meta entities */
        meta?: boolean;
      };
      body: {
        /** Favorite details */
        favorite: definitions["handlerfavorites.payload"];
      };
    };
    responses: {
      /** Created favorite with its ID */
      200: {
        schema: definitions["models.Favorite"];
      };
      /** Possible error messages:<ul><li>the parameter '{parameter}' is invalid</li><li>we could not parse the provided parameters</li><li>user %d has no access to Favorites feature</li><li>favorite attributes are not valid: {attributes}</li><li>favorite constraints were not met: {constraints}</li></ul> */
      400: {
        schema: string;
      };
      /** Possible error messages:<ul><li>user {user_id} has no access to Favorites feature</li><li>user {user_id} has no access to all resources: {resources}</li></ul> */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** It will create 3 favorites based on past user's TE activity and return them. Suggested favorites will be created only once for a given user, and only if the user has never created a favorite before (either manually or by a previous suggestion request). If there is no past TE data there won't be suggested favorites either. */
  "post-favorites-suggestions": {
    responses: {
      /** List of suggested favorites */
      201: {
        schema: definitions["models.Favorite"][];
      };
      /** No suggested favorites */
      204: {
        schema: string;
      };
      /** User {user_id} has no access to Favorites feature */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Deletes a given favorite logically from database, as well as its tags. */
  "delete-favorite": {
    parameters: {
      path: {
        /** Numerical ID of the favorite */
        favorite_id: number;
      };
    };
    responses: {
      /** Favorite deleted */
      204: never;
      /** {favorite_id} given favorite ID is invalid */
      400: {
        schema: string;
      };
      /** Possible error messages:<ul><li>user {user_id} has no access to Favorites feature</li><li>user {user_id} is not the owner of favorite ID {favorite_id}</li></ul> */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Get features. */
  "get-me-features": {
    responses: {
      /** Successful operation */
      200: {
        schema: definitions["me.Workspace"][];
      };
      /** Operation Forbidden */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Returns flags for the current user. They will be represented by an object with dynamic string keys, where the value can be of any type. */
  "get-me-flags": {
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["user.Flags"];
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Add flags for the current user. The current limits are 4 flags per request, 128 flags in total. Keys and values can be up to 32 and 64 characters, respectively. */
  "post-me-flags": {
    parameters: {
      body: {
        /** flags */
        postFlags: definitions["user.Flags"];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["user.Flags"];
      };
      /** No valid data submitted */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Returns the local Track user ID for the authenticated user. */
  "get-me-id": {
    responses: {
      /** Successful operation. */
      200: {
        schema: number;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** could not load user data */
      404: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Returns the client's IP-based location. If no data is present, empty response will be yielded. */
  "get-me-location": {
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["me.UserLocationResponse"];
      };
      /** Country with given ISO code not found */
      404: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Get all organizations a given user is part of. */
  "get-organizations": {
    responses: {
      /** Successful operation. It returns an empty array when the user has no access. */
      200: {
        schema: definitions["models.MeOrganization"][];
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Returns user preferences and alpha features. The list of alpha features contains a full list of feature codes (every feature that exists in database) and the `enabled` flag specifying if that feature should be enabled or disabled for the user. */
  "get-preferences": {
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.AllPreferences"];
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** With this endpoint, preferences can be modified and alpha features can be enabled or disabled. */
  "post-preferences": {
    parameters: {
      body: {
        /** Preferences */
        preferences: definitions["models.AllPreferences"];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: string;
      };
      /** <p>Possible error messages:</p> <ul><li>Cannot set value for ToSAcceptNeeded</li><li>Invalid feature code(s)</li><li>Missing data</li><li>Value in date_format is invalid</li><li>Value in timeofday_format is invalid</li></ul> */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Returns user preferences and alpha features. The list of alpha features contains a full list of feature codes (every feature that exists in database) and the `enabled` flag specifying if that feature should be enabled or disabled for the user. */
  "get-preferences-client": {
    parameters: {
      path: {
        /** Client type */
        client?: "desktop" | "web";
      };
      formData: {
        /** Retrieve preference modified since this date using UNIX timestamp. */
        since?: number;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.AllPreferences"];
      };
      /** Unknown client. */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** With this endpoint, preferences can be modified and alpha features can be enabled or disabled. */
  "post-preferences-client": {
    parameters: {
      path: {
        /** Client type */
        client?: "desktop" | "web";
      };
      body: {
        /** Preferences */
        preferences: definitions["models.AllPreferences"];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: string;
      };
      /** <p>Possible error messages:</p> <ul><li>Cannot set value for ToSAcceptNeeded</li><li>Invalid feature code(s)</li><li>Missing data</li><li>Unknown client</li><li>Value in date_format is invalid</li><li>Value in timeofday_format is invalid</li></ul> */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Get projects */
  "get-me-projects": {
    parameters: {
      formData: {
        /** Include archived projects. */
        include_archived?: string;
        /** Retrieve projects modified since this date using UNIX timestamp, including deleted ones. */
        since?: number;
      };
    };
    responses: {
      /** Successful operation */
      200: {
        schema: definitions["github_com_toggl_toggl_api_internal_models.Project"][];
      };
      /** Invalid include_archived */
      400: {
        schema: string;
      };
      /** Operation Forbidden */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Get paginated projects. */
  "get-me-projects-paginated": {
    parameters: {
      formData: {
        /** Project ID to resume the next pagination from. */
        start_project_id?: number;
        /** Retrieve projects created/modified/deleted since this date using UNIX timestamp. */
        since?: number;
        /** Number of items per page, default 201. */
        per_page?: number;
      };
    };
    responses: {
      /** Successful operation */
      200: {
        schema: definitions["github_com_toggl_toggl_api_internal_models.Project"][];
      };
      /** Operation Forbidden */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Get list of firebase tokens registered for current user. */
  "get-push-services": {
    responses: {
      /** Successful operation */
      200: {
        schema: string[];
      };
      /** Operation forbidden */
      403: {
        schema: string;
      };
      /** Resource can not be found */
      404: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Register Firebase token for current user */
  "post-push-services": {
    parameters: {
      body: {
        /** FirebaseToken */
        post_push_services_subscribe: definitions["push.postPushServicesSubscribe"];
      };
    };
    responses: {
      /** Successful operation */
      200: {
        schema: string;
      };
      /** Field 'fcm_registration_token' is required */
      400: {
        schema: string;
      };
      /** Operation forbidden */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Unregister Firebase token for current user */
  "delete-push-services": {
    parameters: {
      body: {
        /** FirebaseToken */
        delete_push_services_unsubscribe: definitions["push.deletePushServicesUnsubscribe"];
      };
    };
    responses: {
      /** Successful operation */
      200: {
        schema: string;
      };
      /** Field 'fcm_registration_token' is required */
      400: {
        schema: string;
      };
      /** Operation forbidden */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Returns the API quota for the current user for all the organizations they are part of. */
  "get-quota": {
    responses: {
      /** Successful operation */
      200: {
        schema: definitions["me.GetQuotaResult"][];
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Resets API token for the current user. */
  "post-reset-token": {
    responses: {
      /** Successful operation. */
      200: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Returns tags for the current user. */
  "get-tags": {
    parameters: {
      formData: {
        /** Retrieve tags modified/deleted since this date using UNIX timestamp. */
        since?: number;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.Tag"][];
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Returns tasks from projects in which the user is participating. */
  "get-tasks": {
    parameters: {
      formData: {
        /** Retrieve tasks created/modified/deleted since this date using UNIX timestamp. */
        since?: number;
        /** Include tasks marked as done. */
        include_not_active?: string;
        /** Offset to resume the next pagination from. */
        offset?: number;
        /** Number of items per page, default is all. */
        per_page?: number;
      };
      query: {
        /** Should the response contain data for meta entities */
        meta?: boolean;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.Task"][];
      };
      /** Invalid include_not_active */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Lists latest time entries. */
  "get-time-entries": {
    parameters: {
      formData: {
        /** Get entries modified since this date using UNIX timestamp, including deleted ones. */
        since?: number;
        /** Get entries with start time, before given date (YYYY-MM-DD) or with time in RFC3339 format. */
        before?: string;
        /** Get entries with start time, from start_date YYYY-MM-DD or with time in RFC3339 format. To be used with end_date. */
        start_date?: string;
        /** Get entries with start time, until end_date YYYY-MM-DD or with time in RFC3339 format. To be used with start_date. */
        end_date?: string;
      };
      query: {
        /** Should the response contain data for meta entities */
        meta?: boolean;
        /** Include sharing details in the response */
        include_sharing?: boolean;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["github_com_toggl_toggl_api_internal_models.TimeEntry"][];
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Check the needed time entries requirement to offer coupon to user */
  "get-time-entries-checklist": {
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.TimeEntryChecklist"][];
      };
    };
  };
  /** Load running time entry for user ID. */
  "get-current-time-entry": {
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["github_com_toggl_toggl_api_internal_models.TimeEntry"];
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Resource can not be found */
      404: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Load time entry by ID that is accessible by the current user. */
  "get-time-entry-by-id": {
    parameters: {
      path: {
        /** TimeEntry ID. */
        time_entry_id: number;
      };
      query: {
        /** Should the response contain data for meta entities */
        meta?: boolean;
        /** Include sharing details in the response */
        include_sharing?: boolean;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["github_com_toggl_toggl_api_internal_models.TimeEntry"];
      };
      /** Resource can not be found */
      404: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Get the sharing details of the specified time entries in bulk */
  "post-me-time-entries-shared-with": {
    parameters: {
      body: {
        /** List of time entries to get the sharing details of. */
        request: definitions["timeentries.BulkGetSharingRequest"][];
      };
    };
    responses: {
      /** Returns a list of time entry sharing details. */
      200: {
        schema: definitions["timeentries.BulkGetSharingResponse"][];
      };
      /** <p>Possible error messages:</p><ul><li>Invalid workspace</li></ul> */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Returns the timehseets for the current user. */
  "get-me-timesheets": {
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.Timesheet"][];
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Returns a list of track reminders. */
  "get-me-track-reminders": {
    responses: {
      /** Returns a list of track reminders. */
      200: {
        schema: definitions["models.TrackReminder"][];
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Get web timer. */
  "get-web-timer": {
    responses: {
      /** Successful operation */
      200: {
        schema: string;
      };
      /** Operation Forbidden */
      403: {
        schema: string;
      };
      /** Resource can not be found */
      404: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Lists workspaces for given user. */
  "get-workspaces": {
    parameters: {
      formData: {
        /** Retrieve workspaces created/modified/deleted since this date using UNIX timestamp, including the dates a workspace member got added, removed or updated in the workspace. */
        since?: number;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["workspace.WithActiveProjectCount"][];
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Creates a new organization with a single workspace and assigns current user as the organization owner */
  "post-organization": {
    parameters: {
      body: {
        /** Input data for organization. */
        post_organizations_request: definitions["models.PostPayload"];
      };
    };
    responses: {
      /** Organization and workspace IDs */
      200: {
        schema: definitions["organization.PostOrganizationReply"];
      };
      /** <p>Possible error messages:</p><ul><li>Invalid JSON input</li><li>Field 'name' cannot be empty.</li><li>organization name too long, maximum length is 140</li><li>workspace name must contain non-space characters</li><li>workspace name must be provided</li><li>workspace name must not be longer than 140</li></ul> */
      400: {
        schema: string;
      };
      /** User is not authorized to create an organization */
      403: {
        schema: string;
      };
    };
  };
  /** User connected with invitation is marked as joined, email is sent to the inviter. */
  "post-organization-accept-invitation": {
    parameters: {
      path: {
        /** Invitation code */
        invitation_code: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: string;
      };
      /** Forbidden */
      403: {
        schema: string;
      };
      /** Invalid invitation code */
      404: {
        schema: string;
      };
    };
  };
  /** User connected with invitation is marked as deleted. */
  "post-reject-invitation": {
    parameters: {
      path: {
        /** Invitation code */
        invitation_code: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: string;
      };
      /** Forbidden */
      403: {
        schema: string;
      };
      /** Invalid invitation code */
      404: {
        schema: string;
      };
    };
  };
  /** Returns organization name and current pricing plan */
  "get-organization": {
    parameters: {
      path: {
        /** Numeric ID of the organization */
        organization_id: number;
      };
    };
    responses: {
      /** Successful operation */
      200: {
        schema: definitions["models.MeOrganization"];
      };
      /** <p>Possible error messages:</p><ul><li>Invalid organization ID</li><li>User not part of organization</li></ul> */
      404: unknown;
    };
  };
  /** Updates an existing organization */
  "put-organization": {
    parameters: {
      path: {
        /** Numeric ID of the organization. */
        organization_id: number;
      };
      body: {
        /** Input data for organization. */
        put_organizations_request: definitions["models.PutPayload"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: string;
      };
      /** <p>Possible error messages:</p><ul><li>Invalid JSON input</li><li>Invalid organization ID</li><li>At least one field is required</li><li>field 'name' cannot be empty</li><li>organization name too long, maximum length is 140</li></ul> */
      400: {
        schema: string;
      };
      /** User is not authorized to update the organization */
      403: {
        schema: string;
      };
    };
  };
  /**
   * Returns list of groups in organization based on set of url parameters.
   * List is sorted by name.
   */
  "get-organization-groups": {
    parameters: {
      path: {
        /** Numeric ID of the organization */
        organization_id: number;
      };
      query: {
        /** Returns records where name contains this string */
        name?: string;
        /** ID of workspace. Returns groups assigned to this workspace */
        workspace?: string;
      };
    };
    responses: {
      /** Successful operation */
      200: {
        schema: definitions["group.OrganizationGroupResponse"][];
      };
      /** Invalid number ... */
      400: {
        schema: string;
      };
    };
  };
  /** Creates a group in the specified organization */
  "post-organization-group": {
    parameters: {
      path: {
        /** Numeric ID of the organization. */
        organization_id: number;
      };
      body: {
        /** Input data for group creation. */
        post_group_request: definitions["group.Payload"];
      };
    };
    responses: {
      /** Returns the created group data. */
      200: {
        schema: definitions["group.OrganizationGroupResponse"];
      };
      /** <p>Possible error messages:</p><ul><li>Invalid JSON input</li><li>Group name must be present</li><li>Group name too long, maximum length is 200</li><li>Name has already been taken</li><li>User {user} not exists in the organization {org}</li><li>Workspace {ws} not exists in the organization {org}</li></ul> */
      400: {
        schema: string;
      };
      /** User does not have access to this resource */
      403: {
        schema: string;
      };
    };
  };
  /** Edits a group in the specified organization */
  "put-organization-group": {
    parameters: {
      path: {
        /** Numeric ID of the organization. */
        organization_id: number;
        /** Numeric ID of the group. */
        group_id: number;
      };
      body: {
        /** Input data for group modification. */
        put_group_request: definitions["group.Payload"];
      };
    };
    responses: {
      /** Returns the created group data. */
      200: {
        schema: definitions["group.OrganizationGroupResponse"];
      };
      /** <p>Possible error messages:</p><ul><li>Invalid JSON input</li><li>Group name must be present</li><li>Group name too long, maximum length is 200</li><li>Name has already been taken</li><li>User {user} not exists in the organization {org}</li><li>Workspace {ws} not exists in the organization {org}</li></ul> */
      400: {
        schema: string;
      };
      /** Forbidden */
      403: {
        schema: string;
      };
      /** Invalid group ID. */
      404: {
        schema: string;
      };
    };
  };
  /** Deletes a group from the specified organization */
  "delete-organization-group": {
    parameters: {
      path: {
        /** Numeric ID of the organization. */
        organization_id: number;
        /** Numeric ID of the group. */
        group_id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: string;
      };
      /** User does not have access to this resource */
      403: {
        schema: string;
      };
      /** Invalid group ID. */
      404: {
        schema: string;
      };
    };
  };
  /** Patches a group in the specified organization. Patches are applied individually. */
  "patch-organization-group": {
    parameters: {
      path: {
        /** Numeric ID of the organization. */
        organization_id: number;
        /** Numeric ID of the group. */
        group_id: number;
      };
      body: {
        /** Array of patch operations. */
        patch_group_request: definitions["groups.PatchInput"][];
      };
    };
    responses: {
      /** Returns the result of the requested operations. */
      200: {
        schema: definitions["groups.PatchOutput"];
      };
      /** <p>Possible error messages:</p><ul><li>Invalid JSON input</li><li>Empty or invalid patch operation</li><li>Empty or invalid patch path</li><li>Unknown group at organization</li><li>Too many patches</i><i>Too many values per patch</i></ul> */
      400: {
        schema: string;
      };
      /** Forbidden */
      403: {
        schema: string;
      };
      /** Invalid group ID. */
      404: {
        schema: string;
      };
    };
  };
  /** Creates a new invitation for the user. */
  "post-organization-invitation": {
    parameters: {
      path: {
        /** Numeric ID of the organization. */
        organization_id: number;
      };
      body: {
        /** Input data for invitation creation */
        post_invitation_request: definitions["invitation.Post"];
      };
    };
    responses: {
      /** Created user invitations */
      200: {
        schema: definitions["invitation.Result"];
      };
      /** Possible error messages:<ul><li>Invalid JSON input</li><li>Invalid organization id</li><li>at least one email is required</li><li>at least one workspace is required</li><li>Missing e-mail</li><li>Invalid e-mail: '...'</li><li>invalid workspace ID</li><li>Active user limit is 5. Upgrade to add more active users</li><li>Invitation limit reached (please try again later; or upgrade)</li><li>User with e-mail '...' is already an inactive member of the organization</li></ul> */
      400: {
        schema: string;
      };
      /** Forbidden */
      403: {
        schema: string;
      };
    };
  };
  /** Resend invitation email to user. */
  "put-invitation": {
    parameters: {
      path: {
        /** Organization ID */
        organization_id: number;
        /** Invitation ID */
        invitation_id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: string;
      };
      /** Organization ID and invitation organization ID mismatch */
      400: {
        schema: string;
      };
      /** Invitation code not found */
      404: {
        schema: string;
      };
    };
  };
  /** Returns a Invoice document in PDF form. */
  "get-organization-invoice": {
    parameters: {
      path: {
        /** Numeric ID of the organization. */
        organization_id: number;
        /** Numeric ID or string ID of the invoice. */
        invoice_uid: string;
      };
    };
    responses: {
      /** Invoice document in PDF form. */
      200: {
        schema: string;
      };
      /** Not authorized to access invoice */
      403: {
        schema: string;
      };
      /** <p>Possible error messages:</p><ul><li>Invalid organization id</li><li>No invoice found</li></ul> */
      404: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Returns organization owner data. */
  "get-organization-owner": {
    parameters: {
      path: {
        /** Numeric ID of the organization */
        organization_id: number;
      };
    };
    responses: {
      /** Successful operation */
      200: {
        schema: definitions["github_com_toggl_toggl_api_internal_models.OrganizationOwner"];
      };
      /** User does not have access to this resource */
      403: {
        schema: string;
      };
      /** Organization owner not found */
      404: {
        schema: string;
      };
    };
  };
  "get-ownership-transfers": {
    parameters: {
      path: {
        /** Numeric ID of the organization. */
        organization_id: number;
      };
      query: {
        /** If true, returns only current, not finished transfer */
        ongoing?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["models.Transfer"][];
      };
      /** 'ongoing' parameter can be true or false only */
      400: {
        schema: string;
      };
      /** User does not have access to this resource */
      403: {
        schema: string;
      };
    };
  };
  /** Return the ownership transfer for a given organization. */
  "post-ownership-transfer": {
    parameters: {
      path: {
        /** Numeric ID of the organization. */
        organization_id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["models.Transfer"];
      };
      /** Cannot load organization. */
      400: {
        schema: string;
      };
      /** User does not have access to this resource */
      403: {
        schema: string;
      };
    };
  };
  "get-ownership-transfer": {
    parameters: {
      path: {
        /** Numeric ID of the organization. */
        organization_id: number;
        /** Numeric ID of the transfer. */
        transfer_id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["models.Transfer"];
      };
      /** User does not have access to this resource */
      403: {
        schema: string;
      };
      /** Transfer not found in the organization */
      404: {
        schema: string;
      };
    };
  };
  /** Return the ownership transfer for a given organization and emails stakeholders. */
  "post-ownership-transfer-actions": {
    parameters: {
      path: {
        /** Numeric ID of the organization. */
        organization_id: number;
        /** Numeric ID of the transfer. */
        transfer_id: number;
        /** Action to update transfer with. */
        action: "accept" | "decline" | "withdraw";
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["models.Transfer"];
      };
      /** Cannot load current user data. */
      400: {
        schema: string;
      };
      /** Owner not found. */
      404: {
        schema: string;
      };
    };
  };
  /** Returns paid invoices */
  "get-organizations-payments-records": {
    parameters: {
      path: {
        /** Numeric ID of the organization */
        organization_id: number;
      };
      query: {
        /** If 'true', returns unified invoices */
        is_unified?: true | false;
        /** Next cursor for unified subsriptions. Cannot be used without `last_inv` */
        cursor?: string;
        /** Last invoice ID from the previous call. */
        last_inv?: string;
      };
    };
    responses: {
      /** Successful operation when `?is_unified=true` */
      200: {
        schema: definitions["models.UnifiedSubscriptionInvoiceList"][];
      };
      /** Forwards subscription client error message when `?is_unified=true` */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Returns pricing plans for an organization */
  "get-organizations-plans": {
    parameters: {
      path: {
        /** Numeric ID of the organization */
        organization_id: number;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["billing.PricingStruct"];
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Returns pricing plan for an organization identified by plan_id */
  "get-organizations-plan": {
    parameters: {
      path: {
        /** Numeric ID of the organization */
        organization_id: number;
        /** Numeric ID of the plan */
        plan_id: number;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["billing.PricingStruct"];
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Returns a list of organization specific and global roles. */
  "get-organization-roles": {
    parameters: {
      path: {
        /** Numeric ID of the organization */
        organization_id: number;
      };
    };
    responses: {
      /** Successful operation */
      200: {
        schema: definitions["types.Role"][];
      };
      /** User does not have access to the organization */
      403: {
        schema: string;
      };
      /** Server error */
      500: {
        schema: string;
      };
    };
  };
  /** Returns organization segmentation information */
  "get-organization-segmentation": {
    parameters: {
      path: {
        /** Numeric ID of the organization */
        organization_id: number;
      };
    };
    responses: {
      /** Successful operation */
      200: {
        schema: definitions["models.OrganizationSegmentation"];
      };
      /** Organization without segmentation information. */
      204: {
        schema: string;
      };
      /** <p>Possible error messages:</p><ul><li>User not part of organization</li></ul> */
      404: unknown;
    };
  };
  /** Save organization segmentation information */
  "put-organization-segmentation": {
    parameters: {
      path: {
        /** Numeric ID of the organization */
        organization_id: number;
      };
    };
    responses: {
      /** Successful operation */
      200: {
        schema: definitions["models.OrganizationSegmentation"];
      };
      /** <p>Possible error messages:</p><ul><li>User not part of organization</li></ul> */
      404: unknown;
    };
  };
  /** Returns subscription data. */
  "get-organization-subscription": {
    parameters: {
      path: {
        /** Numeric ID of the organization. */
        organization_id: number;
      };
    };
    responses: {
      /** Returns subscription data. */
      200: {
        schema: definitions["subscription.OutData"];
      };
      /** 'Admin permissions required.' if user is not part of the organization. */
      403: {
        schema: string;
      };
    };
  };
  /** Allows to update existing unified subscription for an organization. */
  "put-organization-subscription": {
    parameters: {
      path: {
        /** Numeric ID of the organization. */
        organization_id: number;
      };
      body: {
        /** Input data for updating subscription. */
        organization_subscription_request: definitions["subscription.updateUnifiedSubsRequest"];
      };
    };
    responses: {
      /** Subscription updated */
      200: unknown;
      /** pricing_plan_tag is a required field */
      400: {
        schema: string;
      };
    };
  };
  /** Allows to create a new unified subscription for an organization. */
  "post-organization-subscription": {
    parameters: {
      path: {
        /** Numeric ID of the organization. */
        organization_id: number;
      };
      body: {
        /** Input data for subscription creation. */
        organization_subscription_request: definitions["subscription.createUnifiedSubsRequest"];
      };
    };
    responses: {
      /** Subscription created */
      200: unknown;
      /** pricing_plan_tag is a required field */
      400: {
        schema: string;
      };
    };
  };
  /** Cancels an existing subscription. */
  "delete-organization-subscription": {
    parameters: {
      path: {
        /** Numeric ID of the organization. */
        organization_id: number;
      };
      query: {
        /** If true, the subscription is canceled immediately otherwise canceled at period end */
        immediateCancel: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: string;
      };
      /** <p>Possible error messages:</p><ul><li>subscription not found</li></ul> */
      404: {
        schema: string;
      };
    };
  };
  /** Allows to create a cancellation feedback for an organization subscription. */
  "post-organization-subscription-cancellation-feedback": {
    parameters: {
      body: {
        /** Feedback cancellation data */
        cancellationPayload: definitions["subscription.payload"];
      };
      path: {
        /** Numeric ID of the organization. */
        organization_id: number;
      };
    };
    responses: {
      /** Successfully created */
      201: unknown;
      /** <p>Possible error messages:</p><ul><li>JSON is not valid</li><li>Key: 'payload.Data' Error:Field validation for 'Data' failed on the 'required' tag</li><li>Key: 'payload.Data' Error:Field validation for 'Data' failed on the 'min' tag</li></ul> */
      400: {
        schema: string;
      };
      /** Forbidden */
      403: {
        schema: string;
      };
      /** Internal server error */
      500: {
        schema: string;
      };
    };
  };
  /** Retrieve unified customer belonging to the organization. */
  "get-unified-customer": {
    parameters: {
      path: {
        /** Numeric ID of the organization */
        organization_id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["customer.UnifiedCustomerResponse"];
      };
      /** Admin permissions required. */
      403: {
        schema: string;
      };
    };
  };
  /**
   * Allows to update unified customer data.
   * Customer name, email, country & postal code are mandatory fields.
   * Optional fields will be cleared if they don't have a value.
   */
  "put-unified-customer": {
    parameters: {
      path: {
        /** Numeric ID of the organization */
        organization_id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["customer.UnifiedCustomerResponse"];
      };
      /** Admin permissions required." if user is not an admin. */
      403: {
        schema: string;
      };
    };
  };
  /** Creates unified customer for organization. */
  "post-unified-customer": {
    parameters: {
      path: {
        /** Numeric ID of the organization */
        organization_id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["customer.UnifiedCustomerResponse"];
      };
      /** Admin permissions required." if user is not an admin. */
      403: {
        schema: string;
      };
    };
  };
  /** Endpoint for client's feedback when canceling plan. It triggers an e-mail to support with feedbacks and discount request. */
  "post-organization-subscription-discount-request": {
    parameters: {
      path: {
        /** Numeric ID of the organization */
        organization_id: number;
      };
      body: {
        /** Feedback from client when canceling a plan */
        responses_submitted: definitions["subscription.responsesSubmittedPayload"];
      };
    };
    responses: {
      /** Returns only status code when saved correctly. */
      200: {
        schema: string;
      };
      /** JSON is not valid */
      400: {
        schema: string;
      };
      /** Forbidden */
      403: {
        schema: string;
      };
      /** User is not found */
      404: {
        schema: string;
      };
    };
  };
  /** Gets feature upsell information for all organizations the user has access to */
  "get-feature-upsell-multi": {
    parameters: {
      path: {
        /** Numerical ID of the organization */
        organization_id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: { [key: string]: definitions["feature.UpsellResponse"][] };
      };
      /** Internal server error */
      500: {
        schema: string;
      };
    };
  };
  /** Returns a summary of the next invoice for an Organization */
  "get-organization-invoice-summary": {
    parameters: {
      path: {
        /** Numeric ID of the organization. */
        organization_id: number;
      };
      query: {
        /** Quantity of the subscription */
        quantity?: number;
        /** Pricing plan tag */
        pricing_plan_tag?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: string;
      };
      /** Bad Request */
      400: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Returns subscription payment failed details. */
  "get-organization-subscription-payment-failed": {
    parameters: {
      path: {
        /** Numeric ID of the organization. */
        organization_id: number;
      };
    };
    responses: {
      /** Returns subscription payment failed details. */
      200: {
        schema: definitions["models.PaymentFailedResponse"];
      };
      /** 'Admin permissions required.' if user is not part of the organization. */
      403: {
        schema: string;
      };
      /** 'Subscription not found.' if subscription is not found. */
      404: {
        schema: string;
      };
      /** 'Internal server error.' if an error occurred. */
      500: {
        schema: string;
      };
    };
  };
  /**
   * Applies the given promotion code to organization's customer
   * If the customer already has the promotion code, then it will be overridden
   */
  "post-promotion-code": {
    parameters: {
      path: {
        /** Numeric ID of the organization */
        organization_id: number;
      };
    };
    responses: {
      /** Promotion code applied */
      200: unknown;
      /** Not found */
      404: unknown;
    };
  };
  /** Removes any discount (promotion code) applied to the organization's customer */
  "delete-promotion-code": {
    parameters: {
      path: {
        /** Numeric ID of the organization */
        organization_id: number;
      };
    };
    responses: {
      /** Promotion code removed */
      200: unknown;
      /** Not found */
      404: unknown;
    };
  };
  /** Returns a Purchase Order document in PDF form. */
  "get-organization-purchase-order-pdf": {
    parameters: {
      path: {
        /** Numeric ID of the organization. */
        organization_id: number;
        /** Numeric ID or string ID of the purchase order. */
        purchase_order_uid: string;
      };
    };
    responses: {
      /** Purchase order document in PDF form. */
      200: {
        schema: string;
      };
      /** <p>Possible error messages:</p><ul><li>Purchase order not found</li><li>Company not found</li></ul> */
      404: {
        schema: string;
      };
    };
  };
  "post-referral-bonus": {
    parameters: {
      path: {
        /** Numeric ID of the organization */
        organization_id: number;
      };
      query: {
        /** The GrowSurf campaign to use instead of the default ones */
        campaign_id?: string;
      };
    };
    responses: {
      /** Referral bonus applied */
      200: unknown;
      /** Not found */
      404: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Create a setup intent for collecting customer's payment method for future payments */
  "create-setup-intent": {
    parameters: {
      path: {
        /** Numeric ID of the organization */
        organization_id: number;
      };
    };
    responses: {
      /** Setup intent created */
      200: unknown;
      /** Not found */
      404: unknown;
    };
  };
  /** Allows to create a new unified subscription on initial 30-day trial for an organization. */
  "post-organization-subscription-create-trial": {
    parameters: {
      path: {
        /** Numeric ID of the organization. */
        organization_id: number;
      };
    };
    responses: {
      /** Subscription created */
      200: unknown;
      /** Forbidden */
      403: {
        schema: string;
      };
      /** Internal server error */
      500: {
        schema: string;
      };
    };
  };
  /** Cancels an active trial. */
  "delete-organization-trial": {
    parameters: {
      path: {
        /** Numeric ID of the organization. */
        organization_id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: string;
      };
      /** <p>Possible error messages:</p><ul><li>trial not found</li></ul> */
      404: {
        schema: string;
      };
    };
  };
  /** Endpoint for triggering a call to action on admins for upgrading their subscription. */
  "post-organization-subscription-upgrade-request": {
    parameters: {
      path: {
        /** Numeric ID of the organization */
        organization_id: number;
        /** Numeric ID of the feature */
        feature_id: number;
      };
    };
    responses: {
      /** CTA notifications sent */
      200: {
        schema: string;
      };
      /** Forbidden */
      403: {
        schema: string;
      };
    };
  };
  /**
   * Returns list of users in organization based on set of url parameters:
   * Result is paginated. Pagination params are returned in headers
   */
  "get-organization-users": {
    parameters: {
      path: {
        /** Numeric ID of the organization */
        organization_id: number;
      };
      query: {
        /** Returns records where name or email contains this string */
        filter?: string;
        /** List of `active` `inactive` `invited` comma separated(if not present, all statuses) */
        active_status?: string;
        /** If true returns admins only */
        only_admins?: string;
        /** Comma-separated list of groups ids, returns users belonging to these groups only */
        groups?: string;
        /** Comma-separated list of workspaces ids, returns users belonging to this workspaces only */
        workspaces?: string;
        /** Page number, default 1 */
        page?: number;
        /** Number of items per page, default 50 */
        per_page?: number;
        /** Values 'asc' or 'desc', result is sorted on 'names' column, default 'asc' */
        sort_dir?: string;
      };
    };
    responses: {
      /** Successful operation */
      200: {
        headers: {};
        schema: definitions["models.OrgUser"][];
      };
      /** Possible error messages:<ul><li>Missing or invalid organization_id.</li><li>active_status parameter can contain only 'active', 'inactive' or 'invited'.</li><li>only_admins parameter can contain only 'true' or 'false'.</li><li>Invalid value sent for 'page'.</li><li>page parameter must contain values > 0.</li><li>Invalid value sent for 'per_page'.</li><li>per_page parameter must contain values > 0.</li><li>sort_dir parameter can contain only 'asc' or 'desc'.</li><li>Invalid value sent for 'groups'.</li><li>Invalid value sent for 'workspaces'.</li></ul> */
      400: {
        schema: string;
      };
      /** User is not authorized to list the organization users */
      403: {
        schema: string;
      };
    };
  };
  /** Apply changes in bulk to users in an organization (currently deletion only). */
  "patch-organization-users": {
    parameters: {
      path: {
        /** Numeric ID of the organization */
        organization_id: number;
      };
      body: {
        /** Input data of the users to be patched. */
        params: definitions["user.PatchParams"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: string;
      };
      /** Possible error messages:<ul><li>Missing or invalid organization_id</li><li>At least one organization user ID must be supplied.</li><li>Organization user IDs must be unique.</li><li>The following organization user IDs do not belong to this organization: '...'.</li><li>Cannot remove the paying user with organization user ID='...'.</li><li>Cannot remove the organization owner user with organization user ID='...'.</li></ul> */
      400: {
        schema: string;
      };
      /** User is not authorized to delete the organization user */
      403: {
        schema: string;
      };
    };
  };
  /**
   * Returns list of users in organization based on set of url parameters:
   * Result is paginated. Pagination params are returned in headers
   */
  "get-organization-users-detailed": {
    parameters: {
      path: {
        /** Numeric ID of the organization */
        organization_id: number;
      };
      query: {
        /** Returns records where name or email contains this string */
        filter?: string;
        /** List of `active` `inactive` `invited` comma separated(if not present, all statuses) */
        active_status?: string;
        /** If true returns admins only */
        only_admins?: string;
        /** Comma-separated list of groups ids, returns users belonging to these groups only */
        groups?: string;
        /** Comma-separated list of workspaces ids, returns users belonging to this workspaces only */
        workspaces?: string;
        /** Page number, default 1 */
        page?: number;
        /** Number of items per page, default 50 */
        per_page?: number;
        /** Values 'asc' or 'desc', result is sorted on 'names' column, default 'asc' */
        sort_dir?: string;
      };
    };
    responses: {
      /** Successful operation */
      200: {
        headers: {};
        schema: definitions["models.OrgUser"][];
      };
      /** Possible error messages:<ul><li>Missing or invalid organization_id.</li><li>active_status parameter can contain only 'active', 'inactive' or 'invited'.</li><li>only_admins parameter can contain only 'true' or 'false'.</li><li>Invalid value sent for 'page'.</li><li>page parameter must contain values > 0.</li><li>Invalid value sent for 'per_page'.</li><li>per_page parameter must contain values > 0.</li><li>sort_dir parameter can contain only 'asc' or 'desc'.</li><li>Invalid value sent for 'groups'.</li><li>Invalid value sent for 'workspaces'.</li><li>user cannot access specified workspace id.</li></ul> */
      400: {
        schema: string;
      };
      /** Forbidden */
      403: unknown;
    };
  };
  /** Leaves organization, effectively delete user account in org and delete organization if it is last user */
  "delete-organization-users-leave": {
    parameters: {
      path: {
        /** Numeric ID of the organization */
        organization_id: number;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: string;
      };
      /** Possible error messages:<ul><li>The user does not belong to the organization.</li><li>Cannot remove the paying user.</li><li>Cannot remove the organization owner.</li></ul> */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
    };
  };
  /** Changes a single organization-user. Can affect the following values: */
  "put-organization-users": {
    parameters: {
      path: {
        /** Numeric ID of the organization */
        organization_id: number;
        /** Numeric ID of the organization user */
        organization_user_id: number;
      };
      body: {
        /** Input data of the organization user to be changed. */
        params: definitions["github_com_toggl_toggl_api_internal_services_organization_user.Payload"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: string;
      };
      /** Possible error messages:<ul><li>Missing or invalid organization_id.</li><li>Invalid role_id.</li><li>Cannot use both admin flags and role_id.</li><li>User does not exist in the organization.</li><li>At least one field is required.</li><li>Field 'name' cannot be empty.</li><li>Missing e-mail.</li><li>Invalid e-mail: '...'</li><li>Email already exists.</li><li>Group '...' is not in Organization '...'.</li><li>Workspace '...' is not in Organization '...'.</li><li>Cannot remove admin privileges from owner.</li><li>Cannot deactivate owner.</li><li>Cannot remove admin privileges from paying user.</li><li>Cannot deactivate paying user.</li><li>User has multiple organizations.</li><li>Invalid organization role.</li><li>Invalid role ID: 1234.</li><li>Invalid workspace role with ID: 1234.</li></ul> */
      400: {
        schema: string;
      };
      /** User is not authorized to update the organization user */
      403: {
        schema: string;
      };
      /** Possible error messages:<ul><li>Invalid organization user ID.</li><li>Failed to load user data.</li></ul> */
      404: {
        schema: string;
      };
    };
  };
  /** Create a workspace within an existing organization. */
  "post-organization-workspaces": {
    parameters: {
      path: {
        /** Numeric ID of the organization */
        organization_id: number;
      };
      body: {
        /** Parameters of the new workspace */
        post: definitions["workspace.Payload"];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["github_com_toggl_toggl_api_internal_models.Workspace"];
      };
      /** Possible errors:<ul><li>JSON is not valid</li><li>workspace name must contain non-space characters</li><li>workspace name must not be nil</li><li>workspace name must not be longer than 140</li><li>another workspace with same name exists in organization</li><li>user can have a maximum of 100 workspaces</li><li>Multiple workspaces are not enabled in this organization.</li><li>Organization {name} can have a maximum of {amount} workspaces</li><li>User with id {id} does not exist.</li><li>User {userID} not exists in the workspace.</li></ul> */
      400: {
        schema: string;
      };
      /** Possible errors:<ul><li>Must be a premium user to use default_hourly_rate</li><li>restricting tag management to administrators requires a premium subscription</li><li>Must be a premium user to use default_currency</li><li>Must be a premium user to use rounding_minutes</li><li>Must be a premium user to use projects_billable_by_default</li><li>Must be a premium user to use rounding</li></ul> */
      402: {
        schema: string;
      };
      /** Forbidden */
      403: {
        schema: string;
      };
      /** Possible errors:<ul><li>Organization not found/accessible</li><li>Workspace not found/accessible</li><li>organization owner not found</li></ul> */
      404: {
        schema: string;
      };
    };
  };
  /**
   * Returns map indexed by workspace ID where each map element contains workspace admins list,
   * members count and groups count.
   */
  "get-organization-workspaces-statistics": {
    parameters: {
      path: {
        /** Numeric ID of the organization */
        organization_id: number;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: { [key: string]: definitions["models.Statistics"] };
      };
      /** Forbidden */
      403: {
        schema: string;
      };
      /** Resource can not be found */
      404: {
        schema: string;
      };
    };
  };
  /** Assign or remove users to/from a workspace or to/from groups belonging to said workspace. */
  "put-organization-workspaces-assignments": {
    parameters: {
      path: {
        /** Numeric ID of the organization */
        organization_id: number;
        /** Numeric ID of the workspace within the organization */
        workspace_id: number;
      };
      body: {
        /** Describes the change in assignment */
        post: definitions["user.AssignmentsPayload"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: string;
      };
      /** <p>Possible error messages:</p><ul><li>Invalid JSON input</li><li>Invalid organization ID.</li><li>Nothing to change.</li><li>Field operation can contain only 'add' or 'remove'.</li><li>Cannot send user_id and group_id in the same element.</li><li>One of user_id or group_id is required.</li><li>Invalid user_id.</li><li>Cannot remove workspace owner.</li><li>Cannot remove paying user.</li><li>Cannot remove organization admin.</li><li>Invalid group_id.</li><li>Invalid workspace ID.</li></ul> */
      400: {
        schema: string;
      };
      /** Forbidden */
      403: {
        schema: string;
      };
    };
  };
  /**
   * Returns list of groups in a workspace based on set of url parameters.
   * List is sorted by name.
   */
  "get-organization-workspaces-groups": {
    parameters: {
      path: {
        /** Numeric ID of the organization */
        organization_id: number;
        /** Numeric ID of the workspace within the organization */
        workspace_id: number;
      };
    };
    responses: {
      /** Successful operation */
      200: {
        schema: definitions["group.OrganizationGroupResponse"][];
      };
      /** Forbidden */
      403: {
        schema: string;
      };
      /** Resource can not be found */
      404: {
        schema: string;
      };
    };
  };
  /** Returns any users who belong to the workspace directly or through at least one group. */
  "get-organization-workspaces-workspaceusers": {
    parameters: {
      path: {
        /** Numeric ID of the organization */
        organization_id: number;
        /** Numeric ID of the workspace within the organization */
        workspace_id: number;
      };
      formData: {
        /** Workspace user name to filter by */
        name: string;
        /** Workspace filter by name or email */
        search: string;
      };
      query: {
        /** Page number */
        page?: number;
        /** Number of items per page */
        per_page?: number;
        /** Returns only users with or without a custom hourly rate respectively */
        custom_rates?: boolean;
        /** Returns only active users */
        active?: boolean;
      };
    };
    responses: {
      /** Successful operation */
      200: {
        schema: definitions["github_com_toggl_toggl_api_internal_models.WorkspaceUser"][];
      };
      /** Forbidden */
      403: {
        schema: string;
      };
      /** Resource can not be found */
      404: {
        schema: string;
      };
    };
  };
  /** Changes the users in a workspace (currently deletion only). */
  "patch-organization-workspace-users": {
    parameters: {
      path: {
        /** Numeric ID of the organization */
        organization_id: number;
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      body: {
        /** Input data of the users to be patched. */
        params: definitions["workspace_users.PatchParams"];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: string;
      };
      /** <p>Possible error messages:</p><ul><li>JSON is not valid</li><li>At least one workspace user ID must be supplied.</li><li>Workspace user IDs must be unique"</li><li>Wrong workspace user IDs</li></ul> */
      400: {
        schema: string;
      };
      /** Forbidden */
      403: {
        schema: string;
      };
    };
  };
  /** Send an email to a contact */
  "post-smail-contact": {
    parameters: {
      body: {
        /** Email informations */
        email_info: definitions["smail.ContactPayload"];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: string;
      };
      /** <p>Possible error messages:</p><ul><li>Email is required</li><li>Name is required</li><li>Message is required</li></ul> */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Send an email for a demo */
  "post-smail-demo": {
    parameters: {
      body: {
        /** Email informations */
        email_info: definitions["smail.DemoPayload"];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: string;
      };
      /** <p>Possible error messages:</p><ul><li>Email is required</li><li>Email is too long</li><li>Phone is required</li><li>Phone is too long</li><li>TeamSize is required</li><li>TeamSize is too long</li><li>Purpose is required</li><li>Purpose is too long</li><li>Source is required</li></ul><li>Source is too long</li></ul> */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Send an email for meet with message and location */
  "post-smail-meet": {
    parameters: {
      body: {
        /** Email and Location */
        email_location: definitions["smail.MeetPayload"];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: string;
      };
      /** <p>Possible error messages:</p><ul><li>Email is required</li><li>Location is required</li></ul> */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Returns API status. */
  "get-status": {
    responses: {
      /** Successful operation. */
      200: {
        schema: string;
      };
      /** Too Many Requests */
      429: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Get all available plans along with all features available per plan. */
  "get-all-plans": {
    responses: {
      /** List of plans with features per plan. */
      200: {
        schema: definitions["models.PlanWithFeatures"][][];
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Returns known timezones. */
  "get-timezones": {
    responses: {
      /** Successful operation. */
      200: {
        schema: string[];
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Returns known timezones with their offsets. */
  "get-offsets": {
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.Timezone"][];
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Lists Public subscription plans. */
  "get-public-subscription-plans": {
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["billing.FancyPlan"][];
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Get information of single workspace. */
  "get-workspace": {
    parameters: {
      path: {
        /** Numeric Workspace ID */
        workspace_id: number;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["github_com_toggl_toggl_api_internal_models.Workspace"];
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Update a specific workspace. */
  "put-workspaces": {
    parameters: {
      path: {
        /** Numeric Workspace ID */
        workspace_id: number;
      };
      body: {
        /** Workspace parameters */
        post: definitions["workspace.Payload"];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["github_com_toggl_toggl_api_internal_models.Workspace"];
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Returns a list of existing alerts */
  "get-alerts": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.AlertWithMeta"][];
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Handles POST alert requests. */
  "post-alerts": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      body: {
        /** Alert data */
        request: {
          project_id?: number;
          receiver_roles?: string[];
          receiver_users?: number[];
          source_kind?: string;
          threshold_type?: string;
          thresholds?: number[];
        };
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.AlertWithMeta"];
      };
      /** Possible errors:<ul><li>invalid workspace ID</li><li>source kind can't be blank</li><li>project can't be blank</li><li>project not supported for this source kind</li><li>threshold type can't be blank</li><li>thresholds can't be blank</li><li>receivers can't be blank</li><li>alert type out of range</li><li>receiver type out of range</li><li>threshold out of range</li><li>source kind out of range</li><li>threshold type out of range</li><li>receiver role out of range</li></ul> */
      400: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Handles PUT alert requests. */
  "put-alerts": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Numeric ID of the alert */
        alert_id: number;
      };
      body: {
        /** Alert data */
        request: {
          project_id?: number;
          receiver_roles?: string[];
          receiver_users?: number[];
          source_kind?: string;
          threshold_type?: string;
          thresholds?: number[];
        };
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.AlertWithMeta"];
      };
      /** Possible errors:<ul><li>invalid workspace ID</li><li>source kind can't be blank</li><li>project can't be blank</li><li>project not supported for this source kind</li><li>threshold type can't be blank</li><li>thresholds can't be blank</li><li>receivers can't be blank</li><li>alert type out of range</li><li>receiver type out of range</li><li>threshold out of range</li><li>source kind out of range</li><li>threshold type out of range</li><li>receiver role out of range</li></ul> */
      400: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Handles DELETE alert requests. */
  "delete-alerts": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Numeric ID of the alert */
        alert_id: number;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: string;
      };
      /** Possible errors:<ul><li>invalid 'alert_id' passed in URL</li></ul> */
      400: {
        schema: string;
      };
      /** Alert not found or not accessible */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** List clients from workspace. */
  "get-workspace-clients": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      query: {
        /** Use 'active' to only list active clients, 'archived' to only list archived clients and 'both' to retrieve active and archived clients. If not provided, only active clients are returned. */
        status?: string;
        /** If provided, allows to filter by client name in a case insensitive manner, returning all the ones that contain the given string. */
        name?: string;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.Client"][];
      };
      /** Client status is invalid */
      400: {
        schema: string;
      };
      /** Forbidden */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Create workspace client. */
  "post-workspace-clients": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      body: {
        /** Client */
        posted_client: definitions["client.Payload"];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.Client"];
      };
      /** <p>Possible error messages:</p><ul><li>Client name maximum length is {max_client_length}</li><li>Client name cannot be empty</li></ul> */
      400: unknown;
      /** Forbidden */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Archives workspace clients and related projects. Only for premium workspaces. */
  "archive-clients": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      body: {
        /** Array of client IDs to archive */
        body: number[];
      };
    };
    responses: {
      /** Client and project IDs that were archived */
      200: {
        schema: definitions["clients.ArchiveClientsResponse"][];
      };
      /** Forbidden */
      403: {
        schema: string;
      };
      /** No client with ID {client_id} was found */
      404: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** List clients from workspace by client_ids */
  "get-workspace-clients-data": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      body: {
        /** List of client_ids */
        client_ids: number[];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.Client"][];
      };
      /** Bad Request */
      400: unknown;
    };
  };
  /** Delete one or more workspace clients. */
  "delete-workspace-clients": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      body: {
        /** Numeric ID of the clients */
        body: number[];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: string;
      };
      /** Forbidden */
      403: {
        schema: string;
      };
      /** No client with ID {client_id} was found */
      404: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Load client from workspace. */
  "get-workspace-client": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Numeric ID of the client */
        client_id: number;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.Client"];
      };
      /** Forbidden */
      403: {
        schema: string;
      };
      /** No client with ID {client_id} was found */
      404: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /**
   * Update workspace client.
   *
   * Note: use /workspaces/{workspace_id}/clients/{client_id}/archive to archive the client and /workspaces/{workspace_id}/clients/{client_id}/restore to restore it.
   */
  "put-workspace-clients": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Numeric ID of the client */
        client_id: number;
      };
      body: {
        /** Client */
        posted_client: definitions["client.Payload"];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.Client"];
      };
      /** <p>Possible error messages:</p><ul><li>Client name maximum length is {max_client_length}</li><li>Client name cannot be empty</li></ul> */
      400: unknown;
      /** Forbidden */
      403: {
        schema: string;
      };
      /** Client doesn't exist in the workspace. */
      404: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Delete workspace client. */
  "delete-workspace-client": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Numeric ID of the client */
        client_id: number;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: number;
      };
      /** Forbidden */
      403: {
        schema: string;
      };
      /** No client with ID {client_id} was found */
      404: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Archives a workspace client and related projects. Only for premium workspaces. */
  "archive-client": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Numeric ID of the client */
        client_id: number;
      };
    };
    responses: {
      /** Projects that were archived with the client */
      200: {
        schema: number[];
      };
      /** Forbidden */
      403: {
        schema: string;
      };
      /** No client with ID {client_id} was found */
      404: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Restores client and all related or specified projects from the given workspace. */
  "restore-client": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Numeric ID of the client */
        client_id: number;
      };
      body: {
        /** Specify which projects should be restored with the client */
        restore_params?: definitions["project.RestoreParams"];
      };
    };
    responses: {
      /** Returns the restored client */
      200: {
        schema: definitions["models.Client"];
      };
      /** Bad Request */
      400: {
        schema: string;
      };
      /** Forbidden */
      403: {
        schema: string;
      };
      /** No client with ID {client_id} was found */
      404: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Get the currencies for a given workspace. */
  "get-workspace-currencies": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: string[];
      };
      /** <p>Possible error messages:</p><ul><li>Workspace not found</li></ul> */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /**
   * Dashboard's main purpose is to give an overview of what users in the workspace are doing and have been doing.
   * The activity object holds the data of 20 latest actions in the workspace or latest activity for every workspace user.
   * Activity object has the following properties
   * * user_id: user ID
   * * project_id: project ID (ID is 0 if time entry doesn't have project connected to it)
   * * duration: time entry duration in seconds. If the time entry is currently running, the duration attribute contains a negative value, denoting the start of the time entry in seconds since epoch (Jan 1 1970). The correct duration can be calculated as current_time + duration, where current_time is the current time in seconds since epoch.
   * * description: (Description property is not present if time entry description is empty)
   * * stop: time entry stop time (ISO 8601 date and time. Stop property is not present when time entry is still running)
   * * tid: task id, if applicable
   */
  "get-workspace-all-activities": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      formData: {
        /** Filter activities since this date using UNIX timestamp. */
        since?: number;
      };
    };
    responses: {
      /** Successful operation */
      200: {
        schema: definitions["dashboard.allActivities"][];
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /**
   * Dashboard's main purpose is to give an overview of what users in the workspace are doing and have been doing.
   * The most active user object holds the data of the top 5 users who have tracked the most time during last 7 days.
   * Most active user object has the following properties
   * * user_id: user ID
   * * duration: Sum of time entry durations that have been created during last 7 days.
   */
  "get-workspace-most-active": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      formData: {
        /** Filter activities since this date using UNIX timestamp. */
        since?: number;
      };
    };
    responses: {
      /** Successful operation */
      200: {
        schema: definitions["models.MostActiveUser"][];
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /**
   * Dashboard's main purpose is to give an overview of what users in the workspace are doing and have been doing.
   * Return objects are same as with the `/workspaces/{workspace_id}/dashboard/all_activity` request.
   */
  "get-workspace-top-activity": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      formData: {
        /** Filter activities since this date using UNIX timestamp. */
        since?: number;
      };
    };
    responses: {
      /** Successful operation */
      200: {
        schema: definitions["dashboard.allActivities"][];
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Get work expenses. */
  "get-expense": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
    };
    responses: {
      /** Successful operation */
      200: {
        schema: definitions["expenses.Expense"][];
      };
      /** <p>Possible error messages:</p><ul><li>Workspace not found</li></ul> */
      400: {
        schema: string;
      };
      /** Error message from the work API */
      412: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Upload a work expense. */
  "post-expense": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      formData: {
        /** Expense file. */
        file: unknown;
      };
    };
    responses: {
      /** Successful operation */
      200: {
        schema: definitions["expenses.Expense"];
      };
      /** <p>Possible error messages:</p><ul><li>Workspace not found</li></ul> */
      400: {
        schema: string;
      };
      /** Error message from the work API */
      412: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** List of workspace download requests from a given workspace. */
  "get-workspace-exports": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.DownloadRequestRecord"][];
      };
      /** <p>Possible error messages:</p><ul><li>Workspace not found</li></ul> */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** List of workspaces downloaded from a given workspace. */
  "post-workspace-exports": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      body: {
        /** Objects to export */
        tokens_list: string[];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: string;
      };
      /** <p>Possible error messages:</p><ul><li>Workspace not found</li><li>Cannot start another export until current one is complete</li><li>You must select at least one object to export</li></ul> */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Send a zip file List of workspace download requests from a given workspace. */
  "get-workspace-exports-data-uuid-zip": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Archive UUID */
        uuid: string;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: string;
      };
      /** <p>Possible error messages:</p><ul><li>Workspace not found</li><li>Workspace export data cannot be found or is expired</li></ul> */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Gets all favorites for the requesting user */
  "get-workspace-favorites": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      formData: {
        /** Retrieve favorites created/deleted since this date using UNIX timestamp. */
        since?: number;
      };
    };
    responses: {
      /** List of favorites for a given user */
      200: {
        schema: definitions["models.Favorite"][];
      };
      /** User has no access to Favorites feature */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /**
   * This endpoint allows updating an array of favorites. It follow all the requirements
   * and behavior from the [post] (Create Favorite) counterpart.
   */
  "update-workspace-favorite": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      query: {
        /** Should the response contain data for meta entities */
        meta?: boolean;
      };
      body: {
        /** Favorite details */
        favorite: definitions["favorites.UpdateFavorite"];
      };
    };
    responses: {
      /** Updated favorite */
      200: {
        schema: definitions["models.Favorite"];
      };
      /** Possible error messages:<ul><li>the parameter '{parameter}' is invalid</li><li>we could not parse the provided parameters</li><li>user %d has no access to Favorites feature</li><li>favorite attributes are not valid: {attributes}</li><li>favorite constraints were not met: {constraints}</li></ul> */
      400: {
        schema: string;
      };
      /** Possible error messages:<ul><li>user {user_id} has no access to Favorites feature</li><li>user {user_id} has no access to all resources: {resources}</li></ul> */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /**
   * This endpoint allows the creation of a favorite.
   * Also, the user must have access to all resources being referenced in the favorite attributes, and these
   * resources should have valid relationships. For instance, if you want a favorite in a given workspace and
   * with some tags, the tags must belong to that workspace. In case of user having no access to an attribute,
   * a 403 status is returned, if the attributes don't relate correctly between themselves the status
   * returned will be 400.
   */
  "create-workspace-favorite": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      query: {
        /** Should the response contain data for meta entities */
        meta?: boolean;
      };
      body: {
        /** Favorite details */
        favorite: definitions["favorites.CreateFavorite"];
      };
    };
    responses: {
      /** Created favorite with its ID */
      200: {
        schema: definitions["models.Favorite"];
      };
      /** Possible error messages:<ul><li>the parameter '{parameter}' is invalid</li><li>we could not parse the provided parameters</li><li>user %d has no access to Favorites feature</li><li>favorite attributes are not valid: {attributes}</li><li>favorite constraints were not met: {constraints}</li></ul> */
      400: {
        schema: string;
      };
      /** Possible error messages:<ul><li>user {user_id} has no access to Favorites feature</li><li>user {user_id} has no access to all resources: {resources}</li></ul> */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** It will create 3 favorites based on past user's TE activity and return them. Suggested favorites will be created only once for a given user, and only if the user has never created a favorite before (either manually or by a previous suggestion request). If there is no past TE data there won't be suggested favorites either. */
  "post-workspace-favorites-suggestions": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
    };
    responses: {
      /** List of suggested favorites */
      201: {
        schema: definitions["models.Favorite"][];
      };
      /** No suggested favorites */
      204: {
        schema: string;
      };
      /** User {user_id} has no access to Favorites feature */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Deletes a given favorite logically from database, as well as its tags. */
  "workspace-delete-favorite": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Numeric ID of the favorite */
        favorite_id: number;
      };
    };
    responses: {
      /** Favorite deleted */
      204: never;
      /** {favorite_id} given favorite ID is invalid */
      400: {
        schema: string;
      };
      /** Possible error messages:<ul><li>user {user_id} has no access to Favorites feature</li><li>user {user_id} is not the owner of favorite ID {favorite_id}</li></ul> */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Returns a list of groups for the specified workspace. */
  "get-workspace-groups": {
    parameters: {
      path: {
        /** Numeric ID of the workspace. */
        workspace_id: number;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["github_com_toggl_toggl_api_internal_models.Group"][];
      };
      /** User does not have access to this resource */
      403: {
        schema: string;
      };
    };
  };
  /** Creates a group in the specified workspace */
  "post-workspace-group": {
    parameters: {
      path: {
        /** Numeric ID of the workspace. */
        workspace_id: number;
      };
      body: {
        /** Input data for group creation. */
        post_group_request: definitions["group.NamePayload"];
      };
    };
    responses: {
      /** Returns the created group data. */
      200: {
        schema: definitions["github_com_toggl_toggl_api_internal_models.Group"];
      };
      /** <p>Possible error messages:</p><ul><li>Group name must be present</li><li>Group name too long, maximum length is 200</li><li>Name has already been taken</li></ul> */
      400: {
        schema: string;
      };
      /** User does not have access to this resource */
      403: {
        schema: string;
      };
    };
  };
  /** Updates the group. */
  "put-workspace-group": {
    parameters: {
      path: {
        /** Numeric ID of the workspace. */
        workspace_id: number;
        /** Numeric ID of the group. */
        group_id: number;
      };
      body: {
        /** Input data for group update. */
        put_group_request: definitions["group.NamePayload"];
      };
    };
    responses: {
      /** Returns the created updated data. */
      200: {
        schema: definitions["github_com_toggl_toggl_api_internal_models.Group"];
      };
      /** <p>Possible error messages:</p><ul><li>Group name must be present</li><li>Group name too long, maximum length is 200</li><li>Name has already been taken</li></ul> */
      400: {
        schema: string;
      };
      /** User does not have access to this resource */
      403: {
        schema: string;
      };
      /** Group was not found */
      404: {
        schema: string;
      };
    };
  };
  /** Deletes the group. */
  "delete-workspace-group": {
    parameters: {
      path: {
        /** Numeric ID of the workspace. */
        workspace_id: number;
        /** Numeric ID of the group. */
        group_id: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** User does not have access to this resource */
      403: {
        schema: string;
      };
      /** Group was not found */
      404: {
        schema: string;
      };
    };
  };
  /** Reset the iCal token for a given workspace. */
  "post-workspace-ical-reset": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: string;
      };
      /** Workspace not found */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Toggle the iCal token on/off for a given workspace. */
  "post-workspace-ical-toggle": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: string;
      };
      /** Workspace not found */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Get invoices for given workspace with pagination. */
  "get-workspace-invoices": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      formData: {
        /** Sort order, default ASC. */
        sort_order?: string;
        /** Number of items per page, default 50. */
        per_page?: number;
        /** Page number, default 1. */
        page?: number;
        /** Sort field, default created_at. */
        sort_field?: string;
      };
    };
    responses: {
      /** Successful operation */
      200: {
        schema: definitions["models.UserInvoice"][];
      };
      /** Operation Forbidden */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Creates new user invoice. */
  "post-workspace-user-invoice": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      body: {
        /** Post data */
        tag_post: definitions["models.UserInvoice"];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.UserInvoice"][];
      };
      /** Possible errors:<ul><li>Invalid JSON input</li></ul> */
      400: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Returns an Invoice document in PDF form. */
  "get-workspace-invoice": {
    parameters: {
      path: {
        /** Numeric ID of the workspace. */
        workspace_id: number;
        /** Numeric ID of the invoice. */
        invoice_id: number;
      };
    };
    responses: {
      /** Invoice document in PDF form. */
      200: {
        schema: string;
      };
      /** <p>Possible error messages:</p><ul><li>Admin permissions required</li><li>Not authorized to access invoice {invoice_id}</li></ul> */
      403: {
        schema: string;
      };
      /** No invoice found */
      404: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Deletes user invoice by ID if exists. */
  "delete-workspace-invoice": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** User invoice ID to be deleted */
        user_invoice_id: number;
      };
    };
    responses: {
      /** Successful operation */
      200: {
        schema: string;
      };
      /** Invoice not found */
      404: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Returns a list of SSO profiles that are linked to the given workspace. */
  "get-workspace-sso": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["client.LinkedSsoProfile"][];
      };
      /** <p>Possible message errors:</p><ul><li>The user does not have a Toggl account</li><li>The user is not authorized to manage SSO</li></ul>"// @Failure	500 {string} string "We're sorry, but something went terribly wrong. We have been notified about the error. Please try again later. */
      403: {
        schema: string;
      };
    };
  };
  /** Link the workspace with the given ID to an SSO profile with the given ID. */
  "put-workspace-sso": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Numeric ID of the SSO profile */
        sso_profile_id: number;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["client.LinkedSsoProfile"][];
      };
      /** <p>Possible message errors:</p><ul><li>error linking sso profile {sso_profile_id} to workspace {workspace_id}: SSO profile not found</li><li>error linking sso profile {sso_profile_id} to workspace {workspace_id}: no access to given profile</li><li>error linking sso profile {sso_profile_id} to workspace {workspace_id}: SSO profile already linked to a workspace</li><li>error linking sso profile {sso_profile_id} to workspace {workspace_id}: SSO profile is not approved</li></ul> */
      400: {
        schema: string;
      };
      /** <p>Possible message errors:</p><ul><li>The user does not have a Toggl account</li><li>The user is not authorized to manage SSO</li></ul> */
      403: {
        schema: string;
      };
      /** We're sorry, but something went terribly wrong. We have been notified about the error. Please try again later. */
      500: {
        schema: string;
      };
    };
  };
  /** Unlink the workspace from an SSO profile. */
  "delete-workspace-linked-sso-profiles": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Numeric ID of the SSO profile */
        sso_profile_id: number;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["client.LinkedSsoProfile"][];
      };
      /** <p>Possible message errors:</p><ul><li>error linking sso profile {sso_profile_id} to workspace {workspace_id}: SSO profile not found</li></ul> */
      400: {
        schema: string;
      };
      /** <p>Possible message errors:</p><ul><li>The user does not have a Toggl account</li><li>The user is not authorized to manage SSO</li></ul> */
      403: {
        schema: string;
      };
      /** We're sorry, but something went terribly wrong. We have been notified about the error. Please try again later. */
      500: {
        schema: string;
      };
    };
  };
  /** Get the logo for a given workspace. */
  "get-workspace-logo": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.Logo"];
      };
      /** Workspace not found */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Post the logo for a given workspace. */
  "post-workspace-logo": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.Logo"];
      };
      /** Workspace not found */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Delete the logo for a given workspace. */
  "delete-workspace-logo": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.Logo"];
      };
      /** Workspace not found */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Returns payment receipt pdf file. */
  "get-workspace-payment-receipts": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Numeric ID of the receipt */
        payment_id: number;
      };
    };
    responses: {
      /** Returns payment receipt pdf file. */
      200: {
        schema: string;
      };
      /** <p>Possible error messages:</p><ul><li>Payment {payment_id} not found for workspace {workspace_id}</li><li>Country not found for payment {payment_id}</li></ul> */
      404: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Get the preferences for a given workspace. */
  "get-workspace-preferences": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.Logo"];
      };
      /** Workspace not found */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Update the preferences for a given workspace. */
  "post-workspace-preferences": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      body: {
        /** Input data of the preferences. */
        preferences: definitions["models.WorkspacePreferences"];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.Logo"];
      };
      /** <p>Possible error messages:</p><ul><li>Workspace not found</li><li>The field is not writable</li></ul> */
      400: {
        schema: string;
      };
      /** Workspace needs to have the Locking time entries feature enabled */
      402: {
        schema: string;
      };
      /** Permission required to update time entries lock setting. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Get project groups for given workspace. */
  "get-project-groups": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      formData: {
        /** Project IDs separated by comma. */
        project_ids: string;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.ProjectGroup"][];
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Adds group to project for given workspace. */
  "post-project-group": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      body: {
        /** Input data */
        project_group_post: definitions["group.ProjectGroupPayload"];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Remove project group for a given workspace. */
  "delete-project-group": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Numeric ID of the project group */
        project_group_id: number;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** List all projects users for a given workspace. */
  "get-workspace-project-users": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      query: {
        /** Numeric IDs of projects, comma-separated */
        project_ids?: string;
        /** Numeric ID of user, if passed returns only project users for this user's projects */
        user_id?: string;
        /** Include group members */
        with_group_members?: boolean;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.ProjectUser"][];
      };
      /** <p>Possible error messages:</p><ul><li>Workspace not found</li><li>project_ids cannot exceed 200 elements.</li><li>Invalid user_id</li></ul> */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Include a project user for a given workspace. */
  "post-workspace-project-users": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      body: {
        /** Input data of the user. */
        project_user: definitions["user.PostPayload"];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.ProjectUser"];
      };
      /** <p>Possible error messages:</p><ul><li>Workspace not found</li><li>Invalid project_id</li><li>Invalid user_id</li><li>Project user already exists<li></ul> */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** List projects users for a given workspace and set of project IDs paginated. */
  "post-workspace-project-users-paginated": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      query: {
        /** Include inactive users in the response */
        show_inactive?: boolean;
        /** Number of users per project */
        users_per_project?: string;
        /** Page number */
        page?: number;
      };
      body: {
        /** Numeric IDs of projects */
        project_ids: number[];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.ProjectUserWithMeta"][];
      };
      /** Bad Request */
      400: unknown;
    };
  };
  /** Patch a list of project users for a given workspace. */
  "patch-workspace-project-users-ids": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Numeric IDs of the project users */
        project_user_ids: number[];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["user.Output"];
      };
      /** <p>Possible error messages:</p><ul><li>Invalid value as user IDs</li><li>No patchable fields defined</li><li>PATCH expects at least one ID</li><li>PATCH request is limited to %d entries at once</li><li>Invalid op: </li><li>Invalid path format: </li><li>Path not found: </li><li>Operation not supported ({patch_operation} {patch_path})</li><li>Invalid path</li><li>/manager expects a boolean</li><li>/labor_cost expects an float64 or null</li><li>/rate expects an float64 or null</li><li>Operation not supported (add /labor_cost)</li><li>Operation not supported (add /rate)</li><li>Operation not supported (add /manager)</li></ul> */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Update the data for a project user for a given workspace. */
  "put-workspace-project-users": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Numeric ID of the project user */
        project_user_id: number;
      };
      body: {
        /** Input data of the user. */
        project_user: definitions["user.PutPayload"];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.ProjectUser"];
      };
      /** <p>Possible error messages:</p><ul><li>Workspace not found</li><li>Missing data</li><li>Invalid project_id</li><li>Invalid user_id</li></ul> */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Delete a project user for a given workspace. */
  "delete-workspace-project-users": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Numeric ID of the project user */
        project_user_id: number;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: number;
      };
      /** <p>Possible error messages:</p><ul><li>Workspace not found</li><li>Project user not found/accessible</li><li>Invalid project_id</li></ul> */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Get projects for given workspace. */
  "get-projects": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      formData: {
        /** Return active or inactive project. You can pass 'both' to get both active and inactive projects. */
        active?: boolean;
        /** Retrieve projects created/modified/deleted since this date using UNIX timestamp. */
        since?: number;
        /** billable */
        billable?: boolean;
        /** user_ids */
        user_ids?: unknown[];
        /** client_ids */
        client_ids?: unknown[];
        /** group_ids */
        group_ids?: unknown[];
        /** Numeric IDs of the projects */
        project_ids?: unknown[];
        /** statuses */
        statuses?: unknown[];
        /** name */
        name: string;
        /** page */
        page: number;
        /** sort_field */
        sort_field: string;
        /** sort_order */
        sort_order: string;
        /** only_templates */
        only_templates: boolean;
        /** get only projects assigned to the current user */
        only_me?: boolean;
        /** Number of items per page, default 151. Cannot exceed 200. */
        per_page?: number;
      };
      query: {
        /** Place pinned projects at top of response */
        sort_pinned: boolean;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["github_com_toggl_toggl_api_internal_models.Project"][];
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Create project for given workspace. */
  "post-workspace-project-create": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      body: {
        /** Post parameters */
        post_input: definitions["project.Payload"];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["github_com_toggl_toggl_api_internal_models.Project"];
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Retrieves the task count for the specified projects */
  "project-task-count": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      body: {
        /** Post parameters */
        post_input: definitions["projects.taskCountPayload"];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: { [key: string]: number }[];
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Get projects templates for given workspace. */
  "get-projects-templates": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Retrieves the user count for the specified projects */
  "project-user-count": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      body: {
        /** Post parameters */
        post_input: definitions["projects.userCountPayload"];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: { [key: string]: number }[];
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Bulk editing workspace projects. */
  "patch-workspace-projects": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Numeric IDs of project ids, separated by comma. E.g.: `204301830,202700150,202687559` */
        project_ids: string;
      };
      body: {
        /** Array of batch operations */
        patch_input: definitions["project.PatchInput"][];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["projects.PatchOutput"];
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Update project for given workspace. */
  "put-workspace-project": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Numeric ID of the project */
        project_id: number;
      };
      body: {
        /** Post parameters */
        post_input: definitions["project.Payload"];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["github_com_toggl_toggl_api_internal_models.Project"];
      };
      /** Possible errors:<ul><li>Client with the ID {client ID} isn't present in workspace {workspace ID}</li><li>Error in validating color '{color}'. Project color must be a hex value in the form of #[0-9a-f]{6}.</li></ul> */
      400: {
        schema: string;
      };
      /** Possible errors:<ul><li>Only admins may create projects in this workspace</li><li>Only admins may create private projects in this workspace</li><li>User does not have access to this resource.</li></ul> */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Delete project for given workspace. */
  "delete-workspace-project": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Numeric ID of the project */
        project_id: number;
      };
      query: {
        /** Time entries deletion mode: 'delete' or 'unassign' */
        teDeletionMode?: string;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: number;
      };
      /** Possible errors:<ul><li>Invalid project_id</li></ul> */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Get recurring project periods for given workspace. */
  "get-workspace-project-periods": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Numeric ID of the project */
        project_id: number;
      };
      query: {
        /** Smallest boundary date to search for recurring periods */
        start_date?: string;
        /** Biggest boundary date to search for for recurring periods */
        end_date?: string;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.RecurringPeriod"];
      };
      /** Possible errors:<ul><li>Invalid project_id</li></ul> */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Pin or unpin a project to top of user's project list */
  "post-pinned-project": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Numeric ID of the project */
        project_id: number;
      };
      body: {
        /** Post parameters */
        post_input: definitions["projects.pinnedProjectPayload"];
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Possible error messages:<ul><li>Cannot pin more projects: Max 100 pins for paid plans</li><li>Cannot pin more projects: Max 1 pin for free plans</li></ul> */
      403: {
        schema: string;
      };
      /** Project not found/accessible */
      404: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Get project tasks for given workspace. */
  "get-workspace-project-tasks": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Numeric ID of the project */
        project_id: number;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.Task"];
      };
      /** Possible errors:<ul><li>Invalid project_id</li></ul> */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Post project tasks for given workspace. */
  "post-workspace-project-tasks": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Numeric ID of the project */
        project_id: number;
      };
      body: {
        /** Post parameters */
        post_input: definitions["task.Payload"];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.Task"];
      };
      /** Possible errors:<ul><li>"Project not found/accessible, Can not change tasks of archived project"</li><li>Invalid project_id</li></ul> */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Patch project tasks for given workspace. */
  "patch-workspace-project-tasks": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Numeric ID of the project */
        project_id: number;
        /** Numeric IDs of project tasks separated by comma */
        task_ids: string;
      };
      body: {
        /** Patch operations */
        patch_input: definitions["task.PatchInput"][];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["task.PatchOutput"];
      };
      /** Possible errors:<ul><li>Invalid project_id</li></ul> */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Get project task for given task id. */
  "get-workspace-project-task": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Numeric ID of the project */
        project_id: number;
        /** Numeric ID of the task */
        task_id: number;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.Task"];
      };
      /** Possible errors:<ul><li>Invalid project_id</li><li>Invalid task_id</li></ul> */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Put project task for given workspace. */
  "put-workspace-project-task": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Numeric ID of the project */
        project_id: number;
        /** Numeric ID of project task */
        task_id: string;
      };
      body: {
        /** Put parameters */
        patch_input: definitions["task.Payload"];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.Task"];
      };
      /** Possible errors:<ul><li>Invalid project_id</li><li>Invalid task_id</li></ul> */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Delete projects task for given workspace. */
  "delete-workspace-project-task": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Numeric ID of the project */
        project_id: number;
        /** Numeric ID of the task */
        task_id: number;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: string;
      };
      /** Possible errors:<ul><li>Invalid project_id</li><li>Invalid task_id</li></ul> */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Creates a new rate. */
  "create-rate": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      body: {
        /** Rate attributes */
        rate_post: definitions["rates.creationRequest"];
      };
    };
    responses: {
      /** Successfully created. */
      201: unknown;
      /** Possible error messages:<ul><li>Request payload must be informed</li><li>Invalid workspace ID</li></ul> */
      400: {
        schema: string;
      };
      /** Billable rates are available for Starter and higher plans. */
      402: {
        schema: string;
      };
      /** User cannot access billable rate(s). */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Get rates by level(workspace|project|task|user). */
  "get-rates-by-level": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Rates level: workspace, project, task or user */
        level: string;
        /** Numeric ID of the entity level */
        level_id: number;
      };
      query: {
        /** Type of rate values to be returned: `billable_rates` or `labor_costs`. Default is `billable_rates`. */
        type?: string;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.Rate"][];
      };
      /** Possible error messages:<ul><li>Invalid workspace ID</li><li>Invalid entity ID</li><li>Invalid level: it should be workspace, workspace_user, project or project_user</li><li>User not found in workspace</li><li>Task not found in workspace</li></ul> */
      400: {
        schema: string;
      };
      /** Billable rates are available for Starter and higher plans. */
      402: {
        schema: string;
      };
      /** User cannot access billable rate(s). */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Get shared report. */
  "get-shared-report": {
    parameters: {
      path: {
        /** Numeric ID of the workspace. */
        workspace_id: number;
      };
      query: {
        fixed_dates?: boolean;
        name?: string;
        page?: number;
        per_page?: number;
        public?: boolean;
        requestingUserID?: number;
        scheduled?: boolean;
        sort_direction?: string;
        sort_field?: string;
      };
    };
    responses: {
      /** Successful operation */
      200: {
        schema: definitions["models.SavedReport"][];
      };
      /** Invalid parameter {parameter_name}. */
      400: {
        schema: string;
      };
      /** Available only for premium workspaces. */
      402: {
        schema: string;
      };
      /** Workspace not found/accessible. */
      404: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Change shared report. */
  "put-shared-report": {
    parameters: {
      path: {
        /** Numeric ID of the workspace. */
        workspace_id: number;
      };
      body: {
        /** Saved Report Payload */
        saved_report_payload: definitions["saved.Payload"][];
      };
    };
    responses: {
      /** Returns shared report. */
      200: {
        schema: definitions["models.SavedReport"];
      };
      /** Possible errors:<ul><li>JSON is not valid</li><li>Report ID {report_id} failed with: saved report name field can't be blank</li><li>Report ID {report_id} failed with: parameter report_type invalid or blank</li></ul> */
      400: {
        schema: string;
      };
      /** Available only for premium workspaces. */
      402: {
        schema: string;
      };
      /** Public reports can be saved only by admins. */
      403: {
        schema: string;
      };
      /** Possible errors:<ul><li>Workspace not found/accessible.</li><li>Some IDs were not found: Only {found_count} Saved Reports found for {requested_count} given IDs.</li></ul> */
      404: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Add shared report. */
  "post-shared-report": {
    parameters: {
      path: {
        /** Numeric ID of the workspace. */
        workspace_id: number;
      };
      body: {
        /** Saved Report Payload */
        saved_report_payload: definitions["saved.Payload"];
      };
    };
    responses: {
      /** Returns shared report. */
      200: {
        schema: definitions["models.SavedReport"];
      };
      /** Possible errors:<ul><li>JSON is not valid</li><li>saved report name field can't be blank</li><li>saved report fixed_daterange can't be blank</li><li>saved report public can't be blank</li><li>parameter report_type is invalid or blank</li></ul> */
      400: {
        schema: string;
      };
      /** Available only for premium workspaces. */
      402: {
        schema: string;
      };
      /** Public reports can be saved only by admins. */
      403: {
        schema: string;
      };
      /** Workspace not found/accessible. */
      404: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Bulk delete saved reports. */
  "bulk-delete-saved-report-resource": {
    parameters: {
      path: {
        /** Numeric ID of the workspace. */
        workspace_id: number;
      };
      body: {
        /** Input data */
        input_data: definitions["shared.bulkDeleteInputData"];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.SavedReport"][];
      };
      /** JSON is not valid. */
      400: {
        schema: string;
      };
      /** Available only for premium workspaces. */
      402: {
        schema: string;
      };
      /** Possible errors:<ul><li>Workspace not found/accessible.</li><li>Some IDs were not found: Only {found_count} Saved Reports found for {requested_count} given IDs.</li></ul> */
      404: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Get a saved report. */
  "get-saved-report-resource": {
    parameters: {
      path: {
        /** Numeric ID of the workspace. */
        workspace_id: number;
        /** Numeric ID of the report. */
        report_id: number;
      };
    };
    responses: {
      /** Successful operation */
      200: {
        schema: definitions["models.SavedReport"];
      };
      /** Available only for premium workspaces. */
      402: {
        schema: string;
      };
      /** Possible errors:<ul><li>Workspace not found/accessible.</li><li>Report ID {report_id} not found/accessible.</li></ul> */
      404: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Change saved report. */
  "put-saved-report-resource": {
    parameters: {
      path: {
        /** Numeric ID of the workspace. */
        workspace_id: number;
        /** Numeric ID of the report. */
        report_id: number;
      };
      body: {
        /** Saved Report Payload */
        saved_report_payload: definitions["saved.Payload"];
      };
    };
    responses: {
      /** Returns saved report. */
      200: {
        schema: definitions["models.SavedReport"];
      };
      /** Possible errors:<ul><li>JSON is not valid</li><li>saved report name field can't be blank</li><li>parameter report_type invalid or blank</li></ul> */
      400: {
        schema: string;
      };
      /** Available only for premium workspaces. */
      402: {
        schema: string;
      };
      /** Public reports can be saved only by admins. */
      403: {
        schema: string;
      };
      /** Workspace not found/accessible. */
      404: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Delete saved report. */
  "delete-saved-report-resource": {
    parameters: {
      path: {
        /** Numeric ID of the workspace. */
        workspace_id: number;
        /** Numeric ID of the report. */
        report_id: number;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.SavedReport"];
      };
      /** Available only for premium workspaces. */
      402: {
        schema: string;
      };
      /** Possible errors:<ul><li>Workspace not found/accessible.</li><li>Report ID {report_id} not found/accessible.</li></ul> */
      404: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Lists scheduled reports. */
  "get-workspace-scheduled-reports": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
    };
    responses: {
      /** Lists scheduled reports. */
      200: {
        schema: definitions["models.ScheduledReport"][];
      };
      /** Workspace needs to have the {feature_name} feature enabled. */
      402: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Workspace not found/accessible */
      404: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Endpoint for setting up a scheduled report. */
  "post-workspace-scheduled-reports": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      body: {
        /** Comment from the client on the pricing plan change */
        workspace_id: definitions["scheduled.payload"];
      };
    };
    responses: {
      /** Returns created schedule report. */
      200: {
        schema: definitions["models.ScheduledReport"];
      };
      /** Possible error messages: <ul><li>Bookmark not found.</li><li>Unable to use all requested recipients.</li><li>No usable recipients found.</li><li>Invalid scheduled report frequency. Must be one of: 1 (daily), 7 (weekly) or 30 (monthly).</li></ul> */
      400: {
        schema: string;
      };
      /** Workspace needs to have the {feature_name} feature enabled. */
      402: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Workspace not found/accessible */
      404: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Endpoint for delete a scheduled report. */
  "delete-workspace-scheduled-reports": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Numeric ID of the report */
        report_id: number;
      };
    };
    responses: {
      /** Returns only status code. */
      200: {
        schema: string;
      };
      /** Workspace needs to have the {feature_name} feature enabled. */
      402: {
        schema: string;
      };
      /** Possible error messages: <ul><li>User does not have access to this resource.</li><li>Can't remove the schedule.</li></ul> */
      403: {
        schema: string;
      };
      /** Possible error messages: <ul><li>Scheduled report not found.</li><li>Workspace not found/accessible</li></ul> */
      404: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Returns workspace admins list, members count and groups count */
  "get-workspace-statistics": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.Statistics"];
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Returns subscription data. */
  "get-workspace-subscription": {
    parameters: {
      path: {
        /** Numeric ID of the workspace. */
        workspace_id: number;
      };
    };
    responses: {
      /** Returns subscription data. */
      200: {
        schema: definitions["subscription.OutData"];
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Returns a Purchase Order document in PDF form. */
  "get-workspace-purchase-order-pdf": {
    parameters: {
      path: {
        /** Numeric ID of the workspace. */
        workspace_id: number;
        /** Numeric ID of the purchase order. */
        purchase_order_id: number;
      };
    };
    responses: {
      /** Purchase order document in PDF form. */
      200: {
        schema: string;
      };
      /** <p>Possible error messages:</p><ul><li>Purchase order not found</li><li>Company not found</li></ul> */
      404: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** List Workspace tags. */
  "get-workspace-tag": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      query: {
        /** Page number */
        page?: number;
        /** Number of items per page */
        per_page?: number;
        /** Search by task name */
        search?: string;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.Tag"][];
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Create workspace tags. */
  "post-workspace-tag": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      body: {
        /** Post data */
        tag_post: definitions["tags.payload"];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.Tag"][];
      };
      /** Possible errors:<ul><li>Invalid JSON input</li><li>tag name can't be blank</li><li>a tag with the name '{tag_name}' already exists</li></ul> */
      400: {
        schema: string;
      };
      /** Only organization or workspace administrators may manage tags in this workspace. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Patch will not be executed if there are errors with some records. */
  "patch-workspace-tags": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: string;
      };
      /** Some tag IDs do not belong to workspace. */
      400: {
        schema: string;
      };
      /** Only organization or workspace administrators may manage tags in this workspace. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Update workspace tags. */
  "put-workspace-tag": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Numeric ID of the tag */
        tag_id: number;
      };
      body: {
        /** Put data */
        tag_post: definitions["tags.payload"];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.Tag"][];
      };
      /** Possible errors:<ul><li>Invalid JSON input</li><li>Invalid tag ID</li><li>tag name can't be blank</li><li>a tag with the name '{tag_name}' already exists</li></ul> */
      400: {
        schema: string;
      };
      /** Only organization or workspace administrators may manage tags in this workspace. */
      403: {
        schema: string;
      };
      /** Tag was not found */
      404: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Delete workspace tags. */
  "delete-workspace-tag": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Numeric ID of the tag */
        tag_id: number;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: string;
      };
      /** Invalid tag ID. */
      400: {
        schema: string;
      };
      /** Only organization or workspace administrators may manage tags in this workspace. */
      403: {
        schema: string;
      };
      /** Tag was not found. */
      404: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** List Workspace tasks. */
  "get-workspace-tasks": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      query: {
        /** Retrieve tasks created/modified/deleted since this date using UNIX timestamp. */
        since?: number;
        /** Page number, default 1 */
        page?: number;
        /** Number of items per page, default 50 */
        per_page?: number;
        /** Sort order, default ASC */
        sort_order?: string;
        /** Field used for sorting. Default is name. Valid values are 'name' and 'created_at' */
        sort_field?: string;
        /** Filter by active state. You can also pass 'both' to get both active and inactive tasks. */
        active?: boolean;
        /** Filter by project id */
        pid?: number;
        /** Smallest boundary date in the format YYYY-MM-DD */
        start_date?: string;
        /** Biggest boundary date in the format YYYY-MM-DD */
        end_date?: string;
        /** Search by task name */
        search?: string;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["task.Response"];
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** List Workspace tasks. */
  "get-workspace-tasks-basic": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      query: {
        /** Page number, default 1 */
        page?: number;
        /** Number of items per page, default 50 */
        per_page?: number;
        /** Sort order, default ASC */
        sort_order?: string;
        /** Field used for sorting. Default is name. Valid values are 'name' and 'created_at' */
        sort_field?: string;
        /** Filter by active state. You can also pass 'both' to get both active and inactive tasks. Default is true. */
        active?: boolean;
        /** Search for tasks by name. */
        search?: string;
        /** Filter by project ID */
        project_id?: number;
        /** Filter by project IDs (comma-separated) */
        project_ids?: unknown[];
        /** Filter by task IDs (comma-separated) */
        task_ids?: unknown[];
        /** Filter tasks from projects assigned to the current user. Default is true. */
        only_me?: boolean;
        /** Filter by client IDs (comma-separated) */
        client_ids?: unknown[];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["task.Response"];
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** List tasks from workspace by project_ids */
  getWorkspaceTasksData: {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      body: {
        /** List of project_ids */
        project_ids: number[];
        /** List of task_ids */
        task_ids?: number[];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.Task"][];
      };
      /** Bad Request */
      400: unknown;
    };
  };
  /** Creates a new workspace TimeEntry. */
  "post-workspace-time-entries": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      body: {
        /** TimeEntry parameters. */
        workspace_time_entry_post: definitions["timeentry.Payload"];
      };
      query: {
        /** Should the response contain data for meta entities */
        meta?: boolean;
      };
    };
    responses: {
      /** A workspace TimeEntry. */
      200: {
        schema: definitions["github_com_toggl_toggl_api_internal_models.TimeEntry"];
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** In short: http://tools.ietf.org/html/rfc6902 and http://tools.ietf.org/html/rfc6901 with some additions. Patch will be executed partially when there are errors with some records. No transaction, no rollback. */
  "patch-time-entries": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Numeric IDs of time_entries, separated by comma. E.g.: `204301830,202700150,202687559`. The limit is 100 IDs per request. */
        time_entry_ids: string;
      };
      body: {
        /** Array of batch operations */
        patch_input: definitions["timeentry.PatchInput"][];
      };
      query: {
        /** Should the response contain data for meta entities */
        meta?: boolean;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["timeentry.PatchOutput"];
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Updates a workspace time entry. */
  "put-workspace-time-entry-handler": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** TimeEntry ID. */
        time_entry_id: number;
      };
      body: {
        /** TimeEntry parameters. */
        workspace_time_entry_post: definitions["timeentry.Payload"];
      };
      query: {
        /** Should the response contain data for meta entities */
        meta?: boolean;
        /** Should the response contain time entry sharing details */
        include_sharing?: boolean;
      };
    };
    responses: {
      /** A workspace TimeEntry. */
      200: {
        schema: definitions["github_com_toggl_toggl_api_internal_models.TimeEntry"];
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Deletes a workspace time entry. */
  "delete-workspace-time-entries": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** TimeEntry ID. */
        time_entry_id: number;
      };
    };
    responses: {
      /** Returns only status code. */
      200: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Stops a workspace time entry. */
  "patch-workspace-stop-time-entry-handler": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** TimeEntry ID. */
        time_entry_id: number;
      };
    };
    responses: {
      /** The stopped workspace TimeEntry. */
      200: {
        schema: definitions["github_com_toggl_toggl_api_internal_models.TimeEntry"];
      };
      /** Invalid or missing time_entry_id */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Time entry not found */
      404: {
        schema: string;
      };
      /** Time entry already stopped */
      409: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Get the time entry constraints for a given workspace. */
  "get-workspace-time-entry-constraints": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.TimeEntryConstraints"];
      };
      /** Workspace not found */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Post the time entry constraints for a given workspace. */
  "post-workspace-time-entry-constraints": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      body: {
        /** Input data of the time entry constraints. */
        time_entry_constraints: definitions["models.TimeEntryConstraints"];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["workspaces.JSONResult"];
      };
      /** <p>Possible error messages:</p><ul><li>Workspace not found</li><li>Admin permissions required</li></ul> */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Get invitations for time entries */
  "get-workspace-time-entry-invitations": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
    };
    responses: {
      /** Returns a list of time entry invitations. */
      200: {
        schema: definitions["timeentries.GetTimEntryInvitationsResponse"][];
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Accept or reject an invitation for a time entry */
  "post-workspace-time-entry-invitation-action": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Numeric ID of the time entry invitation */
        time_entry_invitation_id: number;
        /** Action. One of 'accept' or 'reject' */
        action: string;
      };
    };
    responses: {
      /** Successful operation */
      204: {
        schema: string;
      };
      /** Possible errors:<ul><li>invalid time_entry_invitation_id</li></ul> */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Get timesheet setups for a given workspace. */
  "get-timesheet-setups": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      query: {
        /** Numeric ID of the members, comma-separated */
        member_ids?: number;
        /** Numeric ID of the approvers, comma-separated */
        approver_ids?: number;
        /** Field used for sorting, default start_date. */
        sort_field?: string;
        /** Sort order. */
        sort_order?: string;
      };
    };
    responses: {
      /** Successful operation */
      200: {
        schema: definitions["timesheetsetups.GetPaginatedResponse"];
      };
      /** <p>Possible error messages:</p><ul><li>Workspace not found</li><li>Invalid user ID</li><li>User not in workspace</li></ul> */
      400: {
        schema: string;
      };
      /** Approvals are a premium feature */
      402: {
        schema: string;
      };
      /** User does not have access to this resource */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Create timesheet setups. */
  "post-timesheet-setups": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      body: {
        /** Arrays of setup creation parameters. */
        payload: definitions["timesheetsetups.createPayload"];
      };
    };
    responses: {
      /** Successful operation */
      200: {
        schema: definitions["timesheetsetups.APITimesheetSetup"][];
      };
      /** <p>Possible error messages:</p><ul><li>Workspace not found</li><li>Invalid user ID</li><li>Too many user IDs</li><li>Invalid date</li><li>Invalid periodicity</li><li>User not in workspace</li><li>User is not an admin in the workspace</li><li>Approver cannot be member</li><li>Member already has a timesheet setup</li></ul> */
      400: {
        schema: string;
      };
      /** Approvals are a premium feature */
      402: {
        schema: string;
      };
      /** User does not have access to this resource */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Updates a timesheet setups. */
  "put-timesheet-setups": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Numeric ID of the timesheet setup */
        setup_id: number;
      };
      body: {
        /** Setup update parameters. */
        payload: definitions["timesheetsetups.updatePayload"];
      };
    };
    responses: {
      /** Successful operation */
      200: {
        schema: definitions["timesheetsetups.APITimesheetSetup"];
      };
      /** <p>Possible error messages:</p><ul><li>Workspace not found</li><li>Invalid user ID</li><li>Invalid date</li><li>User is not an admin in the workspace</li><li>End date must respect periodicity</li><li>Member already has a timesheet setup</li></ul> */
      400: {
        schema: string;
      };
      /** Approvals are a premium feature */
      402: {
        schema: string;
      };
      /** User does not have access to this resource */
      403: {
        schema: string;
      };
      /** Timesheet setup was not found */
      404: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Delete a timesheet setup for a given workspace. */
  "delete-timesheet-setups": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Numeric ID of the timesheet setup */
        setup_id?: number;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: string;
      };
      /** <p>Possible error messages:</p><ul><li>Workspace not found</li><li>Invalid setup ID</li><li>Failed to delete timesheet setup, member has approved, rejected or submitted timesheets</li></ul> */
      400: {
        schema: string;
      };
      /** Approvals are a premium feature */
      402: {
        schema: string;
      };
      /** User does not have access to this resource */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Get timesheets applying various filters. */
  "get-workspace-timesheets-handler": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      query: {
        /** Numeric ID of the members, comma-separated */
        member_ids?: number;
        /** Numeric ID of the approvers, comma-separated */
        approver_ids?: number;
        /** Numeric ID for timesheet setup, comma-separated. */
        timesheet_setup_ids?: number;
        /** Timesheet status, comma-separated. */
        statuses?: number;
        /** Timesheets starting before this date (YYYY-MM-DD). */
        before?: number;
        /** Timesheets starting after this date (YYYY-MM-DD). */
        after?: number;
        /** Page number, default 1. */
        page?: number;
        /** Number of items per page, default 20. Also defaults to 20 if provided an greater than 1000. */
        per_page?: number;
        /** Field used for sorting, default start_date. */
        sort_field?: string;
        /** Sort order. */
        sort_order?: string;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["timesheets.GetPaginatedResponse"][];
      };
      /** <p>Possible error messages:</p><ul><li>Workspace not found</li><li>Invalid ID</li><li>Invalid date</li><li>Invalid status</li></ul> */
      400: {
        schema: string;
      };
      /** Approvals are a premium feature */
      402: {
        schema: string;
      };
      /** User does not have access to this resource */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Updates a batch of timesheets. */
  "put-workspace-timesheets-batch-handler": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      body: {
        /** Array of timesheet status and rejection comment. */
        payload: definitions["timesheets.PutBatchTimesheetPayload"];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["timesheets.APITimesheet"];
      };
      /** <p>Possible error messages:</p><ul><li>Workspace not found</li><li>Invalid ID</li><li>Invalid date</li><li>Invalid status</li><li>Invalid status for rejection comment</li><li>Invalid timesheet transition</li></ul> */
      400: {
        schema: string;
      };
      /** Approvals are a premium feature */
      402: {
        schema: string;
      };
      /** User does not have access to this resource */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Get timesheet working hours and total tracked seconds. */
  "get-workspace-timesheet-hours-handler": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      body: {
        /** Array of timesheet setup IDs and start dates. */
        payload: definitions["timesheets.postTimesheetHoursPayload"];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["timesheets.TimesheetHoursResponse"][];
      };
      /** <p>Possible error messages:</p><ul><li>Workspace not found</li><li>Invalid ID</li><li>Invalid date</li></ul> */
      400: {
        schema: string;
      };
      /** Approvals are a premium feature */
      402: {
        schema: string;
      };
      /** User does not have access to this resource */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Updates a timesheet. */
  "put-workspace-timesheets-handler": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Numeric ID of the timesheet setup. */
        setup_id: number;
        /** Start date (YYYY-MM-DD) of the timesheet. */
        start_date: string;
      };
      body: {
        /** Timesheet status and rejection comment. */
        payload: definitions["timesheets.putTimesheetPayload"];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["timesheets.APITimesheet"];
      };
      /** <p>Possible error messages:</p><ul><li>Workspace not found</li><li>Invalid ID</li><li>Invalid date</li><li>Invalid status</li><li>Invalid status for rejection comment</li><li>Invalid timesheet transition</li></ul> */
      400: {
        schema: string;
      };
      /** Approvals are a premium feature */
      402: {
        schema: string;
      };
      /** User does not have access to this resource */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Get the time entries from within a timesheet timeframe. */
  "get-workspace-timesheet-time-entries-handler": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Numeric ID of the timesheet setup. */
        setup_id: number;
        /** Start date (YYYY-MM-DD) of the timesheet. */
        start_date: string;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["github_com_toggl_toggl_api_internal_models.TimeEntry"][];
      };
      /** <p>Possible error messages:</p><ul><li>Workspace not found</li><li>Invalid ID</li><li>Invalid date</li></ul> */
      400: {
        schema: string;
      };
      /** Approvals are a premium feature */
      402: {
        schema: string;
      };
      /** User does not have access to this resource */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Returns a list of track reminders. */
  "get-workspace-track-reminders": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
    };
    responses: {
      /** Returns a list of track reminders. */
      200: {
        schema: definitions["models.TrackReminder"][];
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Creates a workspace tracking reminder. */
  "post-workspace-track-reminders": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      body: {
        /** Reminder parameters. */
        track_reminder_post: definitions["reminders.payload"];
      };
    };
    responses: {
      /** Creates a workspace tracking reminder. */
      200: {
        schema: definitions["models.TrackReminder"];
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Updates a workspace tracking reminder. */
  "put-workspace-track-reminder": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Reminder ID. */
        reminder_id: number;
      };
      body: {
        /** Reminder parameters. */
        track_reminder_post: definitions["reminders.Payload"];
      };
    };
    responses: {
      /** Updates a workspace tracking reminder. */
      200: {
        schema: definitions["models.TrackReminder"];
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Deletes a workspace tracking reminder. */
  "delete-workspace-track-reminder": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Reminder ID. */
        reminder_id: number;
      };
    };
    responses: {
      /** Returns only status code. */
      200: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** List all users for a given workspace. */
  "get-workspace-users": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      query: {
        /** Exclude deleted records in the response */
        exclude_deleted?: boolean;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.SimpleWorkspaceUser"][];
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** List of the specified workspace users basic data for a given workspace. */
  "post-workspace-users-data": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      body: {
        /** Numeric IDs of users */
        user_ids: number[];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["models.SimpleWorkspaceUser"][];
      };
      /** <p>Possible error messages:</p><ul><li>user_ids must not be empty</li><li>user_ids must not contain more than 150 elements</li></ul> */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Update the data for a user in a given workspace. */
  "put-workspace-users": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Numeric ID of the user */
        user_id: number;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: string;
      };
      /** Bad Request */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Not Found */
      404: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** List all workspace_users for a given workspace. */
  "get-workspace-workspace_users": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
      };
      query: {
        /** If true, includes indirect users (i.e. users assigned via group) to workspace user list */
        includeIndirect: string;
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: definitions["github_com_toggl_toggl_api_internal_models.WorkspaceUser"][];
      };
      /** <p>Possible error messages:</p><ul><li>Workspace not found</li><li>User not found</li></ul> */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Update the data for a workspace_user in a given workspace. */
  "put-workspace-workspace_users": {
    parameters: {
      path: {
        /** Numeric ID of the workspace */
        workspace_id: number;
        /** Numeric ID of the workspace user */
        workspace_user_id: number;
      };
      body: {
        /** Changes that need to be applied to the user data. */
        post: definitions["github_com_toggl_toggl_api_internal_services_workspace_user.Payload"];
      };
    };
    responses: {
      /** Successful operation. */
      200: {
        schema: string;
      };
      /** <p>Possible error messages:</p><ul><li>Workspace not found/accessible</li><li>User not found</li><li>Workspace user not found/accessible by user</li><li>Working hours must be positive or null</li><li>Invalid role_id.</li><li>Cannot use both admin flags and role_id.</li><li>User does not exist in the organization.</li><li>User does not exist in the workspace.</li></ul> */
      400: {
        schema: string;
      };
      /** User does not have access to this resource. */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
  /** Removes user from workspace */
  "delete-workspace-user": {
    parameters: {
      path: {
        /** Numeric ID of the workspace. */
        workspace_id: number;
        /** Numeric ID of the workspace user. */
        workspace_user_id: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        schema: string;
      };
      /** Workspace user is not found or accessible */
      403: {
        schema: string;
      };
      /** Internal Server Error */
      500: {
        schema: string;
      };
    };
  };
}

export interface external {}
